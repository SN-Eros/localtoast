benchmark_configs: {
  id: "hfsplus-mounting-disabled"
  compliance_note: {
    version: { cpe_uri: "cpe:/o:debian:ubuntu_linux:22.04" version: "2.0.0" benchmark_document: "CIS Ubuntu 22.04" }
    title: "Ensure mounting of hfsplus filesystems is disabled"
    description:
      "The hfsplus filesystem type is a hierarchical filesystem designed to "
      "replace hfs that allows you to mount Mac OS filesystems."
    rationale:
      "Removing support for unneeded filesystem types reduces the local attack "
      "surface of the server. If this filesystem type is not needed, disable "
      "it."
    remediation:
      "Edit or create a file in the /etc/modprobe.d/ directory ending in .conf\n"
      "Example: vim /etc/modprobe.d/hfsplus.conf\n"
      "and add the following line:\n"
      "```\n"
      "install hfsplus /bin/true\n"
      "```\n"
      "Run the following command to unload the hfsplus module:\n"
      "```\n"
      "# rmmod hfsplus\n"
      "```\n"
    cis_benchmark: {
      profile_level: 1
      severity: LOW
    }
    scan_instructions:
      "scan_type_specific:{instance_scanning:{"
      "  check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{single_file:{path:\"/proc/modules\"}}"
      "      content_entry:{"
      "        match_type: NONE_MATCH"
      "        match_criteria: {"
      "          filter_regex: \"hfsplus .*\""
      "          expected_regex: \"hfsplus .*\""
      "        }"
      "      }"
      "    }"
      "    file_checks:{"
      "      files_to_check:{files_in_dir:{"
      "        dir_path:\"/etc/modprobe.d\""
      "        filename_regex: \".*\\\\.conf\""
      "        recursive: true"
      "      }}"
      "      content_entry:{"
      "        match_type: ALL_MATCH_ANY_ORDER"
      "        match_criteria: {"
      "          filter_regex: \"install hfsplus .*\""
      "          expected_regex: \"install hfsplus /bin/true\""
      "        }"
      "      }"
      "    }"
      "  }"
      "  check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{single_file:{path:\"/etc/modprobe.d\"}}"
      "      existence:{should_exist: false}"
      "    }"
      "  }"
      "}"
      "image_scanning:{"
      "  check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{files_in_dir:{"
      "        dir_path:\"/etc/modprobe.d\""
      "        filename_regex: \".*\\\\.conf\""
      "        recursive: true"
      "      }}"
      "      content_entry:{"
      "        match_type: ALL_MATCH_ANY_ORDER"
      "        match_criteria: {"
      "          filter_regex: \"install hfsplus .*\""
      "          expected_regex: \"install hfsplus /bin/true\""
      "        }"
      "      }"
      "    }"
      "  }"
      "  check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{single_file:{path:\"/etc/modprobe.d\"}}"
      "      existence:{should_exist: false}"
      "    }"
      "  }"
      "}}"
  }
}

benchmark_configs: {
  id: "jffs2-mounting-disabled"
  compliance_note: {
    version: { cpe_uri: "cpe:/o:debian:ubuntu_linux:22.04" version: "2.0.0" benchmark_document: "CIS Ubuntu 22.04" }
    title: "Ensure mounting of jffs2 filesystems is disabled"
    description:
      "The jffs2 (journaling flash filesystem 2) filesystem type is a "
      "log-structured filesystem used in flash memory devices."
    rationale:
      "Removing support for unneeded filesystem types reduces the local attack "
      "surface of the server. If this filesystem type is not needed, disable "
      "it."
    remediation:
      "Edit or create a file in the /etc/modprobe.d/ directory ending in .conf\n"
      "Example: vim /etc/modprobe.d/jffs2.conf\n"
      "and add the following line:\n"
      "```\n"
      "install jffs2 /bin/true\n"
      "```\n"
      "Run the following command to unload the jffs2 module:\n"
      "```\n"
      "# rmmod jffs2\n"
      "```\n"
    cis_benchmark: {
      profile_level: 1
      severity: LOW
    }
    scan_instructions:
      "scan_type_specific:{instance_scanning:{"
      "  check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{single_file:{path:\"/proc/modules\"}}"
      "      content_entry:{"
      "        match_type: NONE_MATCH"
      "        match_criteria: {"
      "          filter_regex: \"jffs2 .*\""
      "          expected_regex: \"jffs2 .*\""
      "        }"
      "      }"
      "    }"
      "    file_checks:{"
      "      files_to_check:{files_in_dir:{"
      "        dir_path:\"/etc/modprobe.d\""
      "        filename_regex: \".*\\\\.conf\""
      "        recursive: true"
      "      }}"
      "      content_entry:{"
      "        match_type: ALL_MATCH_ANY_ORDER"
      "        match_criteria: {"
      "          filter_regex: \"install jffs2 .*\""
      "          expected_regex: \"install jffs2 /bin/true\""
      "        }"
      "      }"
      "    }"
      "  }"
      "  check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{single_file:{path:\"/etc/modprobe.d\"}}"
      "      existence:{should_exist: false}"
      "    }"
      "  }"
      "}"
      "image_scanning:{"
      "  check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{files_in_dir:{"
      "        dir_path:\"/etc/modprobe.d\""
      "        filename_regex: \".*\\\\.conf\""
      "        recursive: true"
      "      }}"
      "      content_entry:{"
      "        match_type: ALL_MATCH_ANY_ORDER"
      "        match_criteria: {"
      "          filter_regex: \"install jffs2 .*\""
      "          expected_regex: \"install jffs2 /bin/true\""
      "        }"
      "      }"
      "    }"
      "  }"
      "  check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{single_file:{path:\"/etc/modprobe.d\"}}"
      "      existence:{should_exist: false}"
      "    }"
      "  }"
      "}}"
  }
}
benchmark_configs: {
  id: "usb-storage-disabled"
  compliance_note: {
    version: { cpe_uri: "cpe:/o:debian:ubuntu_linux:22.04" version: "2.0.0" benchmark_document: "CIS Ubuntu 22.04" }
    title: "Disable USB Storage"
    description:
      "USB storage provides a means to transfer and store files insuring "
      "persistence and availability of the files independent of network "
      "connection status. Its popularity and utility has led to USB-based "
      "malware being a simple and common means for network infiltration and "
      "a first step to establishing a persistent threat within a networked "
      "environment"
    rationale:
      "Restricting USB access on the system will decrease the physical attack "
      "surface for a device and diminish the possible vectors to introduce "
      "malware."
    remediation:
      "Edit or create a file in the /etc/modprobe.d/ directory ending in .conf\n"
      "Example: vim /etc/modprobe.d/usb-storage.conf\n"
      "and add the following line:\n"
      "```\n"
      "install usb-storage /bin/true\n"
      "```\n"
      "Run the following command to unload the usb-storage module:\n"
      "```\n"
      "rmmod usb-storage\n"
      "```\n"
    cis_benchmark: {
      profile_level: 1
      severity: LOW
    }
    scan_instructions:
      "scan_type_specific:{instance_scanning:{"
      "  check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{single_file:{path:\"/proc/modules\"}}"
      "      content_entry:{"
      "        match_type: NONE_MATCH"
      "        match_criteria: {"
      "          filter_regex: \"usb-storage .*\""
      "          expected_regex: \"usb-storage .*\""
      "        }"
      "      }"
      "    }"
      "    file_checks:{"
      "      files_to_check:{files_in_dir:{"
      "        dir_path:\"/etc/modprobe.d\""
      "        filename_regex: \".*\\\\.conf\""
      "        recursive: true"
      "      }}"
      "      content_entry:{"
      "        match_type: ALL_MATCH_ANY_ORDER"
      "        match_criteria: {"
      "          filter_regex: \"install usb-storage .*\""
      "          expected_regex: \"install usb-storage /bin/true\""
      "        }"
      "      }"
      "    }"
      "  }"
      "  check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{single_file:{path:\"/etc/modprobe.d\"}}"
      "      existence:{should_exist: false}"
      "    }"
      "  }"
      "}"
      "image_scanning:{"
      "  check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{files_in_dir:{"
      "        dir_path:\"/etc/modprobe.d\""
      "        filename_regex: \".*\\\\.conf\""
      "        recursive: true"
      "      }}"
      "      content_entry:{"
      "        match_type: ALL_MATCH_ANY_ORDER"
      "        match_criteria: {"
      "          filter_regex: \"install usb-storage .*\""
      "          expected_regex: \"install usb-storage /bin/true\""
      "        }"
      "      }"
      "    }"
      "  }"
      "  check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{single_file:{path:\"/etc/modprobe.d\"}}"
      "      existence:{should_exist: false}"
      "    }"
      "  }"
      "}}"
  }
}
benchmark_configs: {
  id: "separate-partition-shm"
  compliance_note: {
    version: { cpe_uri: "cpe:/o:debian:ubuntu_linux:22.04" version: "2.0.0" benchmark_document: "CIS Ubuntu 22.04" }
    title: "Ensure /dev/shm is a separate partition"
    description:
      "The /dev/shm directory is a world-writable directory that can function as shared memory "
      "that facilitates inter-process communication (IPC)."
    rationale:
      "Making /dev/shm its own file system allows an administrator to set additional mount "
      "options such as the noexec option on the mount, making /dev/shm useless for an "
      "attacker to install executable code. It would also prevent an attacker from establishing a "
      "hard link to a system setuid program and wait for it to be updated. Once the program "
      "was updated, the hard link would be broken and the attacker would have his own copy "
      "of the program. If the program happened to have a security vulnerability, the attacker "
      "could continue to exploit the known flaw."
    remediation:
      "Modify /etc/fstab to ensure /dev/shm is configured as a separate partition with appropriate options:\n"
      "```\n"
      "tmpfs /dev/shm tmpfs defaults,rw,nosuid,nodev,noexec,relatime,size=2G 0 0\n"
      "```\n"
    cis_benchmark: {
      profile_level: 1
      severity: MEDIUM
    }
    scan_instructions:
      "scan_type_specific:{"
      "  instance_scanning:{"
      "    check_alternatives:{"
      "      file_checks:{"
      "        files_to_check:{single_file:{path:\"/proc/self/mountinfo\"}}"
      "        content_entry:{"
      "          match_type: ALL_MATCH_ANY_ORDER"
      "          match_criteria: {"
      "            filter_regex: \".* /dev/shm .* - .*\""
      "            expected_regex: \".* /dev/shm .*rw,nosuid,nodev,noexec.* - .*\""
      "          }"
      "        }"
      "      }"
      "    }"
      "  },"
      "  image_scanning:{"
      "    check_alternatives:{"
      "      file_checks:{"
      "        files_to_check:{single_file:{path:\"/etc/fstab\"}}"
      "        content_entry:{"
      "          match_type: ALL_MATCH_ANY_ORDER"
      "          match_criteria: {"
      "            filter_regex: \"tmpfs /dev/shm tmpfs .*\""
      "            expected_regex: \"tmpfs /dev/shm tmpfs defaults,rw,nosuid,nodev,noexec,relatime,size=2G 0 0\""
      "          }"
      "        }"
      "      }"
      "    }"
      "  }"
      "}"
  }
}

benchmark_configs: {
  id: "home-nosuid"
  compliance_note: {
    version: { cpe_uri: "cpe:/o:debian:ubuntu_linux:22.04" version: "2.0.0" benchmark_document: "CIS Ubuntu 22.04" }
    title: "Ensure nosuid option set on /home partition"
    description: "The nosuid mount option specifies thatthe filesystem cannot contain setuid files."
    rationale:
      "Since the /nome filesystem is only intended for user file storage, set this option to ensure "
      "that users cannot create setuid files in /home."
    remediation:
      "Edit the /etc/fstab file and add nosuid to the fourth field (mounting options) for the "
      "/home partition.\n"
      "Example:\n"
      "```\n"
      "<device> /home <fstype> defaults, rw,nosuid, nodev, noexec, relatime 0 0\n"
      "```\n"
      "Run the following command to remount /home with the configured options:\n"
      "```\n"
      "mount -o remount /home\n"
      "```\n"
      "References:\n"
      "1. See the fstab(5) manual page for more information."
    cis_benchmark: {
      profile_level: 1
      severity: LOW
    }
    scan_instructions:
      "scan_type_specific:{instance_scanning:{"
      "check_alternatives:{"
      "  file_checks:{"
      "    files_to_check:{single_file:{path:\"/proc/self/mountinfo\"}}"
      "    content_entry:{"
      "      match_type: ALL_MATCH_ANY_ORDER"
      "      match_criteria: {"
      "          filter_regex: \".* /home .* - .*\""
      "          expected_regex: \".* /home .*nosuid.* - .*\""
      "      }"
      "    }"
      "  }"
      "}"
      "check_alternatives:{"
      "  file_checks:{"
      "    files_to_check:{single_file:{path:\"/proc/self/mountinfo\"}}"
      "    content_entry:{"
      "      match_type: NONE_MATCH"
      "      match_criteria: {"
      "          filter_regex: \".* /home .* - .*\""
      "          expected_regex: \".* /home .* - .*\""
      "      }"
      "    }"
      "  }"
      "}}}"
  }
}
benchmark_configs: {
  id: "ptrace-scope-restricted"
  compliance_note: {
    version: { cpe_uri: "cpe:/o:debian:ubuntu_linux:22.04" version: "2.0.0" benchmark_document: "CIS Ubuntu 22.04" }
    title: "Ensure ptrace_scope is restricted"
    description:
      "This configuration ensures that the ptrace() system call is restricted to limit the ability of compromised processes to attach to other processes running under the same user, enhancing system security."
    rationale:
      "Enabling restricted mode limits the ability of compromised processes to attach to other processes running under the same user, reducing the scope of potential attacks."
    remediation:
      "Set the following parameter in `/etc/sysctl.conf` or a file in `/etc/sysctl.d/` ending in `.conf`:\n"
      "```\n"
      "kernel.yama.ptrace_scope = 1\n"
      "```\n"
      "Run the following command to set the active kernel parameter:\n"
      "```\n"
      "sysctl -w kernel.yama.ptrace_scope=1\n"
      "```\n"
    cis_benchmark: {
      profile_level: 1
      severity: HIGH
    }
    scan_instructions:
      "scan_type_specific:{instance_scanning:{"
      "  check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{single_file:{path:\"/proc/sys/kernel/yama/ptrace_scope\"}}"
      "      content:{content:\"1\\n\"}"
      "    }"
      "  }"
      "}"
      "image_scanning:{"
      "  check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{single_file:{path:\"/etc/sysctl.conf\"}}"
      "      content_entry:{"
      "        match_type: ALL_MATCH_ANY_ORDER"
      "        match_criteria: {"
      "          filter_regex: \"kernel\\\\.yama\\\\.ptrace_scope\\\\s*=\\\\s*.*\""
      "          expected_regex: \"kernel\\\\.yama\\\\.ptrace_scope\\\\s*=\\\\s*1\""
      "        }"
      "      }"
      "    }"
      "    file_checks:{"
      "      files_to_check:{files_in_dir:{"
      "        dir_path:\"/etc/sysctl.d\""
      "        recursive: true"
      "      }}"
      "      content_entry:{"
      "        match_type: ALL_MATCH_ANY_ORDER"
      "        match_criteria: {"
      "          filter_regex: \"kernel\\\\.yama\\\\.ptrace_scope\\\\s*=\\\\s*.*\""
      "          expected_regex: \"kernel\\\\.yama\\\\.ptrace_scope\\\\s*=\\\\s*1\""
      "        }"
      "      }"
      "    }"
      "  }"
      "}}"
  }
}
benchmark_configs: {
  id: "nftables-base-chains-exist"
  compliance_note: {
    version: { cpe_uri: "cpe:/o:debian:ubuntu_linux:22.04" version: "2.0.0" benchmark_document: "CIS Ubuntu 22.04" }
    title: "Ensure nftables Base Chains Exist"
    description: 
      "Chains are containers for rules in nftables. Base chains are entry points for packets from the networking stack, and their absence can result in packets not being processed as intended."
    rationale: 
      "Base chains with appropriate hooks ensure that packets flowing through input, forward, and output chains are processed as expected, providing the foundation for proper firewall functionality."
    remediation: 
      "Run the following command to create the base chains:\n"
      "```\n"
      "# nft create chain inet <table name> <base chain name> { type filter hook <(input|forward|output)> priority 0 ; }\n"
      "```\n"
      "Example:\n"
      "```\n"
      "# nft create chain inet filter input { type filter hook input priority 0 ; }\n"
      "# nft create chain inet filter forward { type filter hook forward priority 0 ; }\n"
      "# nft create chain inet filter output { type filter hook output priority 0 ; }\n"
      "```\n"
    cis_benchmark: {
      profile_level: 1
      severity: MEDIUM
    }
    scan_instructions:
      "generic:{check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{single_file:{path:\"/etc/nftables.conf\"}}"
      "      content_entry:{"
      "        match_type: ALL_MATCH_ANY_ORDER"
      "        match_criteria:{"
      "          filter_regex: \"\\\\s*type filter hook input priority 0;$\""
      "          expected_regex: \"\\\\s*type filter hook input priority 0;$\""
      "        }"
      "      }"
      "    }"
      "    file_checks:{"
      "      files_to_check:{single_file:{path:\"/etc/nftables.conf\"}}"
      "      content_entry:{"
      "        match_type: ALL_MATCH_ANY_ORDER"
      "        match_criteria:{"
      "          filter_regex: \"\\\\s*type filter hook forward priority 0;$\""
      "          expected_regex: \"\\\\s*type filter hook forward priority 0;$\""
      "        }"
      "      }"
      "    }"
      "    file_checks:{"
      "      files_to_check:{single_file:{path:\"/etc/nftables.conf\"}}"
      "      content_entry:{"
      "        match_type: ALL_MATCH_ANY_ORDER"
      "        match_criteria:{"
      "          filter_regex: \"\\\\s*type filter hook output priority 0;$\""
      "          expected_regex: \"\\\\s*type filter hook output priority 0;$\""
      "        }"
      "      }"
      "    }"
      "}}"
  }
}
benchmark_configs: {
  id: "nftables-loopback-traffic-configured"
  compliance_note: {
    version: { cpe_uri: "cpe:/o:debian:ubuntu_linux:22.04" version: "2.0.0" benchmark_document: "CIS Ubuntu 22.04" }
    title: "Ensure nftables Loopback Traffic is Configured"
    description: 
      "Configuring loopback traffic ensures that internal communication between processes on the machine is maintained while preventing spoofing attacks by dropping loopback traffic on other interfaces."
    rationale: 
      "The loopback interface is critical for system operation as it handles communication within the system itself. Blocking loopback traffic on non-loopback interfaces prevents potential spoofing attacks."
    remediation: 
      "Run the following commands to configure loopback traffic rules:\n"
      "```\n"
      "# nft add rule inet filter input iif lo accept\n"
      "# nft add rule inet filter input ip saddr 127.0.0.0/8 counter drop\n"
      "```\n"
      "If IPv6 is enabled on the system, run:\n"
      "```\n"
      "# nft add rule inet filter input ip6 saddr ::1 counter drop\n"
      "```\n"
    cis_benchmark: {
      profile_level: 1
      severity: MEDIUM
    }
    scan_instructions:
      "generic:{check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{single_file:{path:\"/etc/nftables.conf\"}}"
      "      content_entry:{"
      "        match_type: ALL_MATCH_ANY_ORDER"
      "        match_criteria:{"
      "          filter_regex: \"\\\\s*iif \\\"lo\\\" accept;\""
      "          expected_regex: \"\\\\s*iif \\\"lo\\\" accept;\""
      "        }"
      "      }"
      "    }"
      "    file_checks:{"
      "      files_to_check:{single_file:{path:\"/etc/nftables.conf\"}}"
      "      content_entry:{"
      "        match_type: ALL_MATCH_ANY_ORDER"
      "        match_criteria:{"
      "          filter_regex: \"\\\\s*ip saddr 127\\\\.0\\\\.0\\\\.0/8 counter drop;\""
      "          expected_regex: \"\\\\s*ip saddr 127\\\\.0\\\\.0\\\\.0/8 counter drop;\""
      "        }"
      "      }"
      "    }"
      "    file_checks:{"
      "      files_to_check:{single_file:{path:\"/etc/nftables.conf\"}}"
      "      content_entry:{"
      "        match_type: ALL_MATCH_ANY_ORDER"
      "        match_criteria:{"
      "          filter_regex: \"\\\\s*ip6 saddr ::1 counter drop;\""
      "          expected_regex: \"\\\\s*ip6 saddr ::1 counter drop;\""
      "        }"
      "      }"
      "  }"
      "}}"
  }
}
benchmark_configs: {
  id: "nftables-service-enabled"
  compliance_note: {
    version: { cpe_uri: "cpe:/o:debian:ubuntu_linux:22.04" version: "2.0.0" benchmark_document: "CIS Ubuntu 22.04" }
    version: { cpe_uri: "cpe:/o:debian:debian_linux:12.0" version: "1.1.0" benchmark_document: "CIS Debian Linux 12" }
    title: "Ensure nftables service is enabled"
    description: 
      "The nftables service allows for the loading of nftables rulesets during boot, or starting on "
      "the nftables service"
    rationale:
      "The nftables service restores the nftables rules from the rules files referenced in the "
      "/etc/nftables.conf file during boot or the starting of the nftables service"
    remediation:
      "Run the following command to enable the nftables service:\n"
      "```\n"
      "# systemctl enable nftables "
      "```\n"
    cis_benchmark: {
      profile_level: 1
      severity: LOW
    }
    scan_instructions:
      "generic:{"
      "  check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{files_in_dir:{"
      "         dir_path:\"/lib/systemd/system/\""
      "        recursive: true"
      "        filename_regex: \"nftables.service\""
      "       }"
      "      }"
      "      existence:{should_exist:true}"
      "    }"
      "}}"
  }
}
benchmark_configs: {
  id: "ufw-uninstalled-or-disabled-with-nftables"
  compliance_note: {
    version: { cpe_uri: "cpe:/o:debian:ubuntu_linux:22.04" version: "2.0.0" benchmark_document: "CIS Ubuntu 22.04" }
    version: { cpe_uri: "cpe:/o:debian:debian_linux:12.0" version: "1.1.0" benchmark_document: "CIS Debian Linux 12" }
    title: "Ensure ufw is uninstalled or disabled with nftables"
    description: 
      "Uncomplicated Firewall (UFW) is a program for managing a Netfilter firewall designed to be easy to use. Running both the nftables service and UFW may lead to conflict and unexpected results."
    rationale: 
      "Running both the nftables service and ufw may lead to conflict and unexpected results. Ensuring only one is active prevents issues."
    remediation: 
      "To remove or disable UFW, run one of the following:\n"
      "```\n"
      "# apt purge ufw\n"
      "-OR-\n"
      "# ufw disable\n"
      "# systemctl stop ufw.service\n"
      "# systemctl mask ufw.service\n"
      "```\n"
      "Note: Run `ufw disable` before `systemctl mask ufw.service` to ensure proper disabling of UFW."
    cis_benchmark: {
      profile_level: 1
      severity: MEDIUM
    }
    scan_instructions:
      "generic:{check_alternatives:{"
      "  file_checks:{"
      "    files_to_check:{single_file:{path:\"/lib/systemd/system/nftables.service\"}}"
      "    existence:{should_exist:true}"
      "  }"
      "  file_checks:{"
      "    files_to_check:{single_file:{path:\"/etc/systemd/system/multi-user.target.wants/ufw.service\"}}"
      "    existence:{should_exist:false}"
      "   }"
      "}}"
  }
}
benchmark_configs: {
  id: "iptables-default-deny-policy"
  compliance_note: {
    version: { cpe_uri: "cpe:/o:debian:ubuntu_linux:22.04" version: "2.0.0" benchmark_document: "CIS Ubuntu 22.04" }
    version: { cpe_uri: "cpe:/o:debian:debian_linux:12.0" version: "1.1.0" benchmark_document: "CIS Debian Linux 12" }
    title: "Ensure iptables Default Deny Firewall Policy"
    description: 
      "A default deny all policy on connections ensures that any unconfigured network usage will be rejected."
    rationale: 
      "With a default accept policy, the firewall will accept any packet that is not configured to be denied. It is easier to whitelist acceptable usage than to blacklist unacceptable usage."
    remediation: 
      "Run the following commands to implement a default DROP policy:\n"
      "```\n"
      "# iptables -P INPUT DROP"
      "# iptables -P OUTPUT DROP"
      "# iptables -P FORWARD DROP"
      "```\n"
      "Note: Changing firewall settings while connected over network can result in being locked out of the system."
    cis_benchmark: {
      profile_level: 1
      severity: MEDIUM
    }
    scan_instructions: 
      "generic:{check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{single_file:{path:\"/etc/iptables/rules.v4\"}}"
      "      content_entry:{"
      "        match_type: ALL_MATCH_STRICT_ORDER"
      "        match_criteria:{"
      "          filter_regex: \"\\\\s*:INPUT\\\\s+DROP\\\\s+\\\\[\\\\d+:\\\\d+\\\\]$\""
      "          expected_regex: \"\\\\s*:INPUT\\\\s+DROP\\\\s+\\\\[\\\\d+:\\\\d+\\\\]$\""
      "        }"
      "        match_criteria:{"
      "          filter_regex: \"\\\\s*:FORWARD\\\\s+DROP\\\\s+\\\\[\\\\d+:\\\\d+\\\\]$\""
      "          expected_regex: \"\\\\s*:FORWARD\\\\s+DROP\\\\s+\\\\[\\\\d+:\\\\d+\\\\]$\""
      "        }"
      "        match_criteria:{"
      "          filter_regex: \"\\\\s*:OUTPUT\\\\s+DROP\\\\s+\\\\[\\\\d+:\\\\d+\\\\]$\""
      "          expected_regex: \"\\\\s*:OUTPUT\\\\s+DROP\\\\s+\\\\[\\\\d+:\\\\d+\\\\]$\""
      "        }"
      "      }"
      "    }"
      "}}"
  }
}
benchmark_configs: {
  id: "iptables-loopback-traffic-configured"
  compliance_note: {
    version: { cpe_uri: "cpe:/o:debian:ubuntu_linux:22.04" version: "2.0.0" benchmark_document: "CIS Ubuntu 22.04" }
    version: { cpe_uri: "cpe:/o:debian:debian_linux:12.0" version: "1.1.0" benchmark_document: "CIS Debian Linux 12" }
    title: "Ensure iptables Loopback Traffic is Configured"
    description: 
      "Configure the loopback interface to accept traffic and deny traffic to the loopback network on all other interfaces (127.0.0.0/8)."
    rationale: 
      "Loopback traffic is critical for internal communication between processes on a machine. Denying loopback traffic on other interfaces prevents spoofing attacks."
    remediation: 
      "Run the following commands to implement the loopback rules:\n"
      "# iptables -A INPUT -i lo -j ACCEPT\n"
      "# iptables -A OUTPUT -o lo -j ACCEPT\n"
      "# iptables -A INPUT -s 127.0.0.0/8 -j DROP\n"
      "Note: Changing firewall settings while connected over a network can result in being locked out of the system."
    cis_benchmark: {
      profile_level: 1
      severity: MEDIUM
    }
    scan_instructions: 
      "generic:{check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{single_file:{path:\"/etc/iptables/rules.v4\"}}"
      "      content_entry:{"
      "        match_type: ALL_MATCH_STRICT_ORDER"
      "        match_criteria:{"
      "          filter_regex: \"\\\\s*-A INPUT -i lo -j ACCEPT\""
      "          expected_regex: \"\\\\s*-A INPUT -i lo -j ACCEPT\""
      "        }"
      "        match_criteria:{"
      "          filter_regex: \"\\\\s*-A INPUT -s 127\\\\.0\\\\.0\\\\.0/8 -j DROP\""
      "          expected_regex: \"\\\\s*-A INPUT -s 127\\\\.0\\\\.0\\\\.0/8 -j DROP\""
      "        }"
      "        match_criteria:{"
      "          filter_regex: \"\\\\s*-A OUTPUT -o lo -j ACCEPT\""
      "          expected_regex: \"\\\\s*-A OUTPUT -o lo -j ACCEPT\""
      "        }"
      "      }"
      "    }"
      "}}"
  }
}

benchmark_configs: {
  id: "ip6tables-default-deny-policy"
  compliance_note: {
    version: { cpe_uri: "cpe:/o:debian:ubuntu_linux:22.04" version: "2.0.0" benchmark_document: "CIS Ubuntu 22.04" }
    title: "Ensure iptables Default Deny Firewall Policy"
    description: 
      "A default deny all policy on connections ensures that any unconfigured network usage will be rejected."
    rationale: 
      "With a default accept policy, the firewall will accept any packet that is not configured to be denied. It is easier to whitelist acceptable usage than to blacklist unacceptable usage."
    remediation: 
      "Run the following commands to implement a default DROP policy:\n"
      "```\n"
      "# ip6tables -P INPUT DROP\n"
      "# ip6tables -P OUTPUT DROP\n"
      "# ip6tables -P FORWARD DROP\n"
      "```\n"
      "Note: Changing firewall settings while connected over network can result in being locked out of the system."
    cis_benchmark: {
      profile_level: 1
      severity: MEDIUM
    }
    scan_instructions: 
      "generic:{check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{single_file:{path:\"/etc/iptables/rules.v6\"}}"
      "      content_entry:{"
      "        match_type: ALL_MATCH_STRICT_ORDER"
      "        match_criteria:{"
      "          filter_regex: \"\\\\s*:INPUT\\\\s+DROP\\\\s+\\\\[\\\\d+:\\\\d+\\\\]$\""
      "          expected_regex: \"\\\\s*:INPUT\\\\s+DROP\\\\s+\\\\[\\\\d+:\\\\d+\\\\]$\""
      "        }"
      "        match_criteria:{"
      "          filter_regex: \"\\\\s*:FORWARD\\\\s+DROP\\\\s+\\\\[\\\\d+:\\\\d+\\\\]$\""
      "          expected_regex: \"\\\\s*:FORWARD\\\\s+DROP\\\\s+\\\\[\\\\d+:\\\\d+\\\\]$\""
      "        }"
      "        match_criteria:{"
      "          filter_regex: \"\\\\s*:OUTPUT\\\\s+DROP\\\\s+\\\\[\\\\d+:\\\\d+\\\\]$\""
      "          expected_regex: \"\\\\s*:OUTPUT\\\\s+DROP\\\\s+\\\\[\\\\d+:\\\\d+\\\\]$\""
      "        }"
      "      }"
      "    }"
      "}}"
  }
}
benchmark_configs: {
  id: "ip6tables-loopback-traffic-configured"
  compliance_note: {
    version: { cpe_uri: "cpe:/o:debian:ubuntu_linux:22.04" version: "2.0.0" benchmark_document: "CIS Ubuntu 22.04" }
    version: { cpe_uri: "cpe:/o:debian:debian_linux:12.0" version: "1.1.0" benchmark_document: "CIS Debian Linux 12" }
    title: "Ensure ip6tables Loopback Traffic is Configured"
    description: 
      "Configure the loopback interface to accept traffic. Configure all other interfaces to deny traffic to the loopback network (::1)."
    rationale: 
      "Loopback traffic is generated between processes on the machine and is typically critical to the operation of the system. The loopback interface is the only place that loopback network (::1) traffic should be seen; all other interfaces should ignore traffic on this network as an anti-spoofing measure."
    remediation: 
      "Run the following commands to implement the loopback rules:\n"
      "```\n"
      "# ip6tables -A INPUT -i lo -j ACCEPT\n"
      "# ip6tables -A OUTPUT -o lo -j ACCEPT\n"
      "# ip6tables -A INPUT -s ::1 -j DROP\n"
      "```\n"
      "Note: Changing firewall settings while connected over the network can result in being locked out of the system."
    cis_benchmark: {
      profile_level: 1
      severity: MEDIUM
    }
    scan_instructions: 
      "generic:{check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{single_file:{path:\"/etc/iptables/rules.v6\"}}"
      "      content_entry:{"
      "        match_type: ALL_MATCH_STRICT_ORDER"
      "        match_criteria:{"
      "          filter_regex: \"-A INPUT -i lo -j ACCEPT\""
      "          expected_regex: \"-A INPUT -i lo -j ACCEPT\""
      "        }"
      "        match_criteria:{"
      "          filter_regex: \"-A INPUT -s ::1(/128)? -j DROP\""
      "          expected_regex: \"-A INPUT -s ::1(/128)? -j DROP\""
      "        }"
      "        match_criteria:{"
      "          filter_regex: \"-A OUTPUT -o lo -j ACCEPT\""
      "          expected_regex: \"-A OUTPUT -o lo -j ACCEPT\""
      "        }"
      "      }"
      "    }"
      "}}"
  }
}
benchmark_configs: {
  id: "systemd-journal-remote-installed"
  compliance_note: {
    version: { cpe_uri: "cpe:/o:debian:ubuntu_linux:22.04" version: "2.0.0" benchmark_document: "CIS Ubuntu 22.04" }
    version: { cpe_uri: "cpe:/o:debian:debian_linux:12.0" version: "1.1.0" benchmark_document: "CIS Debian Linux 12" }
    title: "Ensure systemd-journal-remote is installed"
    description:
      "Journald (via systemd-journal-remote) supports the ability to send log events it gathers to "
      "a remote log host or to receive messages from remote hosts, thus enabling centralised log "
      "management."
    rationale:
      "Storing log data on a remote host protects log integrity from local attacks. If an attacker "
      "gains root access on the local system, they could tamper with or remove log data that is "
      "stored on the local system."
    remediation:
      "Run the following command to install systemd-journal-remote:\n"
      "```\n"
      "apt install systemd-journal-remote\n"
      "```\n"
    cis_benchmark: {
      profile_level: 1
      severity: LOW
    }
    scan_instructions:
      "generic:{"
      "  check_alternatives:{"
      "    file_checks:{"
      "    files_to_check:{single_file:{path:\"/usr/lib/systemd/systemd-journal-remote\"}}"
      "    existence:{should_exist:true}"
      "    }"
      "}}"
  }
}
benchmark_configs: {
  id: "systemd-journal-upload-enabled"
  compliance_note: {
    version: { cpe_uri: "cpe:/o:debian:ubuntu_linux:22.04" version: "2.0.0" benchmark_document: "CIS Ubuntu 22.04" }
    version: { cpe_uri: "cpe:/o:debian:debian_linux:12.0" version: "1.1.0" benchmark_document: "CIS Debian Linux 12" }
    title: "Ensure systemd-journal-upload is enabled and active"
    description:
      "Journald (via systemd-journal-remote) supports the ability to send log events it gathers to "
      "a remote log host or to receive messages from remote hosts, thus enabling centralised log "
      "management."
    rationale:
      "Storing log data on a remote host protects log integrity from local attacks. If an attacker "
      "gains root access on the local system, they could tamper with or remove log data that is "
      "stored on the local system."
    remediation:
      "Run the following command to enable systemd-journal-remote:\n"
      "```\n"
      "systemctl --now enable systemd-journal-upload.service"
      "```\n"
    cis_benchmark: {
      profile_level: 1
      severity: LOW
    }
    scan_instructions:
      "generic:{"
      "  check_alternatives:{"
      "    file_checks:{"
      "    files_to_check:{single_file:{path:\"/etc/systemd/system/multi-user.target.wants/systemd-journal-upload.service\"}}"
      "    existence:{should_exist:true}"
      "    }"
      "}}"
  }
}
benchmark_configs: {
  id: "ensure-events-modifying-system-network-env-collected"
  compliance_note: {
    version: { cpe_uri: "cpe:/o:debian:ubuntu_linux:22.04" version: "2.0.0" benchmark_document: "CIS Ubuntu 22.04" }
    version: { cpe_uri: "cpe:/o:debian:debian_linux:12.0" version: "1.1.0" benchmark_document: "CIS Debian Linux 12" }
    title: "Ensure events that modify the system's network environment are collected"
    description: "Record changes to network environment files or system calls. The parameters monitor the sethostname and setdomainname system calls and various network-related files."
    rationale: "Monitoring changes to network environments helps identify unauthorized alterations that could compromise security settings. Monitoring files like /etc/hosts or /etc/netplan/ ensures the detection of unauthorized changes to network configurations."
    remediation:
      "Edit or create a file in the /etc/audit/rules.d/ directory, ending in .rules extension, with the relevant rules:\n"
      "```\n"
      "-a always,exit -F arch=b64 -S sethostname,setdomainname -k system-locale\n"
      "-a always,exit -F arch=b32 -S sethostname,setdomainname -k system-locale\n"
      "-w /etc/issue -p wa -k system-locale\n"
      "-w /etc/issue.net -p wa -k system-locale\n"
      "-w /etc/hosts -p wa -k system-locale\n"
      "-w /etc/networks -p wa -k system-locale\n"
      "-w /etc/network/ -p wa -k system-locale\n"
      "-w /etc/netplan/ -p wa -k system-locale\n"
      "```\n"
      "Merge and load the rules:\n"
      "# augenrules --load\n"
      "Check if reboot is required:\n"
      "# if [[ $(auditctl -s | grep \"enabled\") =~ \"2\" ]]; then printf \"Reboot required to load rules\n\"; fi"
  
  cis_benchmark: {
    profile_level: 2
    severity: LOW
  }
  scan_instructions:
    "generic:{check_alternatives:{"
    "      file_checks:{"
    "        files_to_check:{files_in_dir:{"
    "          dir_path:\"/etc/audit/rules.d\""
    "          recursive: true"
    "          files_only: true"
    "          filename_regex: \".*\\\\.rules\""
    "        }}"
    "        content_entry:{"
    "          match_type: ALL_MATCH_ANY_ORDER"
    "          match_criteria:{"
    "            filter_regex: \".*sethostname.*setdomainname.*-k\\\\s+system-locale.*\""
    "            expected_regex: \"\\\\s*-a\\\\s*always,exit\\\\s*-F\\\\s*arch=b[2346]{2}\\\\s*-S\\\\s+sethostname,setdomainname\\\\s*-k\\\\s+system-locale\\\\s*\""
    "          }"
    "          match_criteria:{"
    "            filter_regex: \".*/etc/issue\\\\s+.*-k\\\\s+system-locale.*\""
    "            expected_regex: \"\\\\s*-w\\\\s*/etc/issue\\\\s*-p\\\\s*wa\\\\s*(-F\\\\s*key=|-k)\\\\s*[!-~]*\\\\s*\""
    "          }"
    "          match_criteria:{"
    "            filter_regex: \".*/etc/issue\\\\.net.*-k\\\\s+system-locale.*\""
    "            expected_regex: \"\\\\s*-w\\\\s*/etc/issue\\\\.net\\\\s*-p\\\\s*wa\\\\s*(-F\\\\s*key=|-k)\\\\s*[!-~]*\\\\s*\""
    "          }"
    "          match_criteria:{"
    "            filter_regex: \".*/etc/hosts.*-k\\\\s+system-locale.*\""
    "            expected_regex: \"\\\\s*-w\\\\s*/etc/hosts\\\\s*-p\\\\s*wa\\\\s*(-F\\\\s*key=|-k)\\\\s*[!-~]*\\\\s*\""
    "          }"
    "          match_criteria:{"
    "            filter_regex: \".*/etc/networks.*-k\\\\s+system-locale.*\""
    "            expected_regex: \"\\\\s*-w\\\\s*/etc/networks\\\\s*-p\\\\s*wa\\\\s*(-F\\\\s*key=|-k)\\\\s*[!-~]*\\\\s*\""
    "          }"
    "          match_criteria:{"
    "            filter_regex: \".*/etc/network/.*-k\\\\s+system-locale.*\""
    "            expected_regex: \"\\\\s*-w\\\\s*/etc/network/\\\\s*-p\\\\s*wa\\\\s*(-F\\\\s*key=|-k)\\\\s*[!-~]*\\\\s*\""
    "          }"
    "          match_criteria:{"
    "            filter_regex: \".*/etc/netplan/.*-k\\\\s+system-locale.*\""
    "            expected_regex: \"\\\\s*-w\\\\s*/etc/netplan/\\\\s*-p\\\\s*wa\\\\s*(-F\\\\s*key=|-k)\\\\s*[!-~]*\\\\s*\""
    "          }"
    "        }"
    "      }"
    "  }"
    "}"
  }
}
benchmark_configs: {
  id: "ensure-privileged-commands-are-collected"
  compliance_note: {
    version: { cpe_uri: "cpe:/o:debian:ubuntu_linux:22.04" version: "2.0.0" benchmark_document: "CIS Ubuntu 22.04" }
    version: { cpe_uri: "cpe:/o:debian:debian_linux:12.0" version: "1.1.0" benchmark_document: "CIS Debian Linux 12" }
    title: "Ensure use of privileged commands are collected"
    description: "Monitor privileged programs with setuid and/or setgid bit set to detect unauthorized use."
    rationale: "Monitoring privileged commands by non-privileged users helps identify potential unauthorized activities and access attempts."
    remediation:
      "Edit or create a file in the /etc/audit/rules.d/ directory, ending in .rules extension, with the relevant rules:\n"
      "```\n"
      "# Identify all privileged commands and monitor their execution\n"
      "UID_MIN=$(awk '/^\\\\s*UID_MIN/{print $2}' /etc/login.defs)\n"
      "AUDIT_RULE_FILE=/etc/audit/rules.d/50-privileged.rules\n"
      "find / -xdev -perm /6000 -type f 2>/dev/null | awk -v UID_MIN=${UID_MIN} '{ print \"-a always,exit -F path=\" $1 \" -F perm=x -F auid>=\" UID_MIN \" -F auid!=unset -k privileged\" }' > ${AUDIT_RULE_FILE}\n"
      "```\n"
      "Merge and load the rules:\n"
      "# augenrules --load\n"
      "Check if reboot is required:\n"
      "# if [[ $(auditctl -s | grep \"enabled\") =~ \"2\" ]]; then printf \"Reboot required to load rules\n\"; fi"
  cis_benchmark: {
    profile_level: 2
    severity: MEDIUM
  }
  scan_instructions:
    "generic:{check_alternatives:{"
    "      file_checks:{"
    "        files_to_check:{files_in_dir:{"
    "          dir_path:\"/etc/audit/rules.d\""
    "          recursive: true"
    "          files_only: true"
    "          filename_regex: \".*\\\\.rules\""
    "        }}"
    "        content_entry:{"
    "          match_type: ALL_MATCH_ANY_ORDER"
    "          match_criteria:{"
    "            filter_regex: \".*-a\\\\s+always,exit\\\\s+-F\\\\s+path=.*-k\\\\s+privileged\\\\s*\""
    "            expected_regex: \"\\\\s*-a\\\\s+always,exit\\\\s+-F\\\\s+path=.*-F\\\\s+perm=x\\\\s+-F\\\\s+auid>=\\\\d+\\\\s+-F\\\\s+auid!=unset\\\\s+-k\\\\s+privileged\\\\s*\""
    "          }"
    "        }"
    "      }"
    "    }"
    "    check_alternatives:{"
    "      file_checks:{"
    "        files_to_check:{single_file:{"
    "          path:\"/etc/audit/audit.rules\""
    "        }}"
    "        content_entry:{"
    "          match_type: ALL_MATCH_ANY_ORDER"
    "          match_criteria:{"
    "            filter_regex: \".*-a\\\\s+always,exit\\\\s+-F\\\\s+path=.*-k\\\\s+privileged\\\\s*\""
    "            expected_regex: \"\\\\s*-a\\\\s+always,exit\\\\s+-F\\\\s+path=.*-F\\\\s+perm=x\\\\s+-F\\\\s+auid>=\\\\d+\\\\s+-F\\\\s+auid!=unset\\\\s+-k\\\\s+privileged\\\\s*\""
    "          }"
    "        }"
    "      }"
    "    }"
    "}"
  }
}
benchmark_configs: {
  id: "ensure-audit-configuration-files-mode-configured"
  compliance_note: {
    version: { cpe_uri: "cpe:/o:debian:ubuntu_linux:22.04" version: "2.0.0" benchmark_document: "CIS Ubuntu 22.04" }
    version: { cpe_uri: "cpe:/o:debian:debian_linux:12.0" version: "1.1.0" benchmark_document: "CIS Debian Linux 12" }
    title: "Ensure  files mode is configured"
    description: "Audit configuration files must be configured with mode 0640 or more restrictive to prevent unauthorized access and protect the integrity of the audit system."
    rationale: "Restricting access to audit configuration files ensures that only authorized personnel can modify the settings, preventing the disabling of critical auditing or misconfigurations that may impact performance or investigation efforts."
    remediation:
      "Run the following command to set permissions on audit configuration files:\n"
      "```\nbash\n"
      "find /etc/audit/ -type f \\\\( -name '*.conf' -o -name '*.rules' \\\\) -exec chmod u-x,g-wx,o-rwx {} +\n"
      "```\n"
  cis_benchmark: {
    profile_level: 2
    severity: MEDIUM
  }
  scan_instructions:
    "generic:{check_alternatives:{"
    "      file_checks:{"
    "        files_to_check:{files_in_dir:{"
    "          dir_path:\"/etc/audit/\""
    "          recursive: false"
    "          files_only: true"
    "          filename_regex: \".*\\\\.(conf|rules)\""
    "        }}"
    "        permission:{"
    "          set_bits: 0640"
    "          clear_bits: 0137"
    "          bits_should_match: BOTH_SET_AND_CLEAR"
    "        }"
    "      }"
    "    }"
    "}"
  }
}
benchmark_configs: {
  id: "ensure-audit-tools-mode-configured"
  compliance_note: {
    version: { cpe_uri: "cpe:/o:debian:ubuntu_linux:22.04" version: "2.0.0" benchmark_document: "CIS Ubuntu 22.04" }
    version: { cpe_uri: "cpe:/o:debian:debian_linux:12.0" version: "1.1.0" benchmark_document: "CIS Debian Linux 12" }
    title: "Ensure audit tools mode is configured"
    description:
      "Audit tools must be configured with mode 0755 or more restrictive to protect the integrity of audit tools and prevent unauthorized access."
    rationale:
      "Protecting audit tools ensures the integrity of audit information and prevents unauthorized operations on log data."
    remediation:
      "Run the following command to set permissions on audit tools:\n"
      "```\nbash\n"
      "chmod go-w \\\\/sbin/auditctl \\\\/sbin/aureport \\\\/sbin/ausearch \\\\/sbin/autrace \\\\/sbin/auditd \\\\/sbin/augenrules\n"
      "```\n"
  cis_benchmark: {
    profile_level: 2
    severity: MEDIUM
  }
  scan_instructions:
    "generic:{check_alternatives:{"
    "      file_checks:{"
    "        files_to_check:{"
    "          files_in_dir:{"
    "            dir_path:\"/sbin\""
    "            recursive: false"
    "            files_only: true"
    "            filename_regex: \"auditctl|aureport|ausearch|autrace|auditd|augenrules\""
    "          }"
    "        }"
    "        permission:{"
    "          set_bits: 0755"
    "          clear_bits: 0022"
    "          bits_should_match: BOTH_SET_AND_CLEAR"
    "        }"
    "        non_compliance_msg: \"Audit tools are not configured with mode 0755 or more restrictive.\""
    "        file_display_command: \"ls -l /sbin/auditctl /sbin/aureport /sbin/ausearch /sbin/autrace /sbin/auditd /sbin/augenrules\""
    "      }"
    "    }"
    "}"
  }
}

benchmark_configs: {
  id: "ensure-audit-tools-owner-configured"
  compliance_note: {
    version: { cpe_uri: "cpe:/o:debian:ubuntu_linux:22.04" version: "2.0.0" benchmark_document: "CIS Ubuntu 22.04" }
    version: { cpe_uri: "cpe:/o:debian:debian_linux:12.0" version: "1.1.0" benchmark_document: "CIS Debian Linux 12" }
    title: "Ensure audit tools owner is configured"
    description: "Audit tools must be owned by the root user to ensure their integrity and prevent unauthorized access or modifications."
    rationale: "Protecting audit tools from unauthorized access or modification is critical to maintaining the integrity of the audit system and ensuring accurate logging of events."
    remediation:
      "Run the following command to set the correct ownership for the audit tools:\n"
      "```\nbash\n"
      "chown root:root /sbin/auditctl /sbin/aureport /sbin/ausearch /sbin/autrace /sbin/auditd /sbin/augenrules\n"
      "```\n"
    cis_benchmark: {
      profile_level: 2
      severity: HIGH
    }
    scan_instructions:
      "generic:{check_alternatives:{"
      "      file_checks:{"
      "        files_to_check:{single_file:{path:\"/sbin/auditctl\"}}"
      "        permission:{"
      "          user: {name: \"root\" should_own: true}"
      "        }"
      "      }"
      "      file_checks:{"
      "        files_to_check:{single_file:{path:\"/sbin/aureport\"}}"
      "        permission:{"
      "          user: {name: \"root\" should_own: true}"
      "        }"
      "      }"
      "      file_checks:{"
      "        files_to_check:{single_file:{path:\"/sbin/ausearch\"}}"
      "        permission:{"
      "          user: {name: \"root\" should_own: true}"
      "        }"
      "      }"
      "      file_checks:{"
      "        files_to_check:{single_file:{path:\"/sbin/autrace\"}}"
      "        permission:{"
      "          user: {name: \"root\" should_own: true}"
      "        }"
      "      }"
      "      file_checks:{"
      "        files_to_check:{single_file:{path:\"/sbin/auditd\"}}"
      "        permission:{"
      "          user: {name: \"root\" should_own: true}"
      "        }"
      "      }"
      "      file_checks:{"
      "        files_to_check:{single_file:{path:\"/sbin/augenrules\"}}"
      "        permission:{"
      "          user: {name: \"root\" should_own: true}"
      "        }"
      "      }"
      "    }"
      "}"
  }
}
benchmark_configs: {
  id: "ensure-audit-tools-group-owner-configured"
  compliance_note: {
    version: { cpe_uri: "cpe:/o:debian:ubuntu_linux:22.04" version: "2.0.0" benchmark_document: "CIS Ubuntu 22.04" }
    version: { cpe_uri: "cpe:/o:debian:debian_linux:12.0" version: "1.1.0" benchmark_document: "CIS Debian Linux 12" }
    title: "Ensure audit tools group owner is configured"
    description: "Audit tools must be owned by the root group to ensure their integrity and prevent unauthorized access or modifications."
    rationale: "Protecting audit tools from unauthorized access or modification is critical to maintaining the integrity of the audit system and ensuring accurate logging of events. Ensuring the correct group ownership prevents unauthorized users from altering critical audit files."
    remediation:
      "Run the following command to set the correct group ownership for the audit tools:\n"
      "```\nbash\n"
      "chgrp root /sbin/auditctl /sbin/aureport /sbin/ausearch /sbin/autrace /sbin/auditd /sbin/augenrules\n"
      "```\n"
    cis_benchmark: {
      profile_level: 2
      severity: HIGH
    }
    scan_instructions:
      "generic:{check_alternatives:{"
      "      file_checks:{"
      "        files_to_check:{single_file:{path:\"/sbin/auditctl\"}}"
      "        permission:{"
      "          group: {name: \"root\" should_own: true}"
      "        }"
      "      }"
      "      file_checks:{"
      "        files_to_check:{single_file:{path:\"/sbin/aureport\"}}"
      "        permission:{"
      "          group: {name: \"root\" should_own: true}"
      "        }"
      "      }"
      "      file_checks:{"
      "        files_to_check:{single_file:{path:\"/sbin/ausearch\"}}"
      "        permission:{"
      "          group: {name: \"root\" should_own: true}"
      "        }"
      "      }"
      "      file_checks:{"
      "        files_to_check:{single_file:{path:\"/sbin/autrace\"}}"
      "        permission:{"
      "          group: {name: \"root\" should_own: true}"
      "        }"
      "      }"
      "      file_checks:{"
      "        files_to_check:{single_file:{path:\"/sbin/auditd\"}}"
      "        permission:{"
      "          group: {name: \"root\" should_own: true}"
      "        }"
      "      }"
      "      file_checks:{"
      "        files_to_check:{single_file:{path:\"/sbin/augenrules\"}}"
      "        permission:{"
      "          group: {name: \"root\" should_own: true}"
      "        }"
      "      }"
      "    }"
      "}"
  }
}
benchmark_configs: {
  id: "etc-shells-permissions"
  compliance_note: {
    version: { cpe_uri: "cpe:/o:debian:ubuntu_linux:22.04" version: "2.0.0" benchmark_document: "CIS Ubuntu 22.04" }
    version: { cpe_uri: "cpe:/o:debian:debian_linux:12.0" version: "1.1.0" benchmark_document: "CIS Debian Linux 12" }
    title: "Ensure permissions on /etc/shells are configured"
    description: 
      "/etc/shells is a text file which contains the full pathnames of valid login shells. This file "
      "is consulted by chsh and available to be queried by other programs."
    rationale:
      "It is critical to ensure that the /etc/shells file is protected from unauthorized access. "
      "Although it is protected by default, the file permissions could be changed either "
      "inadvertently or through malicious actions. "
    remediation:
      "Run the following commands to remove excess permissions, set owner, and set group on /etc/shells:\n"
      "```\n"
      "# chmod u-x,go-wx /etc/shells\n"
      "# chown root:root /etc/shells\n"
      "```\n"
    cis_benchmark: {
      profile_level: 1
      severity: LOW
    }
    scan_instructions:
      "generic:{"
      "  check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{single_file:{path:\"/etc/shells\"}}"
      "      existence:{should_exist:true}"
      "    }"
      "    file_checks:{"
      "      files_to_check:{single_file:{path:\"/etc/shells\"}}"
      "      permission:{"
      "        clear_bits: 0133"
      "        user: {name: \"root\", should_own: true}"
      "        group: {name: \"root\", should_own: true}"
      "      }"
      "    }"
      "  }"
      "}"
  }
}
benchmark_configs: {
  id: "opasswd-permissions"
  compliance_note: {
    version: { cpe_uri: "cpe:/o:debian:ubuntu_linux:22.04" version: "2.0.0" benchmark_document: "CIS Ubuntu 22.04" }
    version: { cpe_uri: "cpe:/o:debian:debian_linux:12.0" version: "1.1.0" benchmark_document: "CIS Debian Linux 12" }
    title: "Ensure permissions on /etc/security/opasswd are configured"
    description:
      "/etc/security/opasswd and its backup /etc/security/opasswd.old hold user's previous passwords if pam_unix or pam_pwhistory is in use on the system."
    rationale:
      "It is critical to ensure that /etc/security/opasswd is protected from unauthorized access. "
      "Although it is protected by default, the file permissions could be changed either inadvertently or through malicious actions."
    remediation:
      "Run the following commands to remove excess permissions, set owner, and set group on /etc/security/opasswd and /etc/security/opasswd.old if they exist:\n"
      "```\n"
      "# [ -e \"/etc/security/opasswd\" ] && chmod u-x,go-rwx /etc/security/opasswd\n"
      "# [ -e \"/etc/security/opasswd\" ] && chown root:root /etc/security/opasswd\n"
      "# [ -e \"/etc/security/opasswd.old\" ] && chmod u-x,go-rwx /etc/security/opasswd.old\n"
      "# [ -e \"/etc/security/opasswd.old\" ] && chown root:root /etc/security/opasswd.old\n"
      "```\n"
    cis_benchmark: {
      profile_level: 1
      severity: HIGH
    }
    scan_instructions:
      "generic:{check_alternatives:{"
      "      file_checks:{"
      "        files_to_check:{single_file:{path:\"/etc/security/opasswd\"}}"
      "        existence:{should_exist:true}"
      "      }"
      "    },"
      "    check_alternatives:{"
      "      file_checks:{"
      "        files_to_check:{single_file:{path:\"/etc/security/opasswd.old\"}}"
      "        existence:{should_exist:true}"
      "      }"
      "    },"
      "    check_alternatives:{"
      "      file_checks:{"
      "        files_to_check:{single_file:{path:\"/etc/security/opasswd\"}}"
      "        permission:{"
      "          clear_bits: 0177"
      "          user: {name: \"root\", should_own: true}"
      "          group: {name: \"root\", should_own: true}"
      "        }"
      "      }"
      "    },"
      "    check_alternatives:{"
      "      file_checks:{"
      "        files_to_check:{single_file:{path:\"/etc/security/opasswd.old\"}}"
      "        permission:{"
      "          clear_bits: 0177"
      "          user: {name: \"root\", should_own: true}"
      "          group: {name: \"root\", should_own: true}"
      "        }"
      "      }"
      "    }"
      "}"
  }
}
benchmark_configs: {
  id: "var-nosuid"
  compliance_note: {
    version: { cpe_uri: "cpe:/o:debian:ubuntu_linux:22.04" version: "2.0.0" benchmark_document: "CIS Ubuntu 22.04" }
    title: "Ensure nosuid option set on /var partition"
    description:
      "The nosuid mount option specifies that the filesystem cannot contain "
      "setuid files."
    rationale:
      "Since the /var filesystem is only intended for temporary file "
      "storage, set this option to ensure that users cannot create setuid "
      "files in /var."
    remediation:
      "Run the following command to remount /var:\n"
      "```\n"
      "# mount -o remount,nosuid /var\n"
      "```\n"
      "`/etc` is stateless on Container-Optimized OS. Therefore, `/etc` "
      "cannot be used to make these changes persistent across reboots. The "
      "steps mentioned above needs to be performed after every boot."
    cis_benchmark: {
      profile_level: 2
      severity: LOW
    }
    scan_instructions:
      "generic:{check_alternatives:{"
      "  file_checks:{"
      "    files_to_check:{single_file:{path:\"/proc/self/mountinfo\"}}"
      "    content_entry:{"
      "      match_type: ALL_MATCH_ANY_ORDER"
      "      match_criteria: {"
      "        filter_regex: \".* /var .* - .*\""
      "        expected_regex: \".* /var .*nosuid.* - .*\""
      "      }"
      "    }"
      "  }"
      "}"
      "check_alternatives:{"
      "  file_checks:{"
      "    files_to_check:{single_file:{path:\"/proc/self/mountinfo\"}}"
      "    content_entry:{"
      "      match_type: NONE_MATCH"
      "      match_criteria: {"
      "        filter_regex: \".* /var .* - .*\""
      "        expected_regex: \".* /var .* - .*\""
      "      }"
      "    }"
      "  }"
      "}}"
  }
}
benchmark_configs: {
  id: "var-log-nodev"
  compliance_note: {
    version: { cpe_uri: "cpe:/o:debian:ubuntu_linux:22.04" version: "2.0.0" benchmark_document: "CIS Ubuntu 22.04" }
    title: "Ensure nodev option set on /var/log partition"
    description: "The nodev mount option specifies that the filesystem cannot contain special devices."
    rationale:
      "Since the /var/log file system is not intended to support devices, set this option to ensure "
      "that users cannot create a block or character special devices in /var/log."
    remediation:
      "Edit the /etc/fstab file and add nodev to the fourth field (mounting options) for the "
      "/var/log partition.\n"
      "Example:\n"
      "```\n"
      "<device> /var/log <fstype> defaults, rw,nosuid, nodev, noexec, relatime 0\n"
      "```\n"
      "Run the following command to remount /var/log with the configured options:\n"
      "```\n"
      "mount -o remount /var/log\n"
      "```\n"
      "References:\n"
      "1. See the fstab(5) manual page for more information."
    cis_benchmark: {
      profile_level: 1
      severity: LOW
    }
    scan_instructions:
      "scan_type_specific:{instance_scanning:{"
      "check_alternatives:{"
      "  file_checks:{"
      "    files_to_check:{single_file:{path:\"/proc/self/mountinfo\"}}"
      "    content_entry:{"
      "      match_type: ALL_MATCH_ANY_ORDER"
      "      match_criteria: {"
      "          filter_regex: \".* /var/log .* - .*\""
      "          expected_regex: \".* /var/log .*nodev.* - .*\""
      "      }"
      "    }"
      "  }"
      "}"
      "check_alternatives:{"
      "  file_checks:{"
      "    files_to_check:{single_file:{path:\"/proc/self/mountinfo\"}}"
      "    content_entry:{"
      "      match_type: NONE_MATCH"
      "      match_criteria: {"
      "          filter_regex: \".* /var/log .* - .*\""
      "          expected_regex: \".* /var/log .* - .*\""
      "      }"
      "    }"
      "  }"
      "}}}"
  }
}
benchmark_configs: {
  id: "var-log-nosuid"
  compliance_note: {
    version: { cpe_uri: "cpe:/o:debian:ubuntu_linux:22.04" version: "2.0.0" benchmark_document: "CIS Ubuntu 22.04" }
    title: "Ensure nosuid option set on /var/log partition"
    description: "The nosuid mount option specifies thatthe filesystem cannot contain setuid files."
    rationale:
      "Since the /var/log file system is only intended for log files, set this option to ensure that "
      "users cannot create setuid files in /var/log."
    remediation:
      "Editthe /etc/fstab file and add nosuid to the fourth field (mounting options) for the "
      "/var/log partition.\n"
      "Example:\n"
      "```\n"
      "<device> /var/log <fstype> defaults, rw,nosuid, nodev, noexec, relatime 0\n"
      "```\n"
      "Run the following command to remount /var/log with the configured options:\n"
      "```\n"
      "mount -o remount /var/log\n"
      "```\n"
      "References:\n"
      "1. See the fstab(5) manual page for more information."
    cis_benchmark: {
      profile_level: 1
      severity: LOW
    }
    scan_instructions:
      "scan_type_specific:{instance_scanning:{"
      "check_alternatives:{"
      "  file_checks:{"
      "    files_to_check:{single_file:{path:\"/proc/self/mountinfo\"}}"
      "    content_entry:{"
      "      match_type: ALL_MATCH_ANY_ORDER"
      "      match_criteria: {"
      "          filter_regex: \".* /var/log .* - .*\""
      "          expected_regex: \".* /var/log .*nosuid.* - .*\""
      "      }"
      "    }"
      "  }"
      "}"
      "check_alternatives:{"
      "  file_checks:{"
      "    files_to_check:{single_file:{path:\"/proc/self/mountinfo\"}}"
      "    content_entry:{"
      "      match_type: NONE_MATCH"
      "      match_criteria: {"
      "          filter_regex: \".* /var/log .* - .*\""
      "          expected_regex: \".* /var/log .* - .*\""
      "      }"
      "    }"
      "  }"
      "}}}"
  }
}
benchmark_configs: {
  id: "var-log-noexec"
  compliance_note: {
    version: { cpe_uri: "cpe:/o:debian:ubuntu_linux:22.04" version: "2.0.0" benchmark_document: "CIS Ubuntu 22.04" }
    title: "Ensure noexec option set on /var/log partition"
    description: "The noexec mount option specifies that the filesystem cannot contain executable binaries."
    rationale:
      "Since the /var/log file system is only intended for log files, set this option to ensure that "
      "users cannot run executable binaries from /var/log."
    remediation:
      "Editthe /etc/fstab file and add noexec to the fourth field (mounting options) for the "
      "/var/log partition.\n"
      "Example:\n"
      "```\n"
      "<device> /var/log <fstype> defaults, rw,nosuid, nodev, noexec, relatime 0\n"
      "```\n"
      "Run the following command to remount /var/log with the configured options:\n"
      "```\n"
      "mount -o remount /var/log\n"
      "```\n"
      "References:\n"
      "1. See the fstab(5) manual page for more information."
    cis_benchmark: {
      profile_level: 1
      severity: LOW
    }
    scan_instructions:
      "scan_type_specific:{instance_scanning:{"
      "check_alternatives:{"
      "  file_checks:{"
      "    files_to_check:{single_file:{path:\"/proc/self/mountinfo\"}}"
      "    content_entry:{"
      "      match_type: ALL_MATCH_ANY_ORDER"
      "      match_criteria: {"
      "          filter_regex: \".* /var/log .* - .*\""
      "          expected_regex: \".* /var/log .*noexec.* - .*\""
      "      }"
      "    }"
      "  }"
      "}"
      "check_alternatives:{"
      "  file_checks:{"
      "    files_to_check:{single_file:{path:\"/proc/self/mountinfo\"}}"
      "    content_entry:{"
      "      match_type: NONE_MATCH"
      "      match_criteria: {"
      "          filter_regex: \".* /var/log .* - .*\""
      "          expected_regex: \".* /var/log .* - .*\""
      "      }"
      "    }"
      "  }"
      "}}}"
  }
}
benchmark_configs: {
  id: "var-log-audit-nodev"
  compliance_note: {
    version: { cpe_uri: "cpe:/o:debian:ubuntu_linux:22.04" version: "2.0.0" benchmark_document: "CIS Ubuntu 22.04" }
    title: "Ensure nodev option set on /var/log/audit partition"
    description: "The nodev mount option specifies that the filesystem cannot contain special devices."
    rationale:
      "Since the /var/log/audit file system is not intended to support devices, set this option to "
      "ensure that users cannot create a block or character special devices in /var/log/audit.\n"
    remediation:
      "Editthe /etc/fstab file and add nodev to the fourth field (mounting options) for the "
      "/var/log/audit partition.\n"
      "Example:\n"
      "```\n"
      "<device> /var/log/audit <fstype>\n"
      "defaults, rw,nosuid, nodev, noexec, relatime 0 0\n"
      "```\n"
      "Run the following command to remount /var/log/audit with the configured options:\n"
      "```\n"
      "mount -o remount /var/log/audit\n"
      "```\n"
      "References:\n"
      "1. See the fstab(5) manual page for more information."
    cis_benchmark: {
      profile_level: 1
      severity: LOW
    }
    scan_instructions:
      "scan_type_specific:{instance_scanning:{"
      "check_alternatives:{"
      "  file_checks:{"
      "    files_to_check:{single_file:{path:\"/proc/self/mountinfo\"}}"
      "    content_entry:{"
      "      match_type: ALL_MATCH_ANY_ORDER"
      "      match_criteria: {"
      "          filter_regex: \".* /var/log/audit .* - .*\""
      "          expected_regex: \".* /var/log/audit .*nodev.* - .*\""
      "      }"
      "    }"
      "  }"
      "}"
      "check_alternatives:{"
      "  file_checks:{"
      "    files_to_check:{single_file:{path:\"/proc/self/mountinfo\"}}"
      "    content_entry:{"
      "      match_type: NONE_MATCH"
      "      match_criteria: {"
      "          filter_regex: \".* /var/log/audit .* - .*\""
      "          expected_regex: \".* /var/log/audit .* - .*\""
      "      }"
      "    }"
      "  }"
      "}}}"
  }
}
benchmark_configs: {
  id: "var-log-audit-nosuid"
  compliance_note: {
    version: { cpe_uri: "cpe:/o:debian:ubuntu_linux:22.04" version: "2.0.0" benchmark_document: "CIS Ubuntu 22.04" }
    title: "Ensure nosuid option set on /var/log/audit partition"
    description: "The nosuid mount option specifies thatthe filesystem cannot contain setuid files."
    rationale:
      "Since the /var/log/audit file system is only intended for variable files such as logs, set this "
      "option to ensure that users cannot create setuid files in /var/log/audit.\n"
    remediation:
      "Editthe /etc/fstab file and add nosuid to the fourth field (mounting options) for the "
      "option to ensure that users cannot create setuid files in /var/log/audit.\n"
      "Example:\n"
      "```\n"
      "<device> /var/log/audit <fstype>\n"
      "defaults, rw,nosuid, nodev, noexec, relatime 0 0\n"
      "```\n"
      "Run the following command to remount /var/log/audit with the configured options:\n"
      "```\n"
      "mount -o remount /var/log/audit\n"
      "```\n"
      "References:\n"
      "1. See the fstab(5) manual page for more information."
    cis_benchmark: {
      profile_level: 1
      severity: LOW
    }
    scan_instructions:
      "scan_type_specific:{instance_scanning:{"
      "check_alternatives:{"
      "  file_checks:{"
      "    files_to_check:{single_file:{path:\"/proc/self/mountinfo\"}}"
      "    content_entry:{"
      "      match_type: ALL_MATCH_ANY_ORDER"
      "      match_criteria: {"
      "          filter_regex: \".* /var/log/audit .* - .*\""
      "          expected_regex: \".* /var/log/audit .*nosuid.* - .*\""
      "      }"
      "    }"
      "  }"
      "}"
      "check_alternatives:{"
      "  file_checks:{"
      "    files_to_check:{single_file:{path:\"/proc/self/mountinfo\"}}"
      "    content_entry:{"
      "      match_type: NONE_MATCH"
      "      match_criteria: {"
      "          filter_regex: \".* /var/log/audit .* - .*\""
      "          expected_regex: \".* /var/log/audit .* - .*\""
      "      }"
      "    }"
      "  }"
      "}}}"
  }
}
benchmark_configs: {
  id: "var-log-audit-noexec"
  compliance_note: {
    version: { cpe_uri: "cpe:/o:debian:ubuntu_linux:22.04" version: "2.0.0" benchmark_document: "CIS Ubuntu 22.04" }
    title: "Ensure noexec option set on /var/log/audit partition"
    description: "The noexec mount option specifies that the filesystem cannot contain executable binaries."
    rationale:
      "Since the /var/log/audit filesystems only intended for auditlogs, set this option to "
      "ensure that users cannot run executable binaries from /var/log/audit."
    remediation:
      "Editthe /etc/fstab file and add noexec to the fourth field (mounting options) for the /var "
      "partition.\n"
      "Example:\n"
      "```\n"
      "<device> /var/log/audit <fstype>\n"
      "defaults, rw,nosuid, nodev, noexec, relatime 0 0\n"
      "```\n"
      "Run the following command to remount /var/log/audit with the configured options:\n"
      "```\n"
      "mount -o remount /var/log/audit\n"
      "```\n"
      "References:\n"
      "1. See the fstab(5) manual page for more information."
    cis_benchmark: {
      profile_level: 1
      severity: LOW
    }
    scan_instructions:
      "scan_type_specific:{instance_scanning:{"
      "check_alternatives:{"
      "  file_checks:{"
      "    files_to_check:{single_file:{path:\"/proc/self/mountinfo\"}}"
      "    content_entry:{"
      "      match_type: ALL_MATCH_ANY_ORDER"
      "      match_criteria: {"
      "          filter_regex: \".* /var/log/audit .* - .*\""
      "          expected_regex: \".* /var/log/audit .*noexec.* - .*\""
      "      }"
      "    }"
      "  }"
      "}"
      "check_alternatives:{"
      "  file_checks:{"
      "    files_to_check:{single_file:{path:\"/proc/self/mountinfo\"}}"
      "    content_entry:{"
      "      match_type: NONE_MATCH"
      "      match_criteria: {"
      "          filter_regex: \".* /var/log/audit .* - .*\""
      "          expected_regex: \".* /var/log/audit .* - .*\""
      "      }"
      "    }"
      "  }"
      "}}}"
  }
}
benchmark_configs: {
  id: "sshd-banner-configured"
  compliance_note: {
    version: { cpe_uri: "cpe:/o:debian:ubuntu_linux:22.04" version: "2.0.0" benchmark_document: "CIS Ubuntu 22.04" }
    version: { cpe_uri: "cpe:/o:debian:debian_linux:12.0" version: "1.1.0" benchmark_document: "CIS Debian Linux 12" }
    title: "Ensure sshd Banner is configured"
    description:
      "The Banner parameter specifies a file whose contents must be sent to the remote user "
      "before authentication is permitted. By default, no banner is displayed."
    rationale:
      "Banners are used to warn connecting users of the particular site's policy regarding "
      "connection. Presenting a warning message prior to the normal user login may assist the "
      "prosecution of trespassers on the computer system."
    remediation:
      "Edit the /etc/ssh/sshd_config file to set the Banner parameter above any Include and "
      "Match entries as follows:\n\n"
      "Banner /etc/issue.net\n\n"
      "Note: First occurrence of an option takes precedence, Match set statements "
      "withstanding. If Include locations are enabled, used, and order of precedence is "
      "understood in your environment, the entry may be created in a file in Include location."
    cis_benchmark: {
      profile_level: 1
      severity: LOW
    }
    scan_instructions:
      "generic:{"
      "  check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{single_file:{path:\"/etc/ssh/sshd_config\"}}"
      "      content_entry:{"
      "        match_type: ALL_MATCH_ANY_ORDER"
      "        match_criteria:{"
      "          filter_regex: \"\\\\s*Banner\\\\s+/etc/issue\\\\.net$\""
      "          expected_regex: \"\\\\s*Banner\\\\s+/etc/issue\\\\.net$\""
      "        }"
      "      }"
      "    }"
      "  }"
      "}"
  }
}
benchmark_configs: {
  id: "sshd-access-configured"
  compliance_note: {
    version: { cpe_uri: "cpe:/o:debian:ubuntu_linux:22.04" version: "2.0.0" benchmark_document: "CIS Ubuntu 22.04" }
    version: { cpe_uri: "cpe:/o:debian:debian_linux:12.0" version: "1.1.0" benchmark_document: "CIS Debian Linux 12" }
    title: "Ensure sshd access is configured"
    description:
      "There are several options available to limit which users and groups can access the "
      "system via SSH. It is recommended that at least one of the following options be "
      "leveraged:\n"
      "- AllowUsers\n"
      "- AllowGroups\n"
      "- DenyUsers\n"
      "- DenyGroups\n"
      "These options restrict SSH access to specific users or groups, or deny access as required."
    rationale:
      "Restricting which users can remotely access the system via SSH will help ensure that "
      "only authorized users access the system."
    remediation:
      "Edit the /etc/ssh/sshd_config file to set one or more of the parameters above any Include "
      "and Match set statements as follows:\n\n"
      "AllowUsers <userlist>\n"
      "AND/OR\n"
      "AllowGroups <grouplist>\n\n"
      "Note:\n"
      "- First occurrence of an option takes precedence, Match set statements notwithstanding.\n"
      "- It is easier to manage an allow list than a deny list, as a deny list may overlook newly added users or groups."
    cis_benchmark: {
      profile_level: 1
      severity: LOW
    }
    scan_instructions:
      "generic:{"
      "  check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{single_file:{path:\"/etc/ssh/sshd_config\"}}"
      "      content_entry:{"
      "        match_type: ALL_MATCH_ANY_ORDER"
      "        match_criteria:{"
      "          filter_regex: \"\\\\s*(AllowUsers|AllowGroups|DenyUsers|DenyGroups)\\\\s+.+$\""
      "          expected_regex: \"\\\\s*(AllowUsers|AllowGroups|DenyUsers|DenyGroups)\\\\s+.+$\""
      "        }"
      "      }"
      "    }"
      "  }"
      "}"
  }
}
benchmark_configs: {
  id: "sshd-disable-forwarding-configured"
  compliance_note: {
    version: { cpe_uri: "cpe:/o:debian:ubuntu_linux:22.04" version: "2.0.0" benchmark_document: "CIS Ubuntu 22.04" }
    version: { cpe_uri: "cpe:/o:debian:debian_linux:12.0" version: "1.1.0" benchmark_document: "CIS Debian Linux 12" }
    title: "Ensure sshd DisableForwarding is enabled"
    description:
      "The DisableForwarding parameter disables all forwarding features, including X11, ssh-agent, TCP, and StreamLocal forwarding. "
      "This ensures restricted configurations and reduces potential security risks associated with SSH forwarding."
    rationale:
      "Disabling forwarding features prevents potential exploitation by attackers, including unauthorized access, data exfiltration, "
      "and creating backdoors. Forwarding features such as X11, ssh-agent, and port forwarding can introduce significant risks to organizational security."
    remediation:
      "Edit the /etc/ssh/sshd_config file to set the DisableForwarding parameter to 'yes':\n"
      "```\n"
      "DisableForwarding yes\n"
      "```\n"
      "Ensure this setting is applied above any Include directives to maintain precedence."
    cis_benchmark: {
      profile_level: 1
      severity: LOW
    }
    scan_instructions:
      "generic:{"
      "  check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{single_file:{path:\"/etc/ssh/sshd_config\"}}"
      "      content_entry:{"
      "        match_type: ALL_MATCH_ANY_ORDER"
      "        match_criteria: {"
      "          filter_regex: \"\\\\s*DisableForwarding\\\\s+.*$\""
      "          expected_regex: \"\\\\s*DisableForwarding\\\\s+yes$\""
      "        }"
      "      }"
      "    }"
      "  }"
      "}"
  }
}

benchmark_configs: {
  id: "sshd-gssapi-authentication-disabled"
  compliance_note: {
    version: { cpe_uri: "cpe:/o:debian:ubuntu_linux:22.04" version: "2.0.0" benchmark_document: "CIS Ubuntu 22.04" }
    version: { cpe_uri: "cpe:/o:debian:debian_linux:12.0" version: "1.1.0" benchmark_document: "CIS Debian Linux 12" }
    title: "Ensure sshd GSSAPIAuthentication is disabled"
    description:
      "The GSSAPIAuthentication parameter specifies whether user authentication "
      "based on GSSAPI is allowed. Disabling this option reduces the attack "
      "surface of the system by avoiding exposure of the system's GSSAPI to remote hosts."
    rationale:
      "Allowing GSSAPI authentication through SSH exposes the system's GSSAPI to remote "
      "hosts, increasing the attack surface. Disabling it minimizes potential risks."
    remediation:
      "Edit the /etc/ssh/sshd_config file and set the following option:\n"
      "```\n"
      "GSSAPIAuthentication no\n"
      "```\n"
      "Ensure this is placed above any Include or Match entries."
    cis_benchmark: {
      profile_level: 1
      severity: LOW
    }
    scan_instructions:
      "generic:{"
      "  check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{single_file:{path:\"/etc/ssh/sshd_config\"}}"
      "      content_entry:{"
      "        match_type: ALL_MATCH_ANY_ORDER"
      "        match_criteria:{"
      "          filter_regex: \"\\\\s*GSSAPIAuthentication\\\\s+.*$\""
      "          expected_regex: \"\\\\s*GSSAPIAuthentication\\\\s+no$\""
      "        }"
      "      }"
      "    }"
      "  }"
      "}"
  }
}
benchmark_configs: {
  id: "sshd-hostbasedauthentication-disabled"
  compliance_note: {
    version: { cpe_uri: "cpe:/o:debian:ubuntu_linux:22.04" version: "2.0.0" benchmark_document: "CIS Ubuntu 22.04" }
    version: { cpe_uri: "cpe:/o:debian:debian_linux:12.0" version: "1.1.0" benchmark_document: "CIS Debian Linux 12" }
    title: "Ensure SSH HostbasedAuthentication is disabled"
    description:
      "The HostbasedAuthentication parameter specifies if authentication is allowed through "
      "trusted hosts via the use of .rhosts or /etc/hosts.equiv, along with successful public "
      "key client host authentication. This option only applies to SSH Protocol Version 2."
    rationale:
      "Even though the .rhosts files are ineffective if support is disabled in /etc/pam.conf, "
      "disabling the ability to use .rhosts files in SSH provides an additional layer of protection."
    remediation:
      "Edit the /etc/ssh/sshd_config file to set the HostbasedAuthentication parameter to no "
      "above any Include and Match entries as follows:\n"
      "```\n"
      "HostbasedAuthentication no\n"
      "```\n"
      "Note: First occurrence of an option takes precedence. If Include locations are enabled, "
      "used, and order of precedence is understood in your environment, the entry may be created "
      "in a file in an Include location."
    cis_benchmark: {
      profile_level: 1
      severity: LOW
    }
    scan_instructions:
      "generic:{"
      "  check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{single_file:{path:\"/etc/ssh/sshd_config\"}}"
      "      content_entry:{"
      "        match_type: ALL_MATCH_ANY_ORDER"
      "        match_criteria: {"
      "          filter_regex: \"\\\\s*HostbasedAuthentication\\\\s+.*$\""
      "          expected_regex: \"\\\\s*HostbasedAuthentication\\\\s+no.*$\""
      "        }"
      "      }"
      "    }"
      "  }"
      "}"
  }
}
benchmark_configs: {
  id: "ssh-maxsessions-10-or-less"
  compliance_note: {
    version: { cpe_uri: "cpe:/o:debian:ubuntu_linux:22.04" version: "2.0.0" benchmark_document: "CIS Ubuntu 22.04" }
    title: "Ensure SSH MaxSessions is set to 10 or less"
    description:
      "The MaxSessions parameter specifies the maximum number of open "
      "sessions permitted from a given connection."
    rationale:
      "To protect a system from denial of service due to a large number of "
      "concurrent sessions, use the rate limiting function of MaxSessions to "
      "protect availability of sshd logins and prevent overwhelming the daemon."
    remediation:
      "Edit the /etc/ssh/sshd_config file to set the parameter as follows:\n"
      "```\n"
      "MaxSessions 10\n"
      "```\n"
    cis_benchmark: {
      profile_level: 1
      severity: LOW
    }
    scan_instructions:
      "generic:{"
      "  check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{single_file:{path:\"/etc/ssh/sshd_config\"}}"
      "      content_entry:{"
      "        match_type: ALL_MATCH_ANY_ORDER"
      "        match_criteria: {"
      "          filter_regex: \"\\\\s*MaxSessions\\\\s+\\\\d+$\""
      "          expected_regex: \"\\\\s*MaxSessions\\\\s+(\\\\d+)$\""
      "          group_criteria:{"
      "            group_index: 1"
      "            type: LESS_THAN"
      "            const: 11"
      "          }"
      "        }"
      "      }"
      "    }"
      "  }"
      "}"
  }
}
benchmark_configs: {
  id: "sudo-is-installed"
  compliance_note: {
    version: { cpe_uri: "cpe:/o:debian:ubuntu_linux:22.04" version: "2.0.0" benchmark_document: "CIS Ubuntu 22.04" }
    version: { cpe_uri: "cpe:/o:debian:debian_linux:12.0" version: "1.1.0" benchmark_document: "CIS Debian Linux 12" }
    title: "Ensure sudo is installed"
    description:
      "sudo allows a permitted user to execute a command as the superuser or another user, as "
      "specified by the security policy. The invoking user's real (not effective) user ID is used to "
      "determine the user name with which to query the security policy."
    rationale:
      "sudo supports a plugin architecture for security policies and input/output logging. Third "
      "parties can develop and distribute their own policy and /0 logging plugins to work "
      "seamlessly with the sudo front end. The default security policy is sudoers, which is "
      "configured via the file /etc/sudoers.\n"
      "The security policy determines what privileges, if any, a user has to run sudo. The policy "
      "may require that users authenticate themselves with a password or another authentication "
      "mechanism. If authentication is required, sudo will exit if the user's password is not "
      "entered within a configurable time limit. This limit is policy-specific."
    remediation:
      "first determine is LDAP functionality is required. If so, then install sudo-ldap, else install sudo.\n"
      "# apt install sudo"
    cis_benchmark: {
      profile_level: 1
      severity: LOW
    }
    scan_instructions:
      "generic:{"
      "  check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{single_file:{path:\"/bin/sudo\"}}"
      "      existence:{should_exist:true}"
      "    }"
      "  }"
      "  check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{single_file:{path:\"/sbin/sudo\"}}"
      "      existence:{should_exist:true}"
      "    }"
      "  }"
      "  check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{single_file:{path:\"/usr/bin/sudo\"}}"
      "      existence:{should_exist:true}"
      "    }"
      "  }"
      "  check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{single_file:{path:\"/usr/sbin/sudo\"}}"
      "      existence:{should_exist:true}"
      "    }"
      "  }"
      "}"
  }
}
benchmark_configs: {
  id: "users-password-for-escalation"
  compliance_note: {
    version: { cpe_uri: "cpe:/o:debian:ubuntu_linux:22.04" version: "2.0.0" benchmark_document: "CIS Ubuntu 22.04" }
    version: { cpe_uri: "cpe:/o:debian:debian_linux:12.0" version: "1.1.0" benchmark_document: "CIS Debian Linux 12" }
    title: "Ensure users must provide password for escalation"
    description:
      "The operating system must be configured so that users must provide a password for "
      "privilege escalation."
    rationale:
      "Without re-authentication, users may access resources or perform tasks for which they do "
      "not have authorization.\n"
      "When operating systems provide the capability to escalate a functional capability, it is "
      "critical the user re-authenticate."
    remediation:
      "Based on the outcome of the audit procedure, use visudo -f <PATH TO FILE> to edit the "
      "relevant sudoers file.\n"
      "Remove any line with occurrences of NOPASSWD tags in the file."
    cis_benchmark: {
      profile_level: 2
      severity: LOW
    }
    scan_instructions:
      "generic:{"
      "  check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{single_file:{path:\"/etc/sudoers\"}}"
      "          content_entry:{"
      "            match_type: NONE_MATCH"
      "            match_criteria: {"
      "              filter_regex: \"[^#].*NOPASSWD:.*\""
      "              expected_regex: \"[^#].*NOPASSWD:.*\""
      "            }"
      "          }"
      "    }"
      "  }"
      "  check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{files_in_dir:{"
      "        dir_path:\"/etc/sudoers.d\""
      "        recursive: true"
      "      }}"
      "      content_entry:{"
      "        match_type: NONE_MATCH"
      "        match_criteria: {"
      "              filter_regex: \"[^#].*NOPASSWD:.*\""
      "              expected_regex: \"[^#].*NOPASSWD:.*\""
      "        }"
      "      }"
      "    }"
      "  }"
      "}"
  }
}
benchmark_configs: {
  id: "reauthentication-for-privilege-escalation-not-disabled"
  compliance_note: {
    version: { cpe_uri: "cpe:/o:debian:ubuntu_linux:22.04" version: "2.0.0" benchmark_document: "CIS Ubuntu 22.04" }
    version: { cpe_uri: "cpe:/o:debian:debian_linux:12.0" version: "1.1.0" benchmark_document: "CIS Debian Linux 12" }
    title: "Ensure re-authentication for privilege escalation is not disabled globally"
    description:
      "The operating system must be configured so that users must re-authenticate for privilege "
      "escalation."
    rationale:
      "Without re-authentication, users may access resources or perform tasks for which they do "
      "not have authorization.\n"
      "When operating systems provide the capability to escalate a functional capability, it is "
      "critical the user re-authenticate."
    remediation:
      "Configure the operating system to require users to reauthenticate for privilege escalation.\n"
      "Based on the outcome of the audit procedure, use visudo -f <PATH TO FILE> to edit the "
      "relevant sudoers file.\n"
      "Remove any occurrences of !authenticate tags in the file(s)."
    cis_benchmark: {
      profile_level: 1
      severity: LOW
    }
    scan_instructions:
      "generic:{"
      "  check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{single_file:{"
      "         path:\"/etc/sudoers\""
      "       }"
      "      }"
      "      files_to_check:{files_in_dir:{"
      "         dir_path:\"/etc/sudoers.d/\""
      "       }"
      "      }"
      "    content_entry:{"
      "        match_type: NONE_MATCH"
      "        match_criteria: {"
      "          filter_regex: \"[^#].*\\\\!authenticate.*\""
      "          expected_regex: \"[^#].*\\\\!authenticate.*\""
      "        }"
      "      }"
      "    }"
      "  }"
      "}"
  }
}
benchmark_configs: {
  id: "sudo-authentication-timeout-is-configured-correctly"
  compliance_note: {
    version: { cpe_uri: "cpe:/o:debian:ubuntu_linux:22.04" version: "2.0.0" benchmark_document: "CIS Ubuntu 22.04" }
    version: { cpe_uri: "cpe:/o:debian:debian_linux:12.0" version: "1.1.0" benchmark_document: "CIS Debian Linux 12" }
    title: "Ensure sudo authentication timeout is configured correctly"
    description:
      "sudo caches used credentials for a default of 5 minutes. This is for ease of use when there "
      "are multiple administrative tasks to perform. The timeout can be modified to suit local "
      "security policies."
    rationale:
      "Setting a timeout value reduces the window of opportunity for unauthorized privileged "
      "access to another user."
    remediation:
      "If the currently configured time out is larger than 15 minutes, edit the file listed in the audit "
      "section with ```\nvisudo -f <PATH TO FILE>```\n and modify the entry ```\ntimestamp_timeout=```\n to 15 "
      "minutes or less as per your site policy. The value is in minutes. This particular entry may "
      "appear on its own, or on the sameline as env_reset. See the following two examples:\n"
      "1. Same line\n"
      "```\n"
      "Defaults env_reset, timestamp timeout=15\n"
      "```\n"
      "2. Different lines\n"
      "```\n"
      "Defaults timestamp_ timeout=15\n"
      "Defaults env_reset\n"
      "```\n"
      "References:\n"
      "1. https://www.sudo.ws/man/1.9.0/sudoers.man.html"
    cis_benchmark: {
      profile_level: 1
      severity: LOW
    }
    scan_instructions:
      "generic:{"
      "  check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{single_file:{"
      "         path:\"/etc/sudoers\""
      "       }"
      "      }"
      "      files_to_check:{files_in_dir:{"
      "         dir_path:\"/etc/sudoers.d/\""
      "       }"
      "      }"
      "    content_entry:{"
      "        match_type: ALL_MATCH_ANY_ORDER"
      "        match_criteria: {"
      "          filter_regex: \".*timestamp_timeout\\\\s*=.*\""
      "          expected_regex: \".*timestamp_timeout\\\\s*=\\\\s*(\\\\d+).*\""
      "          group_criteria:{"
      "            group_index: 1"
      "            type: LESS_THAN"
      "            const: 16"
      "          }"
      "        }"
      "      }"
      "    }"
      "  }"
      "  check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{single_file:{"
      "         path:\"/etc/sudoers\""
      "       }"
      "      }"
      "      files_to_check:{files_in_dir:{"
      "         dir_path:\"/etc/sudoers.d/\""
      "       }"
      "      }"
      "    content_entry:{"
      "        match_type: NONE_MATCH"
      "        match_criteria: {"
      "          filter_regex: \".*timestamp_timeout\\\\s*=.*\""
      "          expected_regex: \".*timestamp_timeout\\\\s*=.*\""
      "        }"
      "      }"
      "    }"
      "  }"
      "}"
  }
}
benchmark_configs: {
  id: "ensure-libpam-modules-installed"
  compliance_note: {
    version: { cpe_uri: "cpe:/o:debian:ubuntu_linux:22.04" version: "2.0.0" benchmark_document: "CIS Ubuntu 22.04" }
    version: { cpe_uri: "cpe:/o:debian:debian_linux:12.0" version: "1.1.0" benchmark_document: "CIS Debian Linux 12" }
    title: "Ensure libpam-modules is installed"
    description:
      "Pluggable Authentication Modules for PAM. Ensures the system has full functionality and access to the PAM options covered by this Benchmark."
    rationale:
      "To ensure the system has full functionality and access to the PAM options covered by this Benchmark."
    remediation:
      "If the version of libpam-modules on the system is less than version 1.5.2-6, run the following command to update to the latest version:\n"
      "```\n"
      "apt update && apt upgrade libpam-modules\n"
      "```\n"
    cis_benchmark: {
      profile_level: 1
      severity: MEDIUM
    }
    scan_instructions:
      "generic:{check_alternatives:{"
      "  file_checks:{"
      "    files_to_check:{single_file:{path:\"/var/lib/dpkg/status\"}}"
      "    content_entry:{"
      "      match_type: ALL_MATCH_ANY_ORDER"
      "      match_criteria: {"
      "        filter_regex: \"Package: libpam-modules\""
      "        expected_regex: \"Package: libpam-modules\""
      "      }"
      "      match_criteria: {"
      "        filter_regex: \"Version: (1\\\\.5\\\\.[2-9]|1\\\\.5\\\\.[1-9][0-9]+|1\\\\.[6-9]|[2-9]\\\\..*)\""
      "        expected_regex: \"Version: (1\\\\.5\\\\.[2-9]|1\\\\.5\\\\.[1-9][0-9]+|1\\\\.[6-9]|[2-9]\\\\..*)\""
      "      }"
      "    }"
      "  }"
      "}}"
  }
}
benchmark_configs: {
  id: "ensure-libpam-pwquality-installed"
  compliance_note: {
    version: { cpe_uri: "cpe:/o:debian:ubuntu_linux:22.04" version: "2.0.0" benchmark_document: "CIS Ubuntu 22.04" }
    version: { cpe_uri: "cpe:/o:debian:debian_linux:12.0" version: "1.1.0" benchmark_document: "CIS Debian Linux 12" }
    title: 
      "Ensure libpam-pwquality is installed"
    description: 
      "libpwquality provides common functions for password quality checking and scoring based on their apparent randomness. It helps in strengthening passwords to reduce brute force attacks."
    rationale: 
      "Strong passwords reduce the risk of systems being hacked through brute force methods."
    remediation: 
      "Run the following command to install libpam-pwquality:\n"
      "```\napt install libpam-pwquality```\n"
    cis_benchmark: {
      profile_level: 1
      severity: MEDIUM
    }
    scan_instructions: 
      "generic:{"
      "  check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{single_file:{path:\"/var/lib/dpkg/status\"}}"
      "      content_entry:{"
      "        match_type: ALL_MATCH_ANY_ORDER"
      "        match_criteria: {"
      "          filter_regex: \"Package: libpam-pwquality\""
      "          expected_regex: \"Package: libpam-pwquality\""
      "        }"
      "      }"
      "    }"
      "  }"
      "}"
  }
}
benchmark_configs: {
  id: "ensure-pam-faillock-enabled"
  compliance_note: {
    version: { cpe_uri: "cpe:/o:debian:ubuntu_linux:22.04" version: "2.0.0" benchmark_document: "CIS Ubuntu 22.04" }
    version: { cpe_uri: "cpe:/o:debian:debian_linux:12.0" version: "1.1.0" benchmark_document: "CIS Debian Linux 12" }
    title: "Ensure pam_faillock module is enabled"
    description:
      "The pam_faillock.so module maintains a list of failed authentication attempts per user during a specified interval and locks the account in case there were more than the configured number of consecutive failed authentications (defined by the deny parameter in the faillock configuration). It stores the failure records into per-user files in the tally directory."
    rationale:
      "Locking out user IDs after n unsuccessful consecutive login attempts mitigates brute-force password attacks against your systems."
    remediation:
      "Create two pam-auth-update profiles in /usr/share/pam-configs/:\n\n"
      "First profile:\n"
      "Name: Enable pam_faillock to deny access\n"
      "Default: yes\n"
      "Priority: 0\n"
      "Auth-Type: Primary\n"
      "Auth: [default=die] pam_faillock.so authfail\n\n"
      "Second profile:\n"
      "Name: Notify of failed login attempts and reset count upon success\n"
      "Default: yes\n"
      "Priority: 1024\n"
      "Auth-Type: Primary\n"
      "Auth: requisite pam_faillock.so preauth\n"
      "Account-Type: Primary\n"
      "Account: required pam_faillock.so\n\n"
      "After creating the profiles, run the following commands to update PAM files:\n"
      "# pam-auth-update --enable faillock\n"
      "# pam-auth-update --enable faillock_notify"
    cis_benchmark: {
      profile_level: 1
      severity: MEDIUM
    }
    scan_instructions:
      "generic:{"
      "  check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{files_in_dir:{"
      "        dir_path:\"/etc/pam.d\""
      "        filename_regex: \"common-(auth|account)\""
      "        recursive: false"
      "      }}"
      "      content_entry:{"
      "        match_type: ALL_MATCH_ANY_ORDER"
      "        match_criteria: {"
      "           filter_regex: \".*pam_faillock.so.*\""
      "           expected_regex: \".*pam_faillock.so.*\""
      "        }"
      "      }"
      "    }"
      "}}"
  }
}
benchmark_configs: {
  id: "ensure-pam-pwquality-enabled"
  compliance_note: {
    version: { cpe_uri: "cpe:/o:debian:ubuntu_linux:22.04" version: "2.0.0" benchmark_document: "CIS Ubuntu 22.04" }
    version: { cpe_uri: "cpe:/o:debian:debian_linux:12.0" version: "1.1.0" benchmark_document: "CIS Debian Linux 12" }
    title: "Ensure pam_pwquality module is enabled"
    description:
      "The pam_pwquality.so module performs password quality checking. This module can be plugged into the password stack of a given service to provide strength-checking for passwords. The code was originally based on pam_cracklib module and the module is backwards compatible with its options."
    rationale:
      "Use of a unique, complex password helps to increase the time and resources required to compromise the password."
    remediation:
      "Run the following script to verify the pam_pwquality.so line exists in a pam-auth-update profile:\n"
      "# grep -P -- '\\bpam_pwquality\\.so\\b' /usr/share/pam-configs/*\n\n"
      "If similar output is returned, update the /etc/pam.d/common-password file:\n"
      "# pam-auth-update --enable {PROFILE_NAME}\n\n"
      "If not, create a pam-auth-update profile for pwquality and enable it:\n"
      "#!/usr/bin/env bash\n"
      "{\n"
      "arr=('Name: Pwquality password strength checking' 'Default: yes' 'Priority: 1024' 'Conflicts: cracklib' 'Password-Type: Primary' 'Password:' '\\n"
      "requisite\npam_pwquality.so retry=3' 'Password-Initial:requisite')\n"
      "printf '%s\\n' \"${arr[@]}\" > /usr/share/pam-configs/pwquality\n"
      "}"
    cis_benchmark: {
      profile_level: 1
      severity: MEDIUM
    }
    scan_instructions:
      "generic:{check_alternatives:{"
      "  file_checks:{"
      "    files_to_check:{files_in_dir:{"
      "      dir_path:\"/etc/pam.d\""
      "      filename_regex: \"common-password\""
      "      recursive: false"
      "    }}"
      "    content_entry:{"
      "      match_type: ALL_MATCH_ANY_ORDER"
      "      match_criteria: {"
      "        filter_regex: \"[^#]*\\\\bpam_pwquality.so.*\""
      "        expected_regex: \"[^#]*\\\\bpam_pwquality.so.*\""
      "      }"
      "    }"
      "  }"
      "  file_checks:{"
      "    files_to_check:{files_in_dir:{"
      "      dir_path:\"/usr/share/pam-configs/\""
      "      filename_regex: \".*\""
      "      recursive: false"
      "    }}"
      "    content_entry:{"
      "      match_type: ALL_MATCH_ANY_ORDER"
      "      match_criteria: {"
      "        filter_regex: \"[^#]*\\\\bpam_pwquality.so.*\""
      "        expected_regex: \"[^#]*\\\\bpam_pwquality.so.*\""
      "      }"
      "    }"
      "  }"
      "}}"
  }
}
benchmark_configs: {
  id: "ensure-pam-pwhistory-enabled"
  compliance_note: {
    version: { cpe_uri: "cpe:/o:debian:ubuntu_linux:22.04" version: "2.0.0" benchmark_document: "CIS Ubuntu 22.04" }
    version: { cpe_uri: "cpe:/o:debian:debian_linux:12.0" version: "1.1.0" benchmark_document: "CIS Debian Linux 12" }
    title: "Ensure pam_pwhistory module is enabled"
    description:
      "The pam_pwhistory.so module saves the last passwords for each user in order to force password change history and prevent users from alternating between the same passwords too frequently."
    rationale:
      "Use of unique, complex passwords helps to increase the time and resources required to compromise the password."
    remediation:
      "Run the following script to verify the pam_pwhistory.so line exists in a pam-auth-update profile:\n"
      "# grep -P -- '\\bpam_pwhistory\\.so\\b' /usr/share/pam-configs/*\n\n"
      "If similar output is returned, update the /etc/pam.d/common-password file:\n"
      "# pam-auth-update --enable {PROFILE_NAME}\n\n"
      "If not, create a pam-auth-update profile for pwhistory and enable it:\n"
      "#!/usr/bin/env bash\n"
      "{\n"
      "arr=('Name: pwhistory password history checking' 'Default: yes' 'Priority: 1024' 'Password-Type: Primary' 'Password:' '\nrequisite pam_pwhistory.so remember=24 enforce_for_root try_first_pass use_authtok')\n"
      "printf '%s\\n' \"${arr[@]}\" > /usr/share/pam-configs/pwhistory\n"
      "}"
      "Run the following command to update /etc/pam.d/common-password with the pwhistory profile:\n"
      "# pam-auth-update --enable pwhistory"
    cis_benchmark: {
      profile_level: 1
      severity: MEDIUM
    }
    scan_instructions:
      "generic:{check_alternatives:{"
      "  file_checks:{"
      "    files_to_check:{files_in_dir:{"
      "      dir_path:\"/etc/pam.d\""
      "      filename_regex:\"common-password\""
      "      recursive:false"
      "    }}"
      "    content_entry:{"
      "      match_type:ALL_MATCH_ANY_ORDER"
      "      match_criteria:{"
      "        filter_regex:\"[^#]*\\\\bpam_pwhistory.so.*\""
      "        expected_regex:\"[^#]*\\\\bpam_pwhistory.so.*\""
      "      }"
      "    }"
      "  }"
      "  file_checks:{"
      "    files_to_check:{files_in_dir:{"
      "      dir_path:\"/usr/share/pam-configs/\""
      "      filename_regex:\".*\""
      "      recursive:false"
      "    }}"
      "    content_entry:{"
      "      match_type:ALL_MATCH_ANY_ORDER"
      "      match_criteria:{"
      "        filter_regex:\"[^#]*\\\\bpam_pwhistory.so.*\""
      "        expected_regex:\"[^#]*\\\\bpam_pwhistory.so.*\""
      "      }"
      "    }"
      "  }"
      "}}"
  }
}
benchmark_configs: {
  id: "ensure-password-failed-attempts-lockout-is-configured"
  compliance_note: {
    version: { cpe_uri: "cpe:/o:debian:ubuntu_linux:22.04" version: "2.0.0" benchmark_document: "CIS Ubuntu 22.04" }
    version: { cpe_uri: "cpe:/o:debian:debian_linux:12.0" version: "1.1.0" benchmark_document: "CIS Debian Linux 12" }
    title: "Ensure password failed attempts lockout is configured"
    description:
      "The deny=<n> option will deny access if the number of consecutive authentication failures for this user during the recent interval exceeds."
    rationale:
      "Locking out user IDs after n unsuccessful consecutive login attempts mitigates brute force password attacks against your systems."
    remediation:
      "Set the deny option in /etc/security/faillock.conf to 5 or lower to restrict the number of consecutive authentication failures allowed."
    cis_benchmark: {
      profile_level: 1
      severity: LOW
    }
    scan_instructions: 
      "generic:{check_alternatives:{"
      "  file_checks:{"
      "    files_to_check:{single_file:{path:\"/etc/security/faillock.conf\"}}"
      "    content_entry:{"
      "      match_type: ALL_MATCH_ANY_ORDER"
      "      match_criteria: {"
      "        filter_regex: \"deny\\\\s*=\\\\s*(\\\\d+)\""
      "        expected_regex: \"deny\\\\s*=\\\\s*(\\\\d+)\""
      "        group_criteria:{"
      "          group_index: 1"
      "          type: LESS_THAN"
      "          const: 6"
      "        }"
      "      }"
      "    }"
      "  }"
      "}}"
  }
}
benchmark_configs: {
  id: "ensure-systemd-journal-remote-not-enabled"
  compliance_note: {
    version: { cpe_uri: "cpe:/o:debian:ubuntu_linux:22.04" version: "2.0.0" benchmark_document: "CIS Ubuntu 22.04" }
    version: { cpe_uri: "cpe:/o:debian:debian_linux:12.0" version: "1.1.0" benchmark_document: "CIS Debian Linux 12" }
    title: "Ensure systemd-journal-remote service is not in use"
    description:
      "The systemd-journal-remote service supports receiving messages from remote hosts, effectively turning the system into a log server. This is outside the operational boundary of a client system."
    rationale:
      "Ensuring that client systems are not configured to act as log servers reduces the attack surface and prevents unauthorized use."
    remediation:
      "Run the following commands to ensure the services are not enabled or active:\n"
      "```\n"
      "# systemctl disable systemd-journal-remote.socket systemd-journal-remote.service\n"
      "# systemctl stop systemd-journal-remote.socket systemd-journal-remote.service\n"
      "```\n"
    cis_benchmark: {
      profile_level: 1
      severity: LOW
    }
    scan_instructions:
      "generic:{check_alternatives:{"
      "  file_checks:{"
      "    files_to_check:{files_in_dir:{"
      "      dir_path:\"/etc/systemd/system\""
      "      filename_regex:\"(systemd-journal-remote.service)|(systemd-journal-remote.socket)\""
      "      recursive: true"
      "    }}"
      "    existence:{should_exist: false}"
      "  }"
      "}}"
  }
}
benchmark_configs: {
  id: "accounts-in-etc-passwd-use-shadowed-passwords"
  compliance_note: {
    version: { cpe_uri: "cpe:/o:debian:ubuntu_linux:22.04" version: "2.0.0" benchmark_document: "CIS Ubuntu 22.04" }
    version: { cpe_uri: "cpe:/o:debian:debian_linux:12.0" version: "1.1.0" benchmark_document: "CIS Debian Linux 12" }
    title: "Ensure accounts in /etc/passwd use shadowed passwords"
    description:
      "Local accounts can uses shadowed passwords. With shadowed passwords, The passwords "
      "are saved in shadow password file, /etc/shadow, encrypted by a salted one-way hash. "
      "Accounts with a shadowed password have an x in the second field in /etc/passwd."
    rationale:
      "The /etc/passwd file also contains information like user ID's and group ID's that are used "
      "by many system programs. Therefore, the /etc/passwd file must remain world readable. In "
      "spite of encoding the password with a randomly-generated one-way hash function, an "
      "attacker could still break the system if they got access to the /etc/passwd file. This can be "
      "mitigated by using shadowed passwords, thus moving the passwords in the /etc/passwd "
      "file to /etc/shadow. The /etc/shadow file is set so only root will be able to read and write.\n"
      "This helps mitigate the risk of an attacker gaining access to the encoded passwords with "
      "which to perform a dictionary attack.\n"
      "Notes:\n"
      "All accounts must have passwords or be locked to prevent the account from being used "
      "by an unauthorized user.\n"
      "Auser account with an empty second field in /etc/passwd allows the account to be "
      "logged into by providing only the username."
    remediation:
      "If any accounts in the /etc/passwd file do not have a single x in the password field, run the "
      "following command to set these accounts to use shadowed passwords:\n"
      "# sed -e\n"
      "'s/\"\\ ([a-2zA-20-9 ]*\\):[\":]1*:/\\1:x:/' -i /etc/passwd\n"
      "Investigate to determine if the account is logged in and what it is being used for, to "
      "determine if it needs to be forced off."
    cis_benchmark: {
      profile_level: 1
      severity: LOW
    }
    scan_instructions:
      "generic:{"
      "  check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{single_file:{"
      "         path:\"/etc/passwd\""
      "       }"
      "      }"
      "    content_entry:{"
      "        match_type: NONE_MATCH"
      "        match_criteria: {"
      "          filter_regex: \"^[^:]*:[xX]:\""
      "        }"
      "      }"
      "    }"
      "  }"
      "}"
  }
}
benchmark_configs: {
  id: "attempts-to-use-usermod-recorded"
  compliance_note: {
    version: { cpe_uri: "cpe:/o:debian:ubuntu_linux:22.04" version: "2.0.0" benchmark_document: "CIS Ubuntu 22.04" }
    version: { cpe_uri: "cpe:/o:debian:debian_linux:12.0" version: "1.1.0" benchmark_document: "CIS Debian Linux 12" }
    title: "Ensure successful and unsuccessful attempts to use the usermod command are recorded"
    description:
      "The operating system must generate audit records for successful/unsuccessful uses of the "
      "usermod command"
    rationale:
      "The usermod command modifies the system account files to reflect the changes that are "
      "specified on the command line. Without generating audit records that are specific to the "
      "security and mission needs of the organization, it would be difficult to establish,"
      "correlate, and investigate the events relating to an incident or identify those responsible "
      "for one."
    remediation:
      "Create audit rules"
      "Edit or create a file in the /etc/audit/rules.d/ directory, ending in .rules extension, with "
      "the relevant rules to monitor successful and unsuccessful attempts to use the chacl "
      "command.\n"
      "64 Bit systems\n"
      "Example:\n"
      "```\n"
      "# {\n"
      "UID_MIN=$(awk '/^\\\\s*UID_MIN/{print $2}' /etc/login.defs)"
      "[ -n \"${UID_MIN}\" ] && printf \""
      "-a always,exit -F path=/usr/sbin/usermod -F perm=x -F auid>=${UID_MIN} -F "
      "auid!=unset -k usermod "
      "\" >> /etc/audit/rules.d/50-usermod.rules \ \n"
      "|| printf \"ERROR: Variable 'UID_MIN' is unset.\\\n\"\n"
      "}\n"
      "```\n"
      "Load audit rules\n"
      "Merge and load the rules into active configuration:\n"
      "```\n"
      "# augenrules --load\n"
      "```\n"
      "Check if reboot is required.\n"
      "```\n"
      "# if [[ $(auditctl -s | grep \"enabled\") =~ \"2\" ]]; then printf \"Reboot\" "
      "required to load rules\\\\n\"; fi\n"
      "```\n"
      "32 Bit systems\n"
      "Follow the same procedures as for 64 bit systems and ignore any entries with b64."
    cis_benchmark: {
      profile_level: 2
      severity: LOW
    }
    scan_instructions:
      "scan_type_specific:{"
      "    instance_scanning:{"
      "        check_alternatives:{"
      "            file_checks:{"
      "                files_to_check:{single_file:{path: \"/etc/audit/audit.rules\"}}"
      "                content_entry:{"
      "                    match_type: ALL_MATCH_ANY_ORDER"
      "                    match_criteria:{"
      "                        filter_regex: \".*/usr/sbin/usermod.*\""
      "                        expected_regex: \"^\\\\s*-a\\\\s*always,exit\\\\s*-F\\\\s*path=/usr/sbin/usermod\\\\s*-F\\\\s*perm=x\\\\s*-F\\\\s*auid>=1000\\\\s*-F\\\\s*auid!=(unset|-1|4294967295)\\\\s*(\\\\s*(-F\\\\s*key=|-k))\\\\s*[!-~]*\\\\s*$\""
      "                    }"
      "                }"
      "            }"
      "        }"
      "    }"
      "    image_scanning:{"
      "        check_alternatives:{"
      "            file_checks:{"
      "                files_to_check:{"
      "                    files_in_dir:{"
      "                        dir_path:\"/etc/audit/rules.d\""
      "                        recursive: true"
      "                        files_only: true"
      "                        filename_regex: \".*\\\\.rules\""
      "                    }"
      "                }"
      "                content_entry:{"
      "                    match_type: ALL_MATCH_ANY_ORDER"
      "                    match_criteria:{"
      "                        filter_regex: \".*/usr/sbin/usermod.*\""
      "                        expected_regex: \"^\\\\s*-a\\\\s*always,exit\\\\s*-F\\\\s*path=/usr/sbin/usermod\\\\s*-F\\\\s*perm=x\\\\s*-F\\\\s*auid>=1000\\\\s*-F\\\\s*auid!=(unset|-1|4294967295)\\\\s*(\\\\s*(-F\\\\s*key=|-k))\\\\s*[!-~]*\\\\s*$\""
      "                    }"
      "                }"
      "            }"
      "        }"
      "    }"
      "}"
  }
}
benchmark_configs: {
  id: "attempts-to-use-chacl-recorded"
  compliance_note: {
    version: { cpe_uri: "cpe:/o:debian:ubuntu_linux:22.04" version: "2.0.0" benchmark_document: "CIS Ubuntu 22.04" }
    version: { cpe_uri: "cpe:/o:debian:debian_linux:12.0" version: "1.1.0" benchmark_document: "CIS Debian Linux 12" }
    title: "Ensure successful and unsuccessful attempts to use the chacl command are recorded"
    description:
      "The operating system must generate audit records for successful/unsuccessful uses of the"
      "chacl command"
    rationale:
      "Without generating audit records that are specific to the security and mission needs of the "
      "organization, it would be difficult to establish, correlate, and investigate the events relating "
      "to an incident or identify those responsible for one.\n"
      "Audit records can be generated from various components within the information system "
      "(e.g., module or policy filter)."
    remediation:
      "Create audit rules"
      "Edit or create a file in the /etc/audit/rules.d/ directory, ending in .rules extension, with "
      "the relevant rules to monitor successful and unsuccessful attempts to use the chacl "
      "command.\n"
      "64 Bit systems\n"
      "Example:\n"
      "```\n"
      "# {\n"
      "UID_MIN=$(awk '/^\\\\s*UID_MIN/{print $2}' /etc/login.defs)"
      "[ -n \"${UID_MIN}\" ] && printf \""
      "-a always,exit -F path=/usr/bin/chacl -F perm=x -F auid>=${UID_MIN} -F"
      "auid!=unset -k perm_chng"
      "\" >> /etc/audit/rules.d/50-perm_chng.rules \\"
      "|| printf \"ERROR: Variable 'UID_MIN' is unset.\\\n\"\n"
      "}\n"
      "```\n"
      "Load audit rules\n"
      "Merge and load the rules into active configuration:\n"
      "```\n"
      "# augenrules --load\n"
      "```\n"
      "Check if reboot is required.\n"
      "```\n"
      "# if [[ $(auditctl -s | grep \"enabled\") =~ \"2\" ]]; then printf \"Reboot\""
      "required to load rules\\\\n\"; fi\n"
      "```\n"
      "32 Bit systems\n"
      "Follow the same procedures as for 64 bit systems and ignore any entries with b64."
    cis_benchmark: {
      profile_level: 2
      severity: LOW
    }
    scan_instructions:
      "scan_type_specific:{"
      "    instance_scanning:{"
      "        check_alternatives:{"
      "            file_checks:{"
      "                files_to_check:{single_file:{path: \"/etc/audit/audit.rules\"}}"
      "                content_entry:{"
      "                    match_type: ALL_MATCH_ANY_ORDER"
      "                    match_criteria:{"
      "                        filter_regex: \".*/usr/bin/chacl.*\""
      "                        expected_regex: \"^\\\\s*-a\\\\s*always,exit\\\\s*-F\\\\s*path=/usr/bin/chacl\\\\s*-F\\\\s*perm=x\\\\s*-F\\\\s*auid>=1000\\\\s*-F\\\\s*auid!=(unset|-1|4294967295)\\\\s*(\\\\s*(-F\\\\s*key=|-k))\\\\s*[!-~]*\\\\s*$\""
      "                    }"
      "                }"
      "            }"
      "        }"
      "    }"
      "    image_scanning:{"
      "        check_alternatives:{"
      "            file_checks:{"
      "                files_to_check:{"
      "                    files_in_dir:{"
      "                        dir_path:\"/etc/audit/rules.d\""
      "                        recursive: true"
      "                        files_only: true"
      "                        filename_regex: \".*\\\\.rules\""
      "                    }"
      "                }"
      "                content_entry:{"
      "                    match_type: ALL_MATCH_ANY_ORDER"
      "                    match_criteria:{"
      "                        filter_regex: \".*/usr/bin/chacl.*\""
      "                        expected_regex: \"^\\\\s*-a\\\\s*always,exit\\\\s*-F\\\\s*path=/usr/bin/chacl\\\\s*-F\\\\s*perm=x\\\\s*-F\\\\s*auid>=1000\\\\s*-F\\\\s*auid!=(unset|-1|4294967295)\\\\s*(\\\\s*(-F\\\\s*key=|-k))\\\\s*[!-~]*\\\\s*$\""
      "                    }"
      "                }"
      "            }"
      "        }"
      "    }"
      "}"
  }
}
benchmark_configs: {
  id: "attempts-to-use-setfacl-recorded"
  compliance_note: {
    version: { cpe_uri: "cpe:/o:debian:ubuntu_linux:22.04" version: "2.0.0" benchmark_document: "CIS Ubuntu 22.04" }
    version: { cpe_uri: "cpe:/o:debian:debian_linux:12.0" version: "1.1.0" benchmark_document: "CIS Debian Linux 12" }
    title: "Ensure successful and unsuccessful attempts to use the setfacl command are recorded"
    description:
      "The operating system must generate audit records for successful/unsuccessful uses of the"
      "setfacl command"
    rationale:
      "Without generating audit records that are specific to the security and mission needs of the "
      "organization, it would be difficult to establish, correlate, and investigate the events relating "
      "to an incident or identify those responsible for one.\n"
      "Audit records can be generated from various components within the information system "
      "(e.g., module or policy filter)."
    remediation:
      "Create audit rules"
      "Edit or create a file in the /etc/audit/rules.d/ directory, ending in .rules extension, with "
      "the relevant rules to monitor successful and unsuccessful attempts to use the setfacl "
      "command.\n"
      "64 Bit systems\n"
      "Example:\n"
      "```\n"
      "# {\n"
      "UID_MIN=$(awk '/^\\\\s*UID_MIN/{print $2}' /etc/login.defs)"
      "[ -n \"${UID_MIN}\" ] && printf \""
      "-a always,exit -F path=/usr/bin/setfacl -F perm=x -F auid>=${UID_MIN} -F"
      "auid!=unset -k perm_chng"
      "\" >> /etc/audit/rules.d/50-priv_cmd.rules \\"
      "|| printf \"ERROR: Variable 'UID_MIN' is unset.\\\n\"\n"
      "}\n"
      "```\n"
      "Load audit rules\n"
      "Merge and load the rules into active configuration:\n"
      "```\n"
      "# augenrules --load\n"
      "```\n"
      "Check if reboot is required.\n"
      "```\n"
      "# if [[ $(auditctl -s | grep \"enabled\") =~ \"2\" ]]; then printf \"Reboot\""
      "required to load rules\\\\n\"; fi\n"
      "```\n"
      "32 Bit systems\n"
      "Follow the same procedures as for 64 bit systems and ignore any entries with b64."
    cis_benchmark: {
      profile_level: 2
      severity: LOW
    }
    scan_instructions:
      "scan_type_specific:{"
      "    instance_scanning:{"
      "        check_alternatives:{"
      "            file_checks:{"
      "                files_to_check:{single_file:{path: \"/etc/audit/audit.rules\"}}"
      "                content_entry:{"
      "                    match_type: ALL_MATCH_ANY_ORDER"
      "                    match_criteria:{"
      "                        filter_regex: \".*/usr/bin/setfacl.*\""
      "                        expected_regex: \"^\\\\s*-a\\\\s*always,exit\\\\s*-F\\\\s*path=/usr/bin/setfacl\\\\s*-F\\\\s*perm=x\\\\s*-F\\\\s*auid>=1000\\\\s*-F\\\\s*auid!=(unset|-1|4294967295)\\\\s*(\\\\s*(-F\\\\s*key=|-k))\\\\s*[!-~]*\\\\s*$\""
      "                    }"
      "                }"
      "            }"
      "        }"
      "    }"
      "    image_scanning:{"
      "        check_alternatives:{"
      "            file_checks:{"
      "                files_to_check:{"
      "                    files_in_dir:{"
      "                        dir_path:\"/etc/audit/rules.d\""
      "                        recursive: true"
      "                        files_only: true"
      "                        filename_regex: \".*\\\\.rules\""
      "                    }"
      "                }"
      "                content_entry:{"
      "                    match_type: ALL_MATCH_ANY_ORDER"
      "                    match_criteria:{"
      "                        filter_regex: \".*/usr/bin/setfacl.*\""
      "                        expected_regex: \"^\\\\s*-a\\\\s*always,exit\\\\s*-F\\\\s*path=/usr/bin/setfacl\\\\s*-F\\\\s*perm=x\\\\s*-F\\\\s*auid>=1000\\\\s*-F\\\\s*auid!=(unset|-1|4294967295)\\\\s*(\\\\s*(-F\\\\s*key=|-k))\\\\s*[!-~]*\\\\s*$\""
      "                    }"
      "                }"
      "            }"
      "        }"
      "    }"
      "}"
  }
}
benchmark_configs: {
  id: "attempts-to-use-chcon-recorded"
  compliance_note: {
    version: { cpe_uri: "cpe:/o:debian:ubuntu_linux:22.04" version: "2.0.0" benchmark_document: "CIS Ubuntu 22.04" }
    version: { cpe_uri: "cpe:/o:debian:debian_linux:12.0" version: "1.1.0" benchmark_document: "CIS Debian Linux 12" }
    title: "Ensure successful and unsuccessful attempts to use the chcon command are recorded"
    description:
      "The operating system must generate audit records for successful/unsuccessful uses of the "
      "chcon command."
    rationale:
      "Without generating audit records that are specific to the security and mission needs of the "
      "organization, it would be difficult to establish, correlate, and investigate the events relating "
      "to an incident or identify those responsible for one.\n"
      "Audit records can be generated from various components within the information system "
      "(e.g., module or policy filter)."
    remediation:
      "Create audit rules\n"
      "Edit or create a file in the /etc/audit/rules.d/ directory, ending in .rules extension, with "
      "the relevant rules to monitor successful and unsuccessful attempts to use the chcon "
      "command.\n"
      "64 Bit systems\n"
      "Example:\n"
      "```\n"
      "# {\n"
      "UID_MIN=$(awk '/^\\\\s*UID_MIN/{print $2}' /etc/login.defs)"
      "[ -n \"${UID_MIN}\" ] && printf \""
      "-a always,exit -F path=/usr/bin/chcon -F perm=x -F auid>=${UID_MIN} -F "
      "auid!=unset -k perm_chng"
      "\" >> /etc/audit/rules.d/50-perm_chng.rules \ \n"
      "|| printf \"ERROR: Variable 'UID_MIN' is unset.\\\n\"\n"
      "}\n"
      "```\n"
      "Load audit rules\n"
      "Merge and load the rules into active configuration:\n"
      "```\n"
      "# augenrules --load\n"
      "```\n"
      "Check if reboot is required.\n"
      "```\n"
      "# if [[ $(auditctl -s | grep \"enabled\") =~ \"2\" ]]; then printf \"Reboot\" "
      "required to load rules\\\\n\"; fi\n"
      "```\n"
      "32 Bit systems\n"
      "Follow the same procedures as for 64 bit systems and ignore any entries with b64."
    cis_benchmark: {
      profile_level: 2
      severity: LOW
    }
    scan_instructions:
      "scan_type_specific:{"
      "    instance_scanning:{"
      "        check_alternatives:{"
      "            file_checks:{"
      "                files_to_check:{single_file:{path: \"/etc/audit/audit.rules\"}}"
      "                content_entry:{"
      "                    match_type: ALL_MATCH_ANY_ORDER"
      "                    match_criteria:{"
      "                        filter_regex: \".*/usr/bin/chcon.*\""
      "                        expected_regex: \"^\\\\s*-a\\\\s*always,exit\\\\s*-F\\\\s*path=/usr/bin/chcon\\\\s*-F\\\\s*perm=x\\\\s*-F\\\\s*auid>=1000\\\\s*-F\\\\s*auid!=(unset|-1|4294967295)\\\\s*(\\\\s*(-F\\\\s*key=|-k))\\\\s*[!-~]*\\\\s*$\""
      "                    }"
      "                }"
      "            }"
      "        }"
      "    }"
      "    image_scanning:{"
      "        check_alternatives:{"
      "            file_checks:{"
      "                files_to_check:{"
      "                    files_in_dir:{"
      "                        dir_path:\"/etc/audit/rules.d\""
      "                        recursive: true"
      "                        files_only: true"
      "                        filename_regex: \".*\\\\.rules\""
      "                    }"
      "                }"
      "                content_entry:{"
      "                    match_type: ALL_MATCH_ANY_ORDER"
      "                    match_criteria:{"
      "                        filter_regex: \".*/usr/bin/chcon.*\""
      "                        expected_regex: \"^\\\\s*-a\\\\s*always,exit\\\\s*-F\\\\s*path=/usr/bin/chcon\\\\s*-F\\\\s*perm=x\\\\s*-F\\\\s*auid>=1000\\\\s*-F\\\\s*auid!=(unset|-1|4294967295)\\\\s*(\\\\s*(-F\\\\s*key=|-k))\\\\s*[!-~]*\\\\s*$\""
      "                    }"
      "                }"
      "            }"
      "        }"
      "    }"
      "}"
  }
}
benchmark_configs: {
  id: "unsuccessful-file-access-attempts-collected"
  compliance_note: {
    version: { cpe_uri: "cpe:/o:debian:ubuntu_linux:22.04" version: "2.0.0" benchmark_document: "CIS Ubuntu 22.04" }
    version: { cpe_uri: "cpe:/o:debian:debian_linux:12.0" version: "1.1.0" benchmark_document: "CIS Debian Linux 12" }
    title: "Ensure unsuccessful file access attempts are collected"
    description:
      "Monitor for unsuccessful attempts to access files. The following parameters are associated "
      "with system calls that control files:\n"
      "creation - creat\n"
      "opening - open , openat\n"
      "truncation - truncate , ftruncate\n"
      "An audit log record will only be written if all of the following criteria is met for the user "
      "when trying to access a file:\n"
      "a non-privileged user (auid>=UID_MIN)\n"
      "is not a Daemon event (auid=4294967295/unset/-1)\n"
      "if the system call returned EACCES (permission denied) or EPERM (some other "
      "permanent error associated with the specific system call)"
    rationale:
      "Failed attempts to open, create or truncate files could be an indication that an individual or "
      "process is trying to gain unauthorized access to the system."
    remediation:
      "Create audit rules\n"
      "Edit or create a file in the /etc/audit/rules.d/ directory, ending in .rules extension, with "
      "the relevant rules to monitor unsuccessful file access attempts.\n"
      "64 Bit systems\n"
      "Example:\n"
      "```\n"
      "# {\n"
      "UID_MIN=$(awk '/^\\\\s*UID_MIN/{print $2}' /etc/login.defs)\n"
      "[ -n \"${UID_MIN}\" ] && printf \"\n"
      "-a always,exit -F arch=b64 -S creat,open,openat,truncate,ftruncate -F exit=-"
      "EACCES -F auid>=${UID_MIN} -F auid!=unset -k access\n"
      "-a always,exit -F arch=b64 -S creat,open,openat,truncate,ftruncate -F exit=-"
      "EPERM -F auid>=${UID_MIN} -F auid!=unset -k access\n"
      "-a always,exit -F arch=b32 -S creat,open,openat,truncate,ftruncate -F exit=-"
      "EACCES -F auid>=${UID_MIN} -F auid!=unset -k access\n"
      "-a always,exit -F arch=b32 -S creat,open,openat,truncate,ftruncate -F exit=-"
      "EPERM -F auid>=${UID_MIN} -F auid!=unset -k access\n"
      "\" >> /etc/audit/rules.d/50-access.rules \\\n"
      "|| printf \"ERROR: Variable 'UID_MIN' is unset.\\\\n\"\n"
      "}\n"
      "```\n"
      "Load audit rules\n"
      "Merge and load the rules into active configuration:\n"
      "```\n"
      "# augenrules --load\n"
      "```\n"
      "Check if reboot is required.\n"
      "```\n"
      "# if [[ $(auditctl -s | grep \"enabled\") =~ \"2\" ]]; then printf \"Reboot "
      "required to load rules\n\"; fi\n"
      "```\n"
      "32 Bit systems\n"
      "Follow the same procedures as for 64 bit systems and ignore any entries with b64."
    cis_benchmark: {
      profile_level: 2
      severity: LOW
    }
    scan_instructions:
      "scan_type_specific:{"
      "    instance_scanning:{"
      "        check_alternatives:{"
      "            file_checks:{"
      "                files_to_check:{single_file:{path:\"/etc/login.defs\"}}"
      "                content_entry:{"
      "                    match_type: ALL_MATCH_ANY_ORDER"
      "                    match_criteria:{"
      "                        filter_regex: \"UID_MIN.*\""
      "                        expected_regex: \"UID_MIN\\\\s*1000\\\\s*\""
      "                    }"
      "                }"
      "                non_compliance_msg: \"If UID_MIN is set to a value different from 1000 in /etc/login.defs, this check will fail.\""
      "                file_display_command: \"grep '^UID_MIN' /etc/login.defs\""
      "            }"
      "            file_checks:{"
      "                files_to_check:{single_file:{path: \"/etc/audit/audit.rules\"}}"
      "                content_entry:{"
      "                    match_type: ALL_MATCH_ANY_ORDER"
      "                    match_criteria:{"
      "                        filter_regex: \".*b32.*creat.*\""
      "                        expected_regex: \"\\\\s*-a\\\\s*always,exit\\\\s*-F\\\\s*arch=b32\\\\s*-S\\\\s*([a-zA-Z_]+,)*creat(,[a-zA-Z_]+)*\\\\s*-F\\\\s*exit=-(EACCES|EPERM)\\\\s*-F\\\\s*auid>=1000\\\\s*-F\\\\s*auid!=(unset|-1|4294967295)\\\\s*(-F\\\\s*key=|-k)\\\\s*[!-~]*\\\\s*\""
      "                    }"
      "                    match_criteria:{"
      "                        filter_regex: \".*b32.*open.*\""
      "                        expected_regex: \"\\\\s*-a\\\\s*always,exit\\\\s*-F\\\\s*arch=b32\\\\s*-S\\\\s*([a-zA-Z_]+,)*open(,[a-zA-Z_]+)*\\\\s*-F\\\\s*exit=-(EACCES|EPERM)\\\\s*-F\\\\s*auid>=1000\\\\s*-F\\\\s*auid!=(unset|-1|4294967295)\\\\s*(-F\\\\s*key=|-k)\\\\s*[!-~]*\\\\s*\""
      "                    }"
      "                    match_criteria:{"
      "                        filter_regex: \".*b32.*openat.*\""
      "                        expected_regex: \"\\\\s*-a\\\\s*always,exit\\\\s*-F\\\\s*arch=b32\\\\s*-S\\\\s*([a-zA-Z_]+,)*openat(,[a-zA-Z_]+)*\\\\s*-F\\\\s*exit=-(EACCES|EPERM)\\\\s*-F\\\\s*auid>=1000\\\\s*-F\\\\s*auid!=(unset|-1|4294967295)\\\\s*(-F\\\\s*key=|-k)\\\\s*[!-~]*\\\\s*\""
      "                    }"
      "                    match_criteria:{"
      "                        filter_regex: \".*b32.*truncate.*\""
      "                        expected_regex: \"\\\\s*-a\\\\s*always,exit\\\\s*-F\\\\s*arch=b32\\\\s*-S\\\\s*([a-zA-Z_]+,)*truncate(,[a-zA-Z_]+)*\\\\s*-F\\\\s*exit=-(EACCES|EPERM)\\\\s*-F\\\\s*auid>=1000\\\\s*-F\\\\s*auid!=(unset|-1|4294967295)\\\\s*(-F\\\\s*key=|-k)\\\\s*[!-~]*\\\\s*\""
      "                    }"
      "                    match_criteria:{"
      "                        filter_regex: \".*b32.*ftruncate.*\""
      "                        expected_regex: \"\\\\s*-a\\\\s*always,exit\\\\s*-F\\\\s*arch=b32\\\\s*-S\\\\s*([a-zA-Z_]+,)*ftruncate(,[a-zA-Z_]+)*\\\\s*-F\\\\s*exit=-(EACCES|EPERM)\\\\s*-F\\\\s*auid>=1000\\\\s*-F\\\\s*auid!=(unset|-1|4294967295)\\\\s*(-F\\\\s*key=|-k)\\\\s*[!-~]*\\\\s*\""
      "                    }"
      "                }"
      "            }"
      "        }"
      "        check_alternatives:{"
      "            file_checks:{"
      "                files_to_check:{single_file:{path:\"/etc/login.defs\"}}"
      "                content_entry:{"
      "                    match_type: ALL_MATCH_ANY_ORDER"
      "                    match_criteria:{"
      "                        filter_regex: \"UID_MIN.*\""
      "                        expected_regex: \"UID_MIN\\\\s*1000\\\\s*\""
      "                    }"
      "                }"
      "                non_compliance_msg: \"If UID_MIN is set to a value different from 1000 in /etc/login.defs, this check will fail.\""
      "                file_display_command: \"grep '^UID_MIN' /etc/login.defs\""
      "            }"
      "            file_checks:{"
      "                files_to_check:{single_file:{path:\"/proc/cpuinfo\"}}"
      "                content_entry:{"
      "                    match_type: ALL_MATCH_ANY_ORDER"
      "                    match_criteria:{"
      "                        filter_regex: \"flags\\\\s*:.*\""
      "                        expected_regex: \".*\\\\slm\\\\s.*\""
      "                    }"
      "                }"
      "            }"
      "            file_checks:{"
      "                files_to_check:{single_file:{path: \"/etc/audit/audit.rules\"}}"
      "                content_entry:{"
      "                    match_type: ALL_MATCH_ANY_ORDER"
      "                    match_criteria:{"
      "                        filter_regex: \".*b32.*creat.*\""
      "                        expected_regex: \"\\\\s*-a\\\\s*always,exit\\\\s*-F\\\\s*arch=b32\\\\s*-S\\\\s*([a-zA-Z_]+,)*creat(,[a-zA-Z_]+)*\\\\s*-F\\\\s*exit=-(EACCES|EPERM)\\\\s*-F\\\\s*auid>=1000\\\\s*-F\\\\s*auid!=(unset|-1|4294967295)\\\\s*(-F\\\\s*key=|-k)\\\\s*[!-~]*\\\\s*\""
      "                    }"
      "                    match_criteria:{"
      "                        filter_regex: \".*b32.*open.*\""
      "                        expected_regex: \"\\\\s*-a\\\\s*always,exit\\\\s*-F\\\\s*arch=b32\\\\s*-S\\\\s*([a-zA-Z_]+,)*open(,[a-zA-Z_]+)*\\\\s*-F\\\\s*exit=-(EACCES|EPERM)\\\\s*-F\\\\s*auid>=1000\\\\s*-F\\\\s*auid!=(unset|-1|4294967295)\\\\s*(-F\\\\s*key=|-k)\\\\s*[!-~]*\\\\s*\""
      "                    }"
      "                    match_criteria:{"
      "                        filter_regex: \".*b32.*openat.*\""
      "                        expected_regex: \"\\\\s*-a\\\\s*always,exit\\\\s*-F\\\\s*arch=b32\\\\s*-S\\\\s*([a-zA-Z_]+,)*openat(,[a-zA-Z_]+)*\\\\s*-F\\\\s*exit=-(EACCES|EPERM)\\\\s*-F\\\\s*auid>=1000\\\\s*-F\\\\s*auid!=(unset|-1|4294967295)\\\\s*(-F\\\\s*key=|-k)\\\\s*[!-~]*\\\\s*\""
      "                    }"
      "                    match_criteria:{"
      "                        filter_regex: \".*b32.*truncate.*\""
      "                        expected_regex: \"\\\\s*-a\\\\s*always,exit\\\\s*-F\\\\s*arch=b32\\\\s*-S\\\\s*([a-zA-Z_]+,)*truncate(,[a-zA-Z_]+)*\\\\s*-F\\\\s*exit=-(EACCES|EPERM)\\\\s*-F\\\\s*auid>=1000\\\\s*-F\\\\s*auid!=(unset|-1|4294967295)\\\\s*(-F\\\\s*key=|-k)\\\\s*[!-~]*\\\\s*\""
      "                    }"
      "                    match_criteria:{"
      "                        filter_regex: \".*b32.*ftruncate.*\""
      "                        expected_regex: \"\\\\s*-a\\\\s*always,exit\\\\s*-F\\\\s*arch=b32\\\\s*-S\\\\s*([a-zA-Z_]+,)*ftruncate(,[a-zA-Z_]+)*\\\\s*-F\\\\s*exit=-(EACCES|EPERM)\\\\s*-F\\\\s*auid>=1000\\\\s*-F\\\\s*auid!=(unset|-1|4294967295)\\\\s*(-F\\\\s*key=|-k)\\\\s*[!-~]*\\\\s*\""
      "                    }"
      "                    match_criteria:{"
      "                        filter_regex: \".*b64.*creat.*\""
      "                        expected_regex: \"\\\\s*-a\\\\s*always,exit\\\\s*-F\\\\s*arch=b64\\\\s*-S\\\\s*([a-zA-Z_]+,)*creat(,[a-zA-Z_]+)*\\\\s*-F\\\\s*exit=-(EACCES|EPERM)\\\\s*-F\\\\s*auid>=1000\\\\s*-F\\\\s*auid!=(unset|-1|4294967295)\\\\s*(-F\\\\s*key=|-k)\\\\s*[!-~]*\\\\s*\""
      "                    }"
      "                    match_criteria:{"
      "                        filter_regex: \".*b64.*open.*\""
      "                        expected_regex: \"\\\\s*-a\\\\s*always,exit\\\\s*-F\\\\s*arch=b64\\\\s*-S\\\\s*([a-zA-Z_]+,)*open(,[a-zA-Z_]+)*\\\\s*-F\\\\s*exit=-(EACCES|EPERM)\\\\s*-F\\\\s*auid>=1000\\\\s*-F\\\\s*auid!=(unset|-1|4294967295)\\\\s*(-F\\\\s*key=|-k)\\\\s*[!-~]*\\\\s*\""
      "                    }"
      "                    match_criteria:{"
      "                        filter_regex: \".*b64.*openat.*\""
      "                        expected_regex: \"\\\\s*-a\\\\s*always,exit\\\\s*-F\\\\s*arch=b64\\\\s*-S\\\\s*([a-zA-Z_]+,)*openat(,[a-zA-Z_]+)*\\\\s*-F\\\\s*exit=-(EACCES|EPERM)\\\\s*-F\\\\s*auid>=1000\\\\s*-F\\\\s*auid!=(unset|-1|4294967295)\\\\s*(-F\\\\s*key=|-k)\\\\s*[!-~]*\\\\s*\""
      "                    }"
      "                    match_criteria:{"
      "                        filter_regex: \".*b64.*truncate.*\""
      "                        expected_regex: \"\\\\s*-a\\\\s*always,exit\\\\s*-F\\\\s*arch=b64\\\\s*-S\\\\s*([a-zA-Z_]+,)*truncate(,[a-zA-Z_]+)*\\\\s*-F\\\\s*exit=-(EACCES|EPERM)\\\\s*-F\\\\s*auid>=1000\\\\s*-F\\\\s*auid!=(unset|-1|4294967295)\\\\s*(-F\\\\s*key=|-k)\\\\s*[!-~]*\\\\s*\""
      "                    }"
      "                    match_criteria:{"
      "                        filter_regex: \".*b64.*ftruncate.*\""
      "                        expected_regex: \"\\\\s*-a\\\\s*always,exit\\\\s*-F\\\\s*arch=b64\\\\s*-S\\\\s*([a-zA-Z_]+,)*ftruncate(,[a-zA-Z_]+)*\\\\s*-F\\\\s*exit=-(EACCES|EPERM)\\\\s*-F\\\\s*auid>=1000\\\\s*-F\\\\s*auid!=(unset|-1|4294967295)\\\\s*(-F\\\\s*key=|-k)\\\\s*[!-~]*\\\\s*\""
      "                    }"
      "                }"
      "            }"
      "        }"
      "    }"
      "    image_scanning:{"
      "        check_alternatives:{"
      "            file_checks:{"
      "                files_to_check:{single_file:{path:\"/etc/login.defs\"}}"
      "                content_entry:{"
      "                    match_type: ALL_MATCH_ANY_ORDER"
      "                    match_criteria:{"
      "                        filter_regex: \"UID_MIN.*\""
      "                        expected_regex: \"UID_MIN\\\\s*1000\\\\s*\""
      "                    }"
      "                }"
      "                non_compliance_msg: \"If UID_MIN is set to a value different from 1000 in /etc/login.defs, this check will fail.\""
      "                file_display_command: \"grep '^UID_MIN' /etc/login.defs\""
      "            }"
      "            file_checks:{"
      "                files_to_check:{files_in_dir:{"
      "                    dir_path:\"/etc/audit/rules.d\""
      "                    recursive: true"
      "                    files_only: true"
      "                    filename_regex: \".*\\\\.rules\""
      "                }}"
      "                content_entry:{"
      "                    match_type: ALL_MATCH_ANY_ORDER"
      "                    match_criteria:{"
      "                        filter_regex: \".*creat.*\""
      "                        expected_regex: \"\\\\s*-a\\\\s*always,exit\\\\s*-F\\\\s*arch=b[2346]{2}\\\\s*-S\\\\s*([a-zA-Z_]+,)*creat(,[a-zA-Z_]+)*\\\\s*-F\\\\s*exit=-(EACCES|EPERM)\\\\s*-F\\\\s*auid>=1000\\\\s*-F\\\\s*auid!=(unset|-1|4294967295)\\\\s*(-F\\\\s*key=|-k)\\\\s*[!-~]*\\\\s*\""
      "                    }"
      "                    match_criteria:{"
      "                        filter_regex: \".*open.*\""
      "                        expected_regex: \"\\\\s*-a\\\\s*always,exit\\\\s*-F\\\\s*arch=b[2346]{2}\\\\s*-S\\\\s*([a-zA-Z_]+,)*open(,[a-zA-Z_]+)*\\\\s*-F\\\\s*exit=-(EACCES|EPERM)\\\\s*-F\\\\s*auid>=1000\\\\s*-F\\\\s*auid!=(unset|-1|4294967295)\\\\s*(-F\\\\s*key=|-k)\\\\s*[!-~]*\\\\s*\""
      "                    }"
      "                    match_criteria:{"
      "                        filter_regex: \".*openat.*\""
      "                        expected_regex: \"\\\\s*-a\\\\s*always,exit\\\\s*-F\\\\s*arch=b[2346]{2}\\\\s*-S\\\\s*([a-zA-Z_]+,)*openat(,[a-zA-Z_]+)*\\\\s*-F\\\\s*exit=-(EACCES|EPERM)\\\\s*-F\\\\s*auid>=1000\\\\s*-F\\\\s*auid!=(unset|-1|4294967295)\\\\s*(-F\\\\s*key=|-k)\\\\s*[!-~]*\\\\s*\""
      "                    }"
      "                    match_criteria:{"
      "                        filter_regex: \".*truncate.*\""
      "                        expected_regex: \"\\\\s*-a\\\\s*always,exit\\\\s*-F\\\\s*arch=b[2346]{2}\\\\s*-S\\\\s*([a-zA-Z_]+,)*truncate(,[a-zA-Z_]+)*\\\\s*-F\\\\s*exit=-(EACCES|EPERM)\\\\s*-F\\\\s*auid>=1000\\\\s*-F\\\\s*auid!=(unset|-1|4294967295)\\\\s*(-F\\\\s*key=|-k)\\\\s*[!-~]*\\\\s*\""
      "                    }"
      "                    match_criteria:{"
      "                        filter_regex: \".*ftruncate.*\""
      "                        expected_regex: \"\\\\s*-a\\\\s*always,exit\\\\s*-F\\\\s*arch=b[2346]{2}\\\\s*-S\\\\s*([a-zA-Z_]+,)*ftruncate(,[a-zA-Z_]+)*\\\\s*-F\\\\s*exit=-(EACCES|EPERM)\\\\s*-F\\\\s*auid>=1000\\\\s*-F\\\\s*auid!=(unset|-1|4294967295)\\\\s*(-F\\\\s*key=|-k)\\\\s*[!-~]*\\\\s*\""
      "                    }"
      "                }"
      "            }"
      "        }"
      "    }"
      "}"
  }
}
benchmark_configs: {
  id: "actions-as-another-user-logged"
  compliance_note: {
    version: { cpe_uri: "cpe:/o:debian:ubuntu_linux:22.04" version: "2.0.0" benchmark_document: "CIS Ubuntu 22.04" }
    version: { cpe_uri: "cpe:/o:debian:debian_linux:12.0" version: "1.1.0" benchmark_document: "CIS Debian Linux 12" }
    title: "Ensure actions as another user are always logged"
    description:
      "sudo provides users with temporary elevated privileges to perform operations, either as "
      "the superuser or another user. "
    rationale:
      "Creating an audit log of users with temporary elevated privileges and the operation(s) they "
      "performed is essential to reporting. Administrators will want to correlate the events "
      "written to the audit trail with the records written to sudo's logfile to verify if unauthorized "
      "commands have been executed."
    remediation:
      "Create audit rules\n"
      "Edit or create a file in the /etc/audit/rules.d/ directory, ending in .rules extension, with "
      "the relevant rules to monitor elevated privileges.\n"
      "64 Bit systems\n"
      "Example:\n"
      "```\n"
      "# printf \"\n"
      "-a always,exit -F arch=b64 -C euid!=uid -F auid!=unset -S execve -k "
      "user_emulation\n"
      "-a always,exit -F arch=b32 -C euid!=uid -F auid!=unset -S execve -k "
      "user_emulation\n"
      "\" >> /etc/audit/rules.d/50-user_emulation.rules\n"
      "```\n"
      "Load audit rules\n"
      "Merge and load the rules into active configuration:\n"
      "```\n"
      "# augenrules --load\n"
      "```\n"
      "Check if reboot is required.\n"
      "```\n"
      "# if [[ $(auditctl -s | grep \"enabled\") =~ \"2\" ]]; then printf \"Reboot "
      "required to load rules\\\\n\"; fi\n"
      "```\n"
      "32 Bit systems\n"
      "Follow the same procedures as for 64 bit systems and ignore any entries with b64."
    cis_benchmark: {
      profile_level: 2
      severity: LOW
    }
    scan_instructions:
      "scan_type_specific:{"
      "    instance_scanning:{"
      "        check_alternatives:{"
      "            file_checks:{"
      "                files_to_check:{single_file:{path: \"/etc/audit/audit.rules\"}}"
      "                content_entry:{"
      "                    match_type: ALL_MATCH_ANY_ORDER"
      "                    match_criteria:{"
      "                        filter_regex: \".*(e)?uid\\\\!=(e?)uid.*\""
      "                        expected_regex: \"\\\\s*-a\\\\s*always,exit\\\\s*-F\\\\s*arch=b[2346]{2}\\\\s*-F\\\\s*auid\\\\!=(unset|-1|4294967295)\\\\s*-C\\\\s*(euid\\\\!=uid|uid\\\\!=euid)\\\\s*-S\\\\s*execve\\\\s*(-F\\\\s*key=|-k)\\\\s*[!-~]*\\\\s*\""
      "                    }"
      "                }"
      "            }"
      "        }"
      "    }"
      "    image_scanning:{"
      "        check_alternatives:{"
      "            file_checks:{"
      "                files_to_check:{"
      "                    files_in_dir:{"
      "                        dir_path:\"/etc/audit/rules.d\""
      "                        recursive: true"
      "                        files_only: true"
      "                        filename_regex: \".*\\\\.rules\""
      "                    }"
      "                }"
      "                content_entry:{"
      "                    match_type: ALL_MATCH_ANY_ORDER"
      "                    match_criteria:{"
      "                        filter_regex: \".*(e)?uid\\\\!=(e?)uid.*\""
      "                        expected_regex: \"\\\\s*-a\\\\s*always,exit\\\\s*-F\\\\s*arch=b[2346]{2}\\\\s*-F\\\\s*auid\\\\!=(unset|-1|4294967295)\\\\s*-C\\\\s*(euid\\\\!=uid|uid\\\\!=euid)\\\\s*-S\\\\s*execve\\\\s*(-F\\\\s*key=|-k)\\\\s*[!-~]*\\\\s*\""
      "                    }"
      "                }"
      "            }"
      "        }"
      "    }"
      "}"
  }
}
benchmark_configs: {
  id: "journald-service-enabled"
  compliance_note: {
    version: { cpe_uri: "cpe:/o:debian:ubuntu_linux:22.04" version: "2.0.0" benchmark_document: "CIS Ubuntu 22.04" }
    version: { cpe_uri: "cpe:/o:debian:debian_linux:12.0" version: "1.1.0" benchmark_document: "CIS Debian Linux 12" }
    title: "Ensure journald service is enabled"
    description: 
      "Ensure that the systemd-journald service is enabled and running to allow capturing of logging events."
    rationale: 
      "If the systemd-journald service is not enabled or running, the system will not capture logging events, which is critical for monitoring and auditing."
    remediation: 
      "Investigate why systemd-journald is not active. Ensure it is configured correctly and not masked. By default, systemd-journald does not have an [Install] section, so its activation depends on other unit files."
    cis_benchmark: {
      profile_level: 1
      severity: LOW
    }
    scan_instructions: 
      "generic:{check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{single_file:{path:\"/lib/systemd/system/systemd-journald.service\"}}"
      "      existence:{should_exist:true}"
      "    }"
      "    file_checks:{"
      "      files_to_check:{single_file:{path:\"/lib/systemd/system/systemd-journald.socket\"}}"
      "      existence:{should_exist:true}"
      "    }"
      "    file_checks:{"
      "      files_to_check:{single_file:{path:\"/etc/systemd/system/systemd-journald.service\"}}"
      "      existence:{should_exist:false}"
      "    }"
      "    file_checks:{"
      "      files_to_check:{single_file:{path:\"/etc/systemd/system/systemd-journald.socket\"}}"
      "      existence:{should_exist:false}"
      "    }"
      "}}"
  }
}

benchmark_configs: {
  id: "nftables-is-installed"
  compliance_note: {
    version: { cpe_uri: "cpe:/o:debian:ubuntu_linux:22.04" version: "2.0.0" benchmark_document: "CIS Ubuntu 22.04" }
    title: "Ensure nftables is installed"
    description:
      "nftables provides a new in-kernel packet classification framework that is based on a "
      "network-specific Virtual Machine (VM) and a new nft userspace command line tool.\n"
      "nftables reuses the existing Netfilter subsystems such as the existing hook infrastructure, "
      "the connection tracking system, NAT, userspace queuing and logging subsystem.\n"
      "Note:\n"
      "nftables is available in Linux kernel 3.13 and newer.\n"
      "Only one firewall utility should be installed and configured."
    rationale:
      "nftables is a subsystem of the Linux kernel that can protect against threats originating from "
      "within a corporate network to include malicious mobile code and poorly configured "
      "software on a host.\n"
      "Impact:\n"
      "Changing firewall settings while connected over the network can result in being locked out "
      "of the system."
    remediation:
      "Run the following command to install nftables\n"
      "# yum install nftables"
    cis_benchmark: {
      profile_level: 1
      severity: LOW
    }
    scan_instructions:
      "generic:{"
      "  check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{single_file:{path:\"/bin/nftables\"}}"
      "      existence:{should_exist:true}"
      "    }"
      "  }"
      "  check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{single_file:{path:\"/sbin/nftables\"}}"
      "      existence:{should_exist:true}"
      "    }"
      "  }"
      "  check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{single_file:{path:\"/usr/bin/nftables\"}}"
      "      existence:{should_exist:true}"
      "    }"
      "  }"
      "  check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{single_file:{path:\"/usr/sbin/nftables\"}}"
      "      existence:{should_exist:true}"
      "    }"
      "  }"
      "}"
  }
}
benchmark_configs: {
  id: "nftables-not-installed-with-iptables"
  compliance_note: {
    version: { cpe_uri: "cpe:/o:debian:ubuntu_linux:22.04" version: "2.0.0" benchmark_document: "CIS Ubuntu 22.04" }
    title: "Ensure nftables is not installed with iptables"
    description:
      "nftables is a subsystem of the Linux kernel providing filtering and classification of network "
      "packets/datagrams/frames and is the successor to iptables."
    rationale: "Running both iptables and nftables may lead to conflict."
    remediation:
      "Run the following command to remove nftables:\n"
      "# apt purge nftables"
    cis_benchmark: {
      profile_level: 1
      severity: LOW
    }
    scan_instructions:
      "generic:{"
      " check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{files_in_dir:{"
      "         dir_path:\"/etc/systemd/system/\""
      "        recursive: true"
      "        filename_regex: \"nftables.service\""
      "       }"
      "      }"
      "      existence:{should_exist:false}"
      "    }"
      " }"
      " check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{files_in_dir:{"
      "         dir_path:\"/etc/systemd/system/\""
      "        recursive: true"
      "        filename_regex: \"nftables.service\""
      "       }"
      "      }"
      "      existence:{should_exist:true}"
      "    }"
      "    file_checks:{"
      "      files_to_check:{files_in_dir:{"
      "         dir_path:\"/etc/systemd/system/\""
      "        recursive: true"
      "        filename_regex: \"iptables.service\""
      "       }"
      "      }"
      "      existence:{should_exist:false}"
      "    }"
      " }"
      "}"
  }
}

benchmark_configs: {
  id: "ensure-gdm-removed"
  compliance_note: {
    version: { cpe_uri: "cpe:/o:debian:ubuntu_linux:22.04" version: "2.0.0" benchmark_document: "CIS Ubuntu 22.04" }
    title: "Ensure GDM is removed"
    description: 
      "The GNOME Display Manager (GDM) is a program that manages graphical display servers and handles graphical user logins. If a Graphical User Interface (GUI) is not required, it should be removed to reduce the attack surface of the system."
    rationale: 
      "Removing the GNOME Display manager will remove the Graphical User Interface (GUI) from the system."
    remediation: 
      "Run the following commands to uninstall gdm3 and remove unused dependencies:\n"
      "```\n"
      "# apt purge gdm3\n"
      "# apt autoremove gdm3\n"
      "```\n"
    cis_benchmark: {
      profile_level: 2
      severity: MEDIUM
    }
    scan_instructions: 
      "generic:{check_alternatives:{"
      "  file_checks:{"
      "    files_to_check:{single_file:{path:\"/var/lib/dpkg/status\"}}"
      "    content_entry:{"
      "      match_type: NONE_MATCH"
      "      match_criteria: {"
      "        filter_regex: \"Package: gdm3\""
      "        expected_regex: \"Package: gdm3\""
      "      }"
      "    }"
      "  }"
      "}}"
  }
}
benchmark_configs: {
  id: "ensure-gdm-screen-locks-when-user-is-idle"
  compliance_note: {
    version: { cpe_uri: "cpe:/o:debian:ubuntu_linux:22.04" version: "2.0.0" benchmark_document: "CIS Ubuntu 22.04" }
    version: { cpe_uri: "cpe:/o:debian:debian_linux:12.0" version: "1.1.0" benchmark_document: "CIS Debian Linux 12" }
    title: "Ensure GDM screen locks when the user is idle"
    description: 
      "GNOME Desktop Manager can make the screen lock automatically whenever the user is idle for some amount of time."
    rationale: 
      "Setting a lock-out value reduces the window of opportunity for unauthorized user access to another user's session that has been left unattended."
    remediation: 
      "Run the following commands to enable screen locks when the user is idle:\n"
      "```\n"
      "# gsettings set org.gnome.desktop.screensaver lock-delay 5\n"
      "# gsettings set org.gnome.desktop.session idle-delay 900\n"
      "```\n"
      "- OR1. Create or edit the user profile in the /etc/dconf/profile/ and verify it includes the following:\n"
      "  user-db:user\n"
      "  system-db:{NAME_OF_DCONF_DATABASE}\n"
      "Note: local is the name of a dconf database used in the examples.\n"
      "2. Create the directory /etc/dconf/db/local.d/ if it doesn't already exist:\n"
      "3. Create the key file /etc/dconf/db/local.d/00-screensaver to provide information for the local database:\n"
      "Example key file:\n"
      "```\n"
      "# Specify the dconf path\n"
      "[org/gnome/desktop/session]\n"
      "idle-delay=uint32 180\n"
      "[org/gnome/desktop/screensaver]\n"
      "lock-delay=uint32 0\n"
      "```\n"
      "4. Run the following command to update the system databases:\n"
      "# dconf update\n"
      "5. Users must log out and back in again before the system-wide settings take effect."
    cis_benchmark: {
      profile_level: 1
      severity: LOW
    }
    scan_instructions: 
      "generic:{check_alternatives:{"
      "  file_checks:{"
      "    files_to_check:{single_file:{path:\"/etc/dconf/db/local.d/00-screensaver\"}}"
      "    content_entry:{"
      "      match_type: ALL_MATCH_ANY_ORDER"
      "      match_criteria: {"
      "        filter_regex: \"idle-delay=uint32 180\""
      "        expected_regex: \"idle-delay=uint32 180\""
      "      }"
      "    }"
      "  }"
      "  file_checks:{"
      "    files_to_check:{single_file:{path:\"/etc/dconf/db/local.d/00-screensaver\"}}"
      "    content_entry:{"
      "      match_type: ALL_MATCH_ANY_ORDER"
      "      match_criteria: {"
      "        filter_regex: \"lock-delay=uint32 0\""
      "        expected_regex: \"lock-delay=uint32 0\""
      "      }"
      "    }"
      "  }"
      "}}"
  }
}
benchmark_configs: {
  id: "ensure-gdm-screen-locks-cannot-be-overridden"
  compliance_note: {
    version: { cpe_uri: "cpe:/o:debian:ubuntu_linux:22.04" version: "2.0.0" benchmark_document: "CIS Ubuntu 22.04" }
    title: "Ensure GDM screen locks cannot be overridden"
    version: { cpe_uri: "cpe:/o:debian:debian_linux:12.0" version: "1.1.0" benchmark_document: "CIS Debian Linux 12" }
    description:
      "GNOME Desktop Manager can lock down specific settings by using the lockdown mode in dconf to prevent users from changing specific settings."
    rationale:
      "Locking down settings prevents unauthorized changes to critical session lock settings, reducing the risk of unauthorized access."
    remediation:
      "1. To prevent the user from overriding these settings, create the file /etc/dconf/db/local.d/locks/screensaver with the following content:\n"
      "```\n"
      "# Lock desktop screensaver settings\n"
      "/org/gnome/desktop/session/idle-delay\n"
      "/org/gnome/desktop/screensaver/lock-delay\n"
      "```\n"
      "2. Update the system databases:\n"
      "```\n"
      "# dconf update\n"
      "```\n"
      "Note: Users must log out and back in again before the system-wide settings take effect."
    cis_benchmark: {
      profile_level: 1
      severity: MEDIUM
    }
    scan_instructions:
      "generic:{check_alternatives:{"
      "  file_checks:{"
      "    files_to_check:{single_file:{path:\"/etc/dconf/db/local.d/locks/screensaver\"}}"
      "    content_entry:{"
      "      match_type: ALL_MATCH_ANY_ORDER"
      "      match_criteria: {"
      "        filter_regex: \"/org/gnome/desktop/session/idle-delay\""
      "        expected_regex: \"/org/gnome/desktop/session/idle-delay\""
      "      }"
      "    }"
      "  }"
      "  file_checks:{"
      "    files_to_check:{single_file:{path:\"/etc/dconf/db/local.d/locks/screensaver\"}}"
      "    content_entry:{"
      "      match_type: ALL_MATCH_ANY_ORDER"
      "      match_criteria: {"
      "        filter_regex: \"/org/gnome/desktop/screensaver/lock-delay\""
      "        expected_regex: \"/org/gnome/desktop/screensaver/lock-delay\""
      "      }"
      "    }"
      "  }"
      "}}"
  }
}
benchmark_configs: {
  id: "ensure-gdm-autorun-never-enabled"
  compliance_note: {
    version: { cpe_uri: "cpe:/o:debian:ubuntu_linux:22.04" version: "2.0.0" benchmark_document: "CIS Ubuntu 22.04" }
    version: { cpe_uri: "cpe:/o:debian:debian_linux:12.0" version: "1.1.0" benchmark_document: "CIS Debian Linux 12" }
    title: "Ensure GDM autorun-never is enabled"
    description: 
      "The autorun-never setting allows the GNOME Desktop Display Manager to disable autorun through GDM."
    rationale: 
      "Malware on removable media may take advantage of Autorun features when the media is inserted into a system and executed."
    remediation: 
      "Run the following script to verify that autorun-never is set to true for GDM:\n"
      "```\n"
      "#!/usr/bin/env bash\n"
      "{\n"
      "# Check if GNOME Desktop Manager is installed. If package isn't installed, recommendation is Not Applicable\n"
      "# determine system's package manager\n"
      "if command -v dpkg-query &> /dev/null; then\n"
      "  l_pq=\"dpkg-query -s\"\n"
      "elif command -v rpm &> /dev/null; then\n"
      "  l_pq=\"rpm -q\"\n"
      "fi\n"
      "# Check if GDM is installed\n"
      "l_pcl=\"gdm gdm3\"\n"
      "for l_pn in $l_pcl; do\n"
      "  $l_pq \"$l_pn\" &> /dev/null && l_pkgoutput=\"$l_pkgoutput\\n - Package: \"$l_pn\" exists on the system\\n - checking configuration\"\n"
      "done\n"
      "# Check configuration (If applicable)\n"
      "if [ -n \"$l_pkgoutput\" ]; then\n"
      "  echo -e \"$l_pkgoutput\"\n"
      "  l_kfile=\"$(grep -Prils -- '^\\\\h*autorun-never\b' /etc/dconf/db/*.d)\"\n"
      "  if [ -f \"$l_kfile\" ]; then\n"
      "    l_gpname=\"$(awk -F/ '{split($(NF-1),a,\".\");print a[1]}' <<< \"$l_kfile\")\"\n"
      "  fi\n"
      "  if [ -n \"$l_gpname\" ]; then\n"
      "    l_gpdir=\"/etc/dconf/db/$l_gpname.d\"\n"
      "    if grep -Pq -- \"^\\\\h*system-db:$l_gpname\b\" /etc/dconf/profile/*;\n"
      "    then\n"
      "      l_output=\"$l_output\\n - dconf database profile file \"$(grep -Pl -- \"^\\\\h*system-db:$l_gpname\b\" /etc/dconf/profile/*)\" exists\"\n"
      "    else\n"
      "      l_output2=\"$l_output2\\n - dconf database profile isn't set\"\n"
      "    fi\n"
      "    if [ -f \"/etc/dconf/db/$l_gpname\" ]; then\n"
      "      l_output=\"$l_output\\n - The dconf database \"$l_gpname\" exists\"\n"
      "    else\n"
      "      l_output2=\"$l_output2\\n - The dconf database \"$l_gpname\" doesn't exist\"\n"
      "    fi\n"
      "    if [ -d \"$l_gpdir\" ]; then\n"
      "      l_output=\"$l_output\\n - The dconf directory \"$l_gpdir\" exists\"\n"
      "    else\n"
      "      l_output2=\"$l_output2\\n - The dconf directory \"$l_gpdir\" doesn't exist\"\n"
      "    fi\n"
      "    if grep -Pqrs -- '^\\\\h*autorun-never\\\\h*=\\\\h*true\b' \"$l_kfile\";\n"
      "    then\n"
      "      l_output=\"$l_output\\n - \"autorun-never\" is set to true in:\"$l_kfile\"\n"
      "    else\n"
      "      l_output2=\"$l_output2\\n - \"autorun-never\" is not set correctly\"\n"
      "    fi\n"
      "  else\n"
      "    l_output2=\"$l_output2\\n - \"autorun-never\" is not set\"\n"
      "  fi\n"
      "else\n"
      "  l_output=\"$l_output\\n - GNOME Desktop Manager package is not installed on the system\\n - Recommendation is not applicable\"\n"
      "fi\n"
      "# Report results. If no failures output in l_output2, we pass\n"
      "if [ -z \"$l_output2\" ]; then\n"
      "  echo -e \"\\n- Audit Result:\\n ** PASS **\\n$l_output\\n\"\n"
      "else\n"
      "  echo -e \"\\n- Audit Result:\\n ** FAIL **\\n - Reason(s) for audit failure:\\n$l_output2\\n\"\n"
      "  [ -n \"$l_output\" ] && echo -e \"\\n- Correctly set:\\n$l_output\\n\"\n"
      "fi\n"
      "}\n"
      "```\n"
    cis_benchmark: {
      profile_level: 1
      severity: LOW
    }
    scan_instructions: 
      "generic:{"
      "  check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{files_in_dir:{dir_path:\"/etc/dconf/db/\" recursive: true }}"
      "      content_entry:{"
      "        match_type: ALL_MATCH_ANY_ORDER"
      "        match_criteria: {"
      "          filter_regex: \"autorun-never\\\\s*=\\\\s*true\""
      "          expected_regex: \"autorun-never\\\\s*=\\\\s*true\""
      "        }"
      "      }"
      "    }"
      "}}"
  }
}
benchmark_configs: {
  id: "ensure-gdm-autorun-never-is-not-overridden"
  compliance_note: {
    version: { cpe_uri: "cpe:/o:debian:ubuntu_linux:22.04" version: "2.0.0" benchmark_document: "CIS Ubuntu 22.04" }
    version: { cpe_uri: "cpe:/o:debian:debian_linux:12.0" version: "1.1.0" benchmark_document: "CIS Debian Linux 12" }
    title: "Ensure GDM autorun-never is not overridden"
    description: 
      "The autorun-never setting allows the GNOME Desktop Display Manager to disable autorun through GDM. By using the lockdown mode in dconf, you can prevent users from changing specific settings."
    rationale: 
      "Malware on removable media may take advantage of Autorun features when the media is inserted into a system and executed."
    remediation: 
      "1. To prevent the user from overriding these settings, create the file /etc/dconf/db/local.d/locks/00-media-autorun with the following content:\n"
      "```\n"
      "[org/gnome/desktop/media-handling]\n"
      "autorun-never=true\n"
      "```\n"
      "2. Update the system's databases:\n"
      "```\n"
      "# dconf update\n"
      "```\n"
      "Note: Users must log out and back in again before the system-wide settings take effect."
    cis_benchmark: {
      profile_level: 1
      severity: MEDIUM
    }
    scan_instructions:
      "scan_type_specific:{instance_scanning:{"
      "  check_alternatives:{"
      "    file_checks:{"
      "    files_to_check:{single_file:{path:\"/etc/dconf/db/local.d/locks/00-media-autorun\"}}"
      "      content_entry:{"
      "        match_type: ALL_MATCH_ANY_ORDER"
      "        match_criteria: {"
      "          filter_regex: \".*org/gnome/desktop/media-handling.*\""
      "          expected_regex: \".*org/gnome/desktop/media-handling.*\""
      "        }"
      "      }"
      "    }"
      "    file_checks:{"
      "    files_to_check:{single_file:{path:\"/etc/dconf/db/local.d/locks/00-media-autorun\"}}"
      "      content_entry:{"
      "        match_type: ALL_MATCH_ANY_ORDER"
      "        match_criteria: {"
      "          filter_regex: \"autorun-never\\\\s*=\\\\s*true\""
      "          expected_regex: \"autorun-never\\\\s*=\\\\s*true\""
      "        }"
      "      }"
      "    }"
      "  }"
      "}}"
  }
}
benchmark_configs: {
  id: "dnsmasq-not-in-use"
  compliance_note: {
    version: { cpe_uri: "cpe:/o:debian:ubuntu_linux:22.04" version: "2.0.0" benchmark_document: "CIS Ubuntu 22.04" }
    title: "Ensure dnsmasq services are not in use"
    description: 
      "The dnsmasq service provides DNS caching, DNS forwarding, and DHCP services. Unless explicitly required, its presence increases the attack surface."
    rationale: 
      "Unless the system is designated for DNS or DHCP services, dnsmasq should be disabled or removed to reduce security risks."
    remediation: 
      "1. Stop and mask the dnsmasq service to ensure it does not run:\n"
      "```\n"
      "# systemctl stop dnsmasq.service\n"
      "# systemctl mask dnsmasq.service\n"
      "```\n"
      "2. Remove the dnsmasq package if it is not required as a dependency:\n"
      "```\n"
      "# apt purge dnsmasq\n"
      "```\n"
      "Note: If dnsmasq is required for dependencies, ensure the service is stopped and masked."
    cis_benchmark: {
      profile_level: 1
      severity: MEDIUM
    }
    scan_instructions:
      "generic:{check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{process_path:{proc_name:\"dnsmasq\"}}"
      "      existence:{should_exist:false}"
      "    }"
      "}}"
  }
}
benchmark_configs: {
  id: "web-server-services-not-in-use"
  compliance_note: {
    version: { cpe_uri: "cpe:/o:debian:ubuntu_linux:22.04" version: "2.0.0" benchmark_document: "CIS Ubuntu 22.04" }
    title: "Ensure web server services are not in use"
    description:
      "Web servers provide the ability to host website content. Unless explicitly required, their presence increases the attack surface of a system."
    rationale:
      "Unless there is a local site-approved requirement to run a web server, these packages should be removed or disabled to reduce the potential attack surface."
    remediation:
      "1. Stop and mask the web server services to ensure they do not run:\n"
      "```\n`\n"
      "# systemctl stop apache2.socket apache2.service nginx.service\n"
      "# systemctl mask apache2.socket apache2.service nginx.service\n"
      "```\n`\n"
      "2. Remove the web server packages if they are not required as dependencies:\n"
      "```\n`\n"
      "# apt purge apache2 nginx\n"
      "```\n`\n"
      "Note: If web servers are required for dependencies, ensure the services and sockets are stopped and masked."
    cis_benchmark: {
      profile_level: 1
      severity: MEDIUM
    }
    scan_instructions:
      "generic:{check_alternatives:{"
      "  file_checks:{"
      "    files_to_check:{process_path:{proc_name:\"apache2\"}}"
      "    existence:{should_exist: false}"
      "  }"
      "  file_checks:{"
      "    files_to_check:{process_path:{proc_name:\"nginx\"}}"
      "    existence:{should_exist: false}"
      "  }"
      "}}"
  }
}
benchmark_configs: {
  id: "ufw-is-installed"
  compliance_note: {
    version: { cpe_uri: "cpe:/o:debian:ubuntu_linux:22.04" version: "2.0.0" benchmark_document: "CIS Ubuntu 22.04" }
    version: { cpe_uri: "cpe:/o:debian:debian_linux:12.0" version: "1.1.0" benchmark_document: "CIS Debian Linux 12" }
    title: "Ensure ufw is installed"
    description:
      "The Uncomplicated Firewall (ufw) is a frontend for iptables and is particularly well-suited for host-based firewalls. It provides a framework for managing Netfilter and a command-line interface for firewall configuration."
    rationale:
      "A firewall utility is required to configure the Linux kernel's Netfilter framework, providing protection against internal threats and malicious mobile code."
    remediation:
      "To install Uncomplicated Firewall (ufw), run:\n"
      "```\n"
      "# apt install ufw\n"
      "```\n"
      "Note: Only one firewall utility should be installed and configured. UFW depends on the iptables package."
    cis_benchmark: {
      profile_level: 1
      severity: MEDIUM
    }
    scan_instructions:
      "generic:{check_alternatives:{"
      "  file_checks:{"
      "    files_to_check:{single_file:{path:\"/usr/sbin/ufw\"}}"
      "    existence:{should_exist:true}"
      "  }"
      "}}"
  }
}
benchmark_configs: {
  id: "iptables-persistent-not-installed-with-ufw"
  compliance_note: {
    version: { cpe_uri: "cpe:/o:debian:ubuntu_linux:22.04" version: "2.0.0" benchmark_document: "CIS Ubuntu 22.04" }
    version: { cpe_uri: "cpe:/o:debian:debian_linux:12.0" version: "1.1.0" benchmark_document: "CIS Debian Linux 12" }
    title: "Ensure iptables-persistent is not installed with ufw"
    description: 
      "The iptables-persistent is a boot-time loader for Netfilter rules, which may conflict with ufw if both are running simultaneously."
    rationale: 
      "Running both ufw and the services included in the iptables-persistent package may lead to conflict. Removing iptables-persistent prevents potential issues."
    remediation: 
      "To remove the iptables-persistent package, run:\n"
      "```\n`\n"
      "# apt purge iptables-persistent\n"
      "```\n`\n"
      "Note: Ensure ufw is the only active firewall utility on the system."
    cis_benchmark: {
      profile_level: 1
      severity: MEDIUM
    }
    scan_instructions:
      "generic:{check_alternatives:{"
      "  file_checks:{"
      "    files_to_check:{single_file:{path:\"/usr/sbin/iptables-persistent\"}}"
      "    existence:{should_exist:false}"
      "  }"
      "  file_checks:{"
      "    files_to_check:{single_file:{path:\"/etc/init.d/iptables-persistent\"}}"
      "    existence:{should_exist:false}"
      "  }"
      "  file_checks:{"
      "    files_to_check:{single_file:{path:\"/usr/share/doc/iptables-persistent\"}}"
      "    existence:{should_exist:false}"
      "  }"
      "  file_checks:{"
      "    files_to_check:{single_file:{path:\"/usr/sbin/ufw\"}}"
      "    existence:{should_exist:true}"
      "  }"
      "}}"
  }
}
benchmark_configs: {
  id: "ufw-loopback-traffic-configured"
  compliance_note: {
    version: { cpe_uri: "cpe:/o:debian:ubuntu_linux:22.04" version: "2.0.0" benchmark_document: "CIS Ubuntu 22.04" }
    title: "Ensure ufw loopback traffic is configured"
    description: 
      "Configure the loopback interface to accept traffic and configure all other interfaces to deny traffic to the loopback network (127.0.0.0/8 for IPv4 and ::1/128 for IPv6)."
    rationale: 
      "Loopback traffic is critical to system operation and should only be allowed on the loopback interface. Denying loopback traffic on other interfaces is an anti-spoofing measure."
    remediation: 
      "To implement the loopback rules, run:\n"
      "```\n"
      "# ufw allow in on lo\n"
      "# ufw allow out on lo\n"
      "# ufw deny in from 127.0.0.0/8\n"
      "# ufw deny in from ::1\n"
      "```\n"
      "Note: Ensure ufw rules are applied in the correct order to achieve the desired effect."
    cis_benchmark: {
      profile_level: 1
      severity: MEDIUM
    }
    scan_instructions:
      "generic:{check_alternatives:{"
      "  file_checks:{"
      "    files_to_check:{single_file:{path:\"/etc/ufw/user.rules\"}}"
      "    content_entry:{"
      "      match_type: ALL_MATCH_ANY_ORDER"
      "      match_criteria:{"
      "        filter_regex: \".*allow in on lo.*\""
      "        expected_regex: \".*allow in on lo.*\""
      "      }"
      "    }"
      "  }"
      "  file_checks:{"
      "    files_to_check:{single_file:{path:\"/etc/ufw/user.rules\"}}"
      "    content_entry:{"
      "      match_type: ALL_MATCH_ANY_ORDER"
      "      match_criteria:{"
      "        filter_regex: \".*allow out on lo.*\""
      "        expected_regex: \".*allow out on lo.*\""
      "      }"
      "    }"
      "  }"
      "  file_checks:{"
      "    files_to_check:{single_file:{path:\"/etc/ufw/user.rules\"}}"
      "    content_entry:{"
      "      match_type: ALL_MATCH_ANY_ORDER"
      "      match_criteria:{"
      "        filter_regex: \".*deny in from 127.0.0.0/8.*\""
      "        expected_regex: \".*deny in from 127.0.0.0/8.*\""
      "      }"
      "    }"
      "  }"
      "  file_checks:{"
      "    files_to_check:{single_file:{path:\"/etc/ufw/user.rules\"}}"
      "    content_entry:{"
      "      match_type: ALL_MATCH_ANY_ORDER"
      "      match_criteria:{"
      "        filter_regex: \".*deny in from ::1.*\""
      "        expected_regex: \".*deny in from ::1.*\""
      "      }"
      "    }"
      "  }"
      "}}"
  }
}
benchmark_configs: {
  id: "ufw-default-deny-policy"
  compliance_note: {
    version: { cpe_uri: "cpe:/o:debian:ubuntu_linux:22.04" version: "2.0.0" benchmark_document: "CIS Ubuntu 22.04" }
    version: { cpe_uri: "cpe:/o:debian:debian_linux:12.0" version: "1.1.0" benchmark_document: "CIS Debian Linux 12" }
    title: "Ensure ufw default deny firewall policy"
    description: 
      "A default deny policy on connections ensures that any unconfigured network usage will be rejected."
    rationale: 
      "With a default accept policy, the firewall will accept any packet that is not configured to be denied. It is easier to whitelist acceptable usage than to blacklist unacceptable usage."
    remediation: 
      "To implement a default deny policy, run:\n"
      "```\n"
      "# ufw default deny incoming\n"
      "# ufw default deny outgoing\n"
      "# ufw default deny routed\n"
      "```\n"
      "Note: Ensure necessary rules for specific services or protocols (e.g., HTTP, HTTPS, DNS) are added before applying the default deny policy."
    cis_benchmark: {
      profile_level: 1
      severity: MEDIUM
    }
    scan_instructions:
      "generic:{check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{single_file:{path:\"/etc/default/ufw\"}}"
      "      content_entry:{"
      "        match_type: ALL_MATCH_STRICT_ORDER"
      "        match_criteria:{"
      "          filter_regex: \"DEFAULT_INPUT_POLICY.*\""
      "          expected_regex: \"DEFAULT_INPUT_POLICY=.*DROP.*\""
      "        }"
      "      }"
      "    }"
      "    file_checks:{"
      "      files_to_check:{single_file:{path:\"/etc/default/ufw\"}}"
      "      content_entry:{"
      "        match_type: ALL_MATCH_STRICT_ORDER"
      "        match_criteria:{"
      "          filter_regex: \"DEFAULT_OUTPUT_POLICY.*\""
      "          expected_regex: \"DEFAULT_OUTPUT_POLICY=.*DROP.*\""
      "        }"
      "      }"
      "    }"
      "    file_checks:{"
      "      files_to_check:{single_file:{path:\"/etc/default/ufw\"}}"
      "      content_entry:{"
      "        match_type: ALL_MATCH_STRICT_ORDER"
      "        match_criteria:{"
      "          filter_regex: \"DEFAULT_FORWARD_POLICY.*\""
      "          expected_regex: \"DEFAULT_FORWARD_POLICY=.*DROP.*\""
      "        }"
      "      }"
      "    }"
      "}}"
  }
}
benchmark_configs: {
  id: "nftables-table-exists"
  compliance_note: {
    version: { cpe_uri: "cpe:/o:debian:ubuntu_linux:22.04" version: "2.0.0" benchmark_document: "CIS Ubuntu 22.04" }
    version: { cpe_uri: "cpe:/o:debian:debian_linux:12.0" version: "1.1.0" benchmark_document: "CIS Debian Linux 12" }
    title: "Ensure a nftables table exists"
    description: 
      "Tables hold chains in nftables. Each table only has one address family and only applies to packets of this family. Without a table, nftables will not filter network traffic."
    rationale: 
      "nftables does not have any default tables. Without a table, nftables will not filter network traffic, leaving the system unprotected."
    remediation: 
      "To create a table in nftables, run:\n"
      "```\n"
      "# nft create table inet <table name>\n"
      "```\n"
      "Example:\n"
      "```\n"
      "# nft create table inet filter\n"
      "```\n"
      "Note: Adding rules to a running nftables can cause loss of connectivity. Ensure proper configuration before creating tables."
    cis_benchmark: {
      profile_level: 1
      severity: MEDIUM
    }
    scan_instructions:
      "generic:{check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{single_file:{path:\"/etc/nftables.conf\"}}"
      "      content_entry:{"
      "        match_type: ALL_MATCH_ANY_ORDER"
      "        match_criteria:{"
      "          filter_regex: \"table inet .*\""
      "          expected_regex: \"table inet .*\""
      "        }"
      "      }"
      "    }"
      "}}"
  }
}
benchmark_configs: {
  id: "nftables-default-deny-policy"
  compliance_note: {
    version: { cpe_uri: "cpe:/o:debian:ubuntu_linux:22.04" version: "2.0.0" benchmark_document: "CIS Ubuntu 22.04" }
    title: "Ensure nftables default deny firewall policy"
    description: 
      "Base chain policy is the default verdict that will be applied to packets reaching the end of the chain. Setting a default deny policy helps ensure only explicitly allowed traffic is permitted."
    rationale: 
      "If the policy is set to accept, the firewall will accept any packet not configured to be denied. It is easier to whitelist acceptable usage than to blacklist unacceptable usage."
    remediation: 
      "To set the default deny policy for base chains, run:\n"
      "```\n"
      "# nft chain inet filter input { policy drop }\n"
      "# nft chain inet filter forward { policy drop  }\n"
      "# nft chain inet filter output { policy drop  }\n"
      "```\n"
      "Note: Adding a drop policy can result in loss of connectivity. Ensure necessary rules, such as allowing SSH, are added beforehand."
    cis_benchmark: {
      profile_level: 1
      severity: MEDIUM
    }
    scan_instructions:
      "generic:{check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{single_file:{path:\"/etc/nftables.conf\"}}"
      "      content_entry:{"
      "        match_type: ALL_MATCH_ANY_ORDER"
      "        match_criteria:{"
      "          filter_regex: \"[^#]*hook input\\\\s*.*policy drop;\""
      "          expected_regex: \"[^#]*hook input\\\\s*.*policy drop;\""
      "        }"
      "      }"
      "    }"
      "    file_checks:{"
      "      files_to_check:{single_file:{path:\"/etc/nftables.conf\"}}"
      "      content_entry:{"
      "        match_type: ALL_MATCH_ANY_ORDER"
      "        match_criteria:{"
      "          filter_regex: \"[^#]*hook forward\\\\s*.*policy drop;\""
      "          expected_regex: \"[^#]*hook forward\\\\s*.*policy drop;\""
      "        }"
      "      }"
      "    }"
      "    file_checks:{"
      "      files_to_check:{single_file:{path:\"/etc/nftables.conf\"}}"
      "      content_entry:{"
      "        match_type: ALL_MATCH_ANY_ORDER"
      "        match_criteria:{"
      "          filter_regex: \"[^#]*hook output\\\\s*.*policy drop;\""
      "          expected_regex: \"[^#]*hook output\\\\s*.*policy drop;\""
      "        }"
      "      }"
      "  }"
      "}}"
  }
}
benchmark_configs: {
  id: "iptables-packages-installed"
  compliance_note: {
    version: { cpe_uri: "cpe:/o:debian:ubuntu_linux:22.04" version: "2.0.0" benchmark_document: "CIS Ubuntu 22.04" }
    title: "Ensure iptables packages are installed"
    description: 
      "iptables is a utility program that allows a system administrator to configure the tables provided by the Linux kernel firewall, implemented as different Netfilter modules, and the chains and rules it stores."
    rationale: 
      "A method of configuring and maintaining firewall rules is necessary to configure a Host Based Firewall."
    remediation: 
      "To install iptables and iptables-persistent, run:\n"
      "```\n"
      "# apt install iptables iptables-persistent\n"
      "```\n"
      "Ensure proper configuration of firewall rules after installation."
    cis_benchmark: {
      profile_level: 1
      severity: MEDIUM
    }
    scan_instructions:
      "generic:{check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{single_file:{path:\"/usr/sbin/iptables\"}}"
      "      existence:{should_exist:true}"
      "    }"
      "    file_checks:{"
      "      files_to_check:{single_file:{path:\"/usr/sbin/iptables-persistent\"}}"
      "      existence:{should_exist:true}"
      "    }"
      "}}"
  }
}
benchmark_configs: {
  id: "disable-apport-error-reporting"
  compliance_note: {
    version: { cpe_uri: "cpe:/o:debian:ubuntu_linux:22.04" version: "2.0.0" benchmark_document: "CIS Ubuntu 22.04" }
    title: "Ensure Apport Error Reporting Service is disabled"
    description: 
      "The Apport Error Reporting Service automatically generates crash reports for debugging. Disabling this service prevents collection of potentially sensitive data such as core dumps, stack traces, and log files."
    rationale: 
      "Apport collects potentially sensitive data, such as passwords, credit card numbers, serial numbers, and other private material. Disabling it reduces the risk of exposing sensitive information."
    remediation: 
      "To disable Apport Error Reporting, follow these steps:\n"
      "1. Edit `/etc/default/apport` and set the `enabled` parameter to `0`:\n"
      "```\n"
      "enabled=0\n"
      "```\n"
      "2. Run the following commands to stop and mask the Apport service:\n"
      "```\n"
      "# systemctl stop apport.service\n"
      "# systemctl mask apport.service\n"
      "```\n"
      "3. Alternatively, remove the apport package entirely:\n"
      "```\n"
      "# apt purge apport\n"
      "```\n"
      "Ensure all steps are in compliance with organizational policies."
    cis_benchmark: {
      profile_level: 1
      severity: MEDIUM
    }
    scan_instructions:
      "generic:{check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{single_file:{path:\"/etc/default/apport\"}}"
      "      content_entry:{"
      "        match_type: ALL_MATCH_ANY_ORDER"
      "        match_criteria:{"
      "          filter_regex: \"enabled=0\""
      "          expected_regex: \"enabled=0\""
      "        }"
      "      }"
      "    }"
      "    file_checks:{"
      "      files_to_check:{single_file:{path:\"/lib/systemd/system/apport.service\"}}"
      "      existence:{should_exist:false}"
      "    }"
      "}}"
  }
}
benchmark_configs: {
  id: "ensure-disable-gnome-automount-removable-media-not-overridden"
  compliance_note: {
    title: "Ensure GDM disabling automatic mounting of removable media is not overridden"
    version: { cpe_uri: "cpe:/o:debian:debian_linux:12.0" version: "1.1.0" benchmark_document: "CIS Debian Linux 12" }
    version: { cpe_uri: "cpe:/o:debian:ubuntu_linux:22.04" version: "2.0.0" benchmark_document: "CIS Ubuntu 22.04" }	
    description: 
        "By default, GNOME automatically mounts removable media when inserted as a convenience to the user. Disabling automounting enhances security by preventing unauthorized access to removable media. By using the lockdown mode in dconf, you can prevent users from changing specific settings. To lock down a dconf key or subpath, create a locks subdirectory in the keyfile directory. The files inside this directory contain a list of keys or subpaths to lock. Just as with the keyfiles, you may add any number of files to this directory."
    rationale: 
        "With automounting enabled, anyone with physical access could attach a USB drive or disc and have its contents available in the system even if they lacked permissions to mount it themselves."
    remediation: 
        "To disable automounting of removable media:\n"
        "1. Create the file /etc/dconf/db/local.d/locks/00-media-automount with the following content:\n"
        "```\n"
        "[org/gnome/desktop/media-handling]\n"
        "automount=false\n"
        "automount-open=false\n"
        "```\n"
        "2. Update the system's databases:\n"
        "```\n"
        "# dconf update\n"
        "```\n"
    cis_benchmark: {
      profile_level: 1
      severity: MEDIUM
    }
    scan_instructions:
      "generic:{check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{single_file:{path:\"/etc/dconf/db/local.d/locks/00-media-automount\"}}"
      "      content_entry:{"
      "        match_type: ALL_MATCH_ANY_ORDER"
      "        match_criteria: {"
      "          filter_regex: \"automount=false\\\\s*\""
      "          expected_regex: \"automount=false\\\\s*\""
      "        }"
      "      }"
      "    }"
      "    file_checks:{"
      "      files_to_check:{single_file:{path:\"/etc/dconf/db/local.d/locks/00-media-automount\"}}"
      "      content_entry:{"
      "        match_type: ALL_MATCH_ANY_ORDER"
      "        match_criteria: {"
      "          filter_regex: \"automount-open=false\\\\s*\""
      "          expected_regex: \"automount-open=false\\\\s*\""
      "        }"
      "      }"
      "    }"
      "}}"
  }
}
benchmark_configs: {
  id: "password-difok-changed-characters-configured"
  compliance_note: {
    version: { cpe_uri: "cpe:/o:debian:ubuntu_linux:22.04" version: "2.0.0" benchmark_document: "CIS Ubuntu 22.04" }
    version: { cpe_uri: "cpe:/o:debian:debian_linux:12.0" version: "1.1.0" benchmark_document: "CIS Debian Linux 12" }
    title: "Ensure Password Number of Changed Characters is Configured"
    description: 
      "The configuration ensures that a specified number of characters in a new password differ from the old password, enhancing password complexity and security."
    rationale: 
      "Using complex passwords with enforced character changes increases the time and resources required to compromise passwords through brute-force attacks, enhancing overall security."
    remediation: 
      "Create or modify a `.conf` file in `/etc/security/pwquality.conf.d/` or edit `/etc/security/pwquality.conf` to include the following configuration:\n"
      "```difok = 2```\n"
      "Ensure the setting conforms to local site policy."
    cis_benchmark: {
      profile_level: 1
      severity: MEDIUM
    }
    scan_instructions:
      "generic:{check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{files_in_dir:{dir_path:\"/etc/security/\", recursive:true}}"
      "      content_entry:{"
      "        match_type: ALL_MATCH_ANY_ORDER"
      "        match_criteria: {"
      "          filter_regex: \"[^#]*\\\\bdifok.*\\\\s*=\\\\s*2.*\""
      "          expected_regex: \"[^#]*\\\\bdifok*\\\\s*=\\\\s*2.*\""
      "        }"
      "      }"
      "    }"
      "}}"
  }
}
benchmark_configs: {
  id: "password-minimum-length-configured"
  compliance_note: {
    version: { cpe_uri: "cpe:/o:debian:ubuntu_linux:22.04" version: "2.0.0" benchmark_document: "CIS Ubuntu 22.04" }
    version: { cpe_uri: "cpe:/o:debian:debian_linux:12.0" version: "1.1.0" benchmark_document: "CIS Debian Linux 12" }
    title: "Ensure Minimum Password Length is Configured"
    description: 
      "The configuration ensures that the minimum password length is enforced to enhance password security."
    rationale: 
      "Using a minimum password length policy helps to protect systems from password attacks by increasing the complexity and reducing the predictability of passwords."
    remediation: 
      "Create or modify a `.conf` file in `/etc/security/pwquality.conf.d/` or edit `/etc/security/pwquality.conf` to include the following configuration:\n"
      "```\n"
      "minlen = 14"
      "```\n"
      "Ensure the setting conforms to local site policy."
    cis_benchmark: {
      profile_level: 1
      severity: MEDIUM
    }
    scan_instructions:
      "generic:{check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{files_in_dir:{dir_path:\"/etc/security/\", recursive:true}}"
      "      content_entry:{"
      "        match_type: ALL_MATCH_ANY_ORDER"
      "        match_criteria: {"
      "          filter_regex: \"[^#]*\\\\bminlen\\\\s*=\\\\s*14.*\""
      "          expected_regex: \"[^#]*\\\\bminlen\\\\s*=\\\\s*14.*\""
      "        }"
      "      }"
      "    }"
      "}}"
  }
}
benchmark_configs: {
  id: "password-maxrepeat-configured"
  compliance_note: {
    version: { cpe_uri: "cpe:/o:debian:ubuntu_linux:22.04" version: "2.0.0" benchmark_document: "CIS Ubuntu 22.04" }
    version: { cpe_uri: "cpe:/o:debian:debian_linux:12.0" version: "1.1.0" benchmark_document: "CIS Debian Linux 12" }
    title: "Ensure Password Same Consecutive Characters is Configured"
    description: 
      "The configuration ensures that the maximum number of allowed same consecutive characters in a new password is limited, enhancing password complexity and security."
    rationale: 
      "Using a policy to limit consecutive characters increases the complexity and reduces predictability of passwords, enhancing overall security against brute-force attacks."
    remediation: 
      "Create or modify a `.conf` file in `/etc/security/pwquality.conf.d/` or edit `/etc/security/pwquality.conf` to include the following configuration:\n"
      "```\n"
      "maxrepeat = 3"
      "```\n"
      "Ensure the setting conforms to local site policy."
    cis_benchmark: {
      profile_level: 1
      severity: MEDIUM
    }
    scan_instructions:
      "generic:{check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{files_in_dir:{dir_path:\"/etc/security/\", recursive:true}}"
      "      content_entry:{"
      "        match_type: ALL_MATCH_ANY_ORDER"
      "        match_criteria: {"
      "          filter_regex: \"[^#]*\\\\bmaxrepeat\\\\s*=\\\\s*3.*\""
      "          expected_regex: \"[^#]*\\\\bmaxrepeat\\\\s*=\\\\s*3.*\""
      "        }"
      "      }"
      "    }"
      "}}"
  }
}
benchmark_configs: {
  id: "password-maxsequence-configured"
  compliance_note: {
    version: { cpe_uri: "cpe:/o:debian:ubuntu_linux:22.04" version: "2.0.0" benchmark_document: "CIS Ubuntu 22.04" }
    version: { cpe_uri: "cpe:/o:debian:debian_linux:12.0" version: "1.1.0" benchmark_document: "CIS Debian Linux 12" }
    title: "Ensure Password Maximum Sequential Characters is Configured"
    description: 
      "The configuration ensures that the maximum length of monotonic character sequences in the new password is limited, enhancing password complexity and security."
    rationale: 
      "Using a policy to limit monotonic character sequences increases the complexity and reduces predictability of passwords, enhancing overall security against brute-force attacks."
    remediation: 
      "Create or modify a `.conf` file in `/etc/security/pwquality.conf.d/` or edit `/etc/security/pwquality.conf` to include the following configuration:\n"
      "```\n"
      "maxsequence = 3"
      "```\n"
      "Ensure the setting conforms to local site policy."
    cis_benchmark: {
      profile_level: 1
      severity: MEDIUM
    }
    scan_instructions:
      "generic:{check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{files_in_dir:{dir_path:\"/etc/security/\", recursive:true}}"
      "      content_entry:{"
      "        match_type: ALL_MATCH_ANY_ORDER"
      "        match_criteria: {"
      "          filter_regex: \"[^#]*\\\\bmaxsequence\\\\s*=\\\\s*3.*\""
      "          expected_regex: \"[^#]*\\\\bmaxsequence\\\\s*=\\\\s*3.*\""
      "        }"
      "      }"
      "    }"
      "}}"
  }
}
benchmark_configs: {
  id: "password-dictionary-check-enabled"
  compliance_note: {
    version: { cpe_uri: "cpe:/o:debian:ubuntu_linux:22.04" version: "2.0.0" benchmark_document: "CIS Ubuntu 22.04" }
    version: { cpe_uri: "cpe:/o:debian:debian_linux:12.0" version: "1.1.0" benchmark_document: "CIS Debian Linux 12" }
    title: "Ensure Password Dictionary Check is Enabled"
    description: 
      "The configuration ensures that passwords are checked against a dictionary to avoid the use of weak or predictable passwords, enhancing password security."
    rationale: 
      "Using a policy to enable dictionary checks increases the security of passwords by reducing the chance of using dictionary words or predictable combinations, mitigating brute-force attacks."
    remediation: 
      "Edit any file ending in `.conf` in `/etc/security/pwquality.conf.d/` or the file `/etc/security/pwquality.conf` and ensure the following configuration is included:\n"
      "```\n"
      "dictcheck = 1"
      "```\n"
      "Ensure the setting conforms to local site policy."
    cis_benchmark: {
      profile_level: 1
      severity: MEDIUM
    }
    scan_instructions:
      "generic:{check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{files_in_dir:{dir_path:\"/etc/security/\", recursive:true}}"
      "      content_entry:{"
      "        match_type: ALL_MATCH_ANY_ORDER"
      "        match_criteria: {"
      "          filter_regex: \"[^#]*\\\\bdictcheck\\\\s*=\\\\s*1.*\""
      "          expected_regex: \"[^#]*\\\\bdictcheck\\\\s*=\\\\s*1.*\""
      "        }"
      "      }"
      "    }"
      "}}"
  }
}
benchmark_configs: {
  id: "password-quality-check-enforced"
  compliance_note: {
    version: { cpe_uri: "cpe:/o:debian:ubuntu_linux:22.04" version: "2.0.0" benchmark_document: "CIS Ubuntu 22.04" }
    version: { cpe_uri: "cpe:/o:debian:debian_linux:12.0" version: "1.1.0" benchmark_document: "CIS Debian Linux 12" }
    title: "Ensure Password Quality Checking is Enforced"
    description: 
      "The configuration ensures that the pam_pwquality module enforces password quality checks by rejecting passwords that fail configured policies."
    rationale: 
      "Enforcing password quality checks reduces the risk of password compromise by ensuring all passwords meet security policies."
    remediation: 
      "Edit any file ending in `.conf` in `/etc/security/pwquality.conf.d/` or the file `/etc/security/pwquality.conf` to remove or comment out any line containing `enforcing = 0`:\n"
      "```\n"
      "# sed -ri 's/^\\h*enforcing\\h*=\\h*0/# &/' /etc/security/pwquality.conf"
      "```\n"
      "Remove the `enforcing=0` argument from the `pam_pwquality.so` module in PAM files if present."
    cis_benchmark: {
      profile_level: 1
      severity: HIGH
    }
    scan_instructions:
      "generic:{check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{files_in_dir:{dir_path:\"/etc/security/\", recursive:true}}"
      "      content_entry:{"
      "        match_type: NONE_MATCH"
      "        match_criteria: {"
      "          filter_regex: \"[^#]*\\\\benforcing\\\\s*=\\\\s*0.*\""
      "          expected_regex: \"[^#]*\\\\benforcing\\\\s*=\\\\s*0.*\""
      "        }"
      "      }"
      "    }"
      "}}"
  }
}
benchmark_configs: {
  id: "password-quality-enforced-for-root"
  compliance_note: {
    version: { cpe_uri: "cpe:/o:debian:ubuntu_linux:22.04" version: "2.0.0" benchmark_document: "CIS Ubuntu 22.04" }
    version: { cpe_uri: "cpe:/o:debian:debian_linux:12.0" version: "1.1.0" benchmark_document: "CIS Debian Linux 12" }
    title: "Ensure Password Quality is Enforced for the Root User"
    description: 
      "The configuration ensures that the pam_pwquality module enforces password quality checks for the root user."
    rationale: 
      "Enforcing password quality checks for the root user ensures that even administrative accounts adhere to password policies, reducing the risk of password compromise."
    remediation: 
      "Edit any file ending in `.conf` in `/etc/security/pwquality.conf.d/` or the file `/etc/security/pwquality.conf` to include the following configuration:\n"
      "```\n"
      "enforce_for_root"
      "```\n"
    cis_benchmark: {
      profile_level: 1
      severity: HIGH
    }
    scan_instructions:
      "generic:{check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{files_in_dir:{dir_path:\"/etc/security/\", recursive:true}}"
      "      content_entry:{"
      "        match_type: ALL_MATCH_ANY_ORDER"
      "        match_criteria: {"
      "          filter_regex: \"[^#]*\\\\benforce_for_root.*\""
      "          expected_regex: \"[^#]*\\\\benforce_for_root.*\""
      "        }"
      "      }"
      "    }"
      "}}"
  }
}
benchmark_configs: {
  id: "password-history-remember-configured"
  compliance_note: {
    version: { cpe_uri: "cpe:/o:debian:ubuntu_linux:22.04" version: "2.0.0" benchmark_document: "CIS Ubuntu 22.04" }
    version: { cpe_uri: "cpe:/o:debian:debian_linux:12.0" version: "1.1.0" benchmark_document: "CIS Debian Linux 12" }
    title: "Ensure Password History Remember is Configured"
    description: 
      "The configuration ensures that the pam_pwhistory module enforces a specific number of old passwords remembered, preventing users from reusing recent passwords."
    rationale: 
      "Remembering previous passwords reduces the likelihood of attackers successfully compromising accounts by reusing previous passwords, enhancing password security."
    remediation: 
      "Edit the `/etc/pam.d/common-password` file and ensure the `pam_pwhistory` module line includes:\n"
      "```\n"
      "remember=<N>\n"
      "```\n"
      "where `<N>` is 24 or more, based on local site policy."
    cis_benchmark: {
      profile_level: 1
      severity: MEDIUM
    }
    scan_instructions:
      "generic:{check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{single_file:{path:\"/etc/pam.d/common-password\"}}"
      "      content_entry:{"
      "        match_type: ALL_MATCH_ANY_ORDER"
      "        match_criteria: {"
      "          filter_regex: \"\\\\s*password\\\\s+[^#\\n\\r]+\\\\s+pam_pwhistory\\\\.so\\\\s+([^#\\n\\r]+\\\\s+)?remember=(2[4-9]|[3-9][0-9]|[1-9][0-9]{2,}).*\""
      "          expected_regex: \"\\\\s*password\\\\s+[^#\\n\\r]+\\\\s+pam_pwhistory\\\\.so\\\\s+([^#\\n\\r]+\\\\s+)?remember=(2[4-9]|[3-9][0-9]|[1-9][0-9]{2,}).*\""
      "        }"
      "      }"
      "    }"
      "}}"
  }
}
benchmark_configs: {
  id: "password-history-enforce-for-root"
  compliance_note: {
    version: { cpe_uri: "cpe:/o:debian:ubuntu_linux:22.04" version: "2.0.0" benchmark_document: "CIS Ubuntu 22.04" }
    version: { cpe_uri: "cpe:/o:debian:debian_linux:12.0" version: "1.1.0" benchmark_document: "CIS Debian Linux 12" }
    title: "Ensure Password History is Enforced for the Root User"
    description: 
      "The configuration ensures that the pam_pwhistory module enforces password history for the root user as well, preventing root from reusing recent passwords."
    rationale: 
      "Requiring the root user not to reuse their passwords enhances overall system security by reducing the risk of password reuse attacks."
    remediation: 
      "Edit the `/etc/pam.d/common-password` file and ensure the `pam_pwhistory` module line includes:\n"
      "```\n"
      "enforce_for_root\n"
      "```\n"
    cis_benchmark: {
      profile_level: 1
      severity: MEDIUM
    }
    scan_instructions:
      "generic:{check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{single_file:{path:\"/etc/pam.d/common-password\"}}"
      "      content_entry:{"
      "        match_type: ALL_MATCH_ANY_ORDER"
      "        match_criteria: {"
      "          filter_regex: \"\\\\s*password\\\\s+[^#\\n\\r]+\\\\s+pam_pwhistory\\\\.so\\\\s+([^#\\n\\r]+\\\\s+)?enforce_for_root\\\\b.*\""
      "          expected_regex: \"\\\\s*password\\\\s+[^#\\n\\r]+\\\\s+pam_pwhistory\\\\.so\\\\s+([^#\\n\\r]+\\\\s+)?enforce_for_root\\\\b.*\""
      "        }"
      "      }"
      "    }"
      "}}"
  }
}
benchmark_configs: {
  id: "password-history-enforce-use-authtok"
  compliance_note: {
    version: { cpe_uri: "cpe:/o:debian:ubuntu_linux:22.04" version: "2.0.0" benchmark_document: "CIS Ubuntu 22.04" }
    version: { cpe_uri: "cpe:/o:debian:debian_linux:12.0" version: "1.1.0" benchmark_document: "CIS Debian Linux 12" }
    title: "Ensure pam_pwhistory Includes use_authtok"
    description: 
      "The configuration ensures that the pam_pwhistory module enforces the use_authtok argument, enabling multiple pam modules to validate a new password before it is accepted."
    rationale: 
      "The use_authtok option ensures consistent password validation across multiple pam modules, enhancing security during password changes."
    remediation: 
      "Edit the `/etc/pam.d/common-password` file and ensure the `pam_pwhistory` module line includes:\n"
      "```\n"
      "use_authtok\n"
      "```\n"
    cis_benchmark: {
      profile_level: 1
      severity: MEDIUM
    }
    scan_instructions:
      "generic:{check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{single_file:{path:\"/etc/pam.d/common-password\"}}"
      "      content_entry:{"
      "        match_type: ALL_MATCH_ANY_ORDER"
      "        match_criteria: {"
      "          filter_regex: \"\\\\s*password\\\\s+[^#\\n\\r]+\\\\s+pam_pwhistory\\\\.so\\\\s+([^#\\n\\r]+\\\\s+)?use_authtok\\\\b.*\""
      "          expected_regex: \"\\\\s*password\\\\s+[^#\\n\\r]+\\\\s+pam_pwhistory\\\\.so\\\\s+([^#\\n\\r]+\\\\s+)?use_authtok\\\\b.*\""
      "        }"
      "      }"
      "    }"
      "}}"
  }
}
benchmark_configs: {
  id: "pam-unix-nullok-not-included"
  compliance_note: {
    version: { cpe_uri: "cpe:/o:debian:ubuntu_linux:22.04" version: "2.0.0" benchmark_document: "CIS Ubuntu 22.04" }
    version: { cpe_uri: "cpe:/o:debian:debian_linux:12.0" version: "1.1.0" benchmark_document: "CIS Debian Linux 12" }
    title: "Ensure pam_unix Does Not Include nullok"
    description: 
      "The configuration ensures that the pam_unix module does not include the `nullok` argument, which permits blank passwords."
    rationale: 
      "Excluding the `nullok` argument ensures that blank passwords are not permitted, enhancing security by enforcing the use of strong passwords."
    remediation: 
      "Edit any `pam_unix` lines in `/etc/pam.d/common-password`, `/etc/pam.d/common-auth`, `/etc/pam.d/common-account`, `/etc/pam.d/common-session`, and `/etc/pam.d/common-session-noninteractive` to remove the `nullok` argument. Ensure no `pam_unix.so` line includes the `nullok` argument."
    cis_benchmark: {
      profile_level: 1
      severity: HIGH
    }
    scan_instructions:
      "generic:{check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{files_in_dir:{dir_path:\"/etc/pam.d/\", filename_regex:\"common-(password|auth|account|session|session-noninteractive)\"}}"
      "      content_entry:{"
      "        match_type: NONE_MATCH"
      "        match_criteria: {"
      "          filter_regex: \"\\\\s*password\\\\s+[^#\\n\\r]+\\\\s+pam_unix\\\\.so\\\\s+([^#\\n\\r]+\\\\s+)?nullok\\\\b.*\""
      "          expected_regex: \"\\\\s*password\\\\s+[^#\\n\\r]+\\\\s+pam_unix\\\\.so\\\\s+([^#\\n\\r]+\\\\s+)?nullok\\\\b.*\""
      "        }"
      "      }"
      "    }"
      "}}"
  }
}
benchmark_configs: {
  id: "pam-unix-remember-not-included"
  compliance_note: {
    version: { cpe_uri: "cpe:/o:debian:ubuntu_linux:22.04" version: "2.0.0" benchmark_document: "CIS Ubuntu 22.04" }
    version: { cpe_uri: "cpe:/o:debian:debian_linux:12.0" version: "1.1.0" benchmark_document: "CIS Debian Linux 12" }
    title: "Ensure pam_unix Does Not Include remember"
    description: 
      "The configuration ensures that the pam_unix module does not include the `remember` argument, which stores passwords using the MD5 hash. Instead, the pam_pwhistory module should be used for enhanced security."
    rationale: 
      "Removing the `remember` argument from pam_unix ensures stronger password hashing algorithms are used, providing additional protection against password recovery attacks."
    remediation: 
      "Edit any `pam_unix` lines in `/etc/pam.d/common-password`, `/etc/pam.d/common-auth`, `/etc/pam.d/common-account`, `/etc/pam.d/common-session`, and `/etc/pam.d/common-session-noninteractive` to remove the `remember` argument. Ensure no `pam_unix.so` line includes the `remember` argument."
    cis_benchmark: {
      profile_level: 1
      severity: HIGH
    }
    scan_instructions:
      "generic:{check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{files_in_dir:{dir_path:\"/etc/pam.d/\", filename_regex:\"common-(password|auth|account|session|session-noninteractive)\"}}"
      "      content_entry:{"
      "        match_type: NONE_MATCH"
      "        match_criteria: {"
      "          filter_regex:  \"\\\\s*password\\\\s+[^#\\n\\r]+\\\\s+pam_unix\\\\.so\\\\s+([^#\\n\\r]+\\\\s+)?remember\\\\b.*\""
      "          expected_regex: \"\\\\s*password\\\\s+[^#\\n\\r]+\\\\s+pam_unix\\\\.so\\\\s+([^#\\n\\r]+\\\\s+)?remember\\\\b.*\""
      "        }"
      "      }"
      "    }"
      "}}"
  }
}
benchmark_configs: {
  id: "pam-unix-strong-hashing-algorithm"
  compliance_note: {
    version: { cpe_uri: "cpe:/o:debian:ubuntu_linux:22.04" version: "2.0.0" benchmark_document: "CIS Ubuntu 22.04" }
    version: { cpe_uri: "cpe:/o:debian:debian_linux:12.0" version: "1.1.0" benchmark_document: "CIS Debian Linux 12" }
    title: "Ensure pam_unix Includes a Strong Password Hashing Algorithm"
    description: 
      "The configuration ensures that the pam_unix module uses a strong password hashing algorithm, such as SHA-512 or yescrypt, to enhance password security."
    rationale: 
      "Using strong hashing algorithms like SHA-512 or yescrypt provides additional protection against password recovery attacks by increasing the computational effort required to break the password hashes."
    remediation: 
      "Edit any `pam_unix` lines in `/etc/pam.d/common-password` to include either the `sha512` or `yescrypt` hashing algorithm. Ensure the configuration meets local site policy."
    cis_benchmark: {
      profile_level: 1
      severity: HIGH
    }
    scan_instructions:
      "generic:{check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{single_file:{path:\"/etc/pam.d/common-password\"}}"
      "      content_entry:{"
      "        match_type: ALL_MATCH_STRICT_ORDER"
      "        match_criteria: {"
      "          filter_regex: \"\\\\s*password\\\\s+[^#\\\\n\\\\r]*\\\\bpam_unix\\\\.so\\\\b.*\\\\b(sha512|yescrypt)\\\\b.*\""
      "          expected_regex: \"\\\\s*password\\\\s+[^#\\\\n\\\\r]*\\\\bpam_unix\\\\.so\\\\b.*\\\\b(sha512|yescrypt)\\\\b.*\""
      "        }"
      "      }"
      "    }"
      "}}"
  }
}
benchmark_configs: {
  id: "pam-unix-use-authtok"
  compliance_note: {
    version: { cpe_uri: "cpe:/o:debian:ubuntu_linux:22.04" version: "2.0.0" benchmark_document: "CIS Ubuntu 22.04" }
    version: { cpe_uri: "cpe:/o:debian:debian_linux:12.0" version: "1.1.0" benchmark_document: "CIS Debian Linux 12" }
    title: "Ensure pam_unix Includes use_authtok"
    description: 
      "The configuration ensures that the pam_unix module uses the `use_authtok` argument to enforce the use of a password previously provided by a stacked PAM module."
    rationale: 
      "The `use_authtok` argument ensures consistency across PAM modules during password changes, enforcing security policies defined by other modules in the PAM stack."
    remediation: 
      "Edit any `pam_unix` lines in `/etc/pam.d/common-password` to include the `use_authtok` argument. Ensure the configuration meets local site policy."
    cis_benchmark: {
      profile_level: 1
      severity: MEDIUM
    }
    scan_instructions:
      "generic:{check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{single_file:{path:\"/etc/pam.d/common-password\"}}"
      "      content_entry:{"
      "        match_type: ALL_MATCH_ANY_ORDER"
      "        match_criteria: {"
      "          filter_regex: \"\\\\s*password\\\\s+[^#\\\\n\\\\r]*\\\\bpam_unix\\\\.so\\\\b.*\\\\buse_authtok\\\\b.*\""
      "          expected_regex: \"\\\\s*password\\\\s+[^#\\\\n\\\\r]*\\\\bpam_unix\\\\.so\\\\b.*\\\\buse_authtok\\\\b.*\""
      "        }"
      "      }"
      "    }"
      "}}"
  }
}
benchmark_configs: {
  id: "login-defs-strong-password-hashing"
  compliance_note: {
    version: { cpe_uri: "cpe:/o:debian:ubuntu_linux:22.04" version: "2.0.0" benchmark_document: "CIS Ubuntu 22.04" }
    version: { cpe_uri: "cpe:/o:debian:debian_linux:12.0" version: "1.1.0" benchmark_document: "CIS Debian Linux 12" }
    title: "Ensure Strong Password Hashing Algorithm is Configured in /etc/login.defs"
    description: 
      "The configuration ensures that /etc/login.defs specifies a strong password hashing algorithm, such as SHA-512 or YESCRYPT, to enhance group password security."
    rationale: 
      "Specifying strong hashing algorithms like SHA-512 or YESCRYPT in /etc/login.defs increases security by ensuring newly created group passwords use secure hashing."
    remediation: 
      "Edit /etc/login.defs and set the ENCRYPT_METHOD parameter to SHA512 or YESCRYPT. Ensure consistency with PAM configuration."
    cis_benchmark: {
      profile_level: 1
      severity: HIGH
    }
    scan_instructions:
      "generic:{check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{single_file:{path:\"/etc/login.defs\"}}"
      "      content_entry:{"
      "        match_type: ALL_MATCH_ANY_ORDER"
      "        match_criteria: {"
      "          filter_regex: \"[^#]*\\\\bENCRYPT_METHOD\\\\s+\\\\b(SHA512|YESCRYPT)\\\\b.*\""
      "          expected_regex: \"[^#]*\\\\bENCRYPT_METHOD\\\\s+\\\\b(SHA512|YESCRYPT)\\\\b.*\""
      "        }"
      "      }"
      "    }"
      "}}"
  }
}

benchmark_configs: {
  id: "root-gid-zero-check"
  compliance_note: {
    version: { cpe_uri: "cpe:/o:debian:ubuntu_linux:22.04" version: "2.0.0" benchmark_document: "CIS Ubuntu 22.04" }
    version: { cpe_uri: "cpe:/o:debian:debian_linux:12.0" version: "1.1.0" benchmark_document: "CIS Debian Linux 12" }
    title: "Ensure Root is the Only GID 0 Account"
    description: 
      "The configuration ensures that the root user's primary GID is 0 and no other user accounts have GID 0 as their primary GID, enhancing system security."
    rationale: 
      "Restricting GID 0 to the root account minimizes the risk of unauthorized access and ensures critical system files are properly secured."
    remediation: 
      "Run the following commands to ensure the root user and group GID are correctly set and no other users have GID 0:\n"
      "usermod -g 0 root\n"
      "groupmod -g 0 root\n"
      "Remove or reassign GID 0 from any other users."
    cis_benchmark: {
      profile_level: 1
      severity: HIGH
    }
    scan_instructions:
      "generic:{check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{single_file:{path:\"/etc/passwd\"}}"
      "      content_entry:{"
      "        match_type: ALL_MATCH_ANY_ORDER"
      "        match_criteria: {"
      "          filter_regex: \"[^#]*:[^:]*:[^:]*:0:[^:]*:[^:]*:[^:]*\""
      "          expected_regex: \"root:[^:]*:[^:]*:0:[^:]*:[^:]*:[^:]*\""
      "        }"
      "      }"
      "    }"
      "}}"
  }
}
benchmark_configs: {
  id: "ensure-root-umask-configured"
  compliance_note: {
    version: { cpe_uri: "cpe:/o:debian:ubuntu_linux:22.04" version: "2.0.0" benchmark_document: "CIS Ubuntu 22.04" }
    version: { cpe_uri: "cpe:/o:debian:debian_linux:12.0" version: "1.1.0" benchmark_document: "CIS Debian Linux 12" }
    title: "Ensure root user umask is configured"
    description: 
      "The configuration ensures that the root user's umask is set to a secure value to enforce permissions for newly created files and directories."
    rationale: 
      "Setting a secure umask ensures that newly created files and directories have restricted permissions, reducing the risk of unauthorized access."
    remediation: 
      "Edit the `/root/.bash_profile` and `/root/.bashrc` files and ensure the following configuration is included:\n"
      "```\n"
      "umask 0027"
      "```\n"
      "Remove or comment out any other umask settings that are less restrictive."
    cis_benchmark: {
      profile_level: 1
      severity: HIGH
    }
    scan_instructions:
      "generic:{check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{single_file:{path:\"/root/.bash_profile\"}}"
      "      content_entry:{"
      "        match_type: ALL_MATCH_ANY_ORDER"
      "        match_criteria: {"
      "          filter_regex: \"\\\\s*umask\\\\s*0027.*\""
      "          expected_regex: \"\\\\s*umask\\\\s*0027.*\""
      "        }"
      "      }"
      "    }"
      "    file_checks:{"
      "      files_to_check:{single_file:{path:\"/root/.bashrc\"}}"
      "      content_entry:{"
      "        match_type: ALL_MATCH_ANY_ORDER"
      "        match_criteria: {"
      "          filter_regex: \"\\\\s*umask\\\\s*0027.*\""
      "          expected_regex: \"\\\\s*umask\\\\s*0027.*\""
      "        }"
      "      }"
      "    }"
      "}}"
  }
}
benchmark_configs: {
  id: "ensure-nologin-not-in-shells"
  compliance_note: {
    version: { cpe_uri: "cpe:/o:debian:ubuntu_linux:22.04" version: "2.0.0" benchmark_document: "CIS Ubuntu 22.04" }
    version: { cpe_uri: "cpe:/o:debian:debian_linux:12.0" version: "1.1.0" benchmark_document: "CIS Debian Linux 12" }
    title: "Ensure nologin is not listed in /etc/shells"
    description: 
      "/etc/shells is a text file which contains the full pathnames of valid login shells. This file is consulted by chsh and available to be queried by other programs."
    rationale: 
      "Having nologin listed in /etc/shells allows users configured with nologin as their shell to be treated as unrestricted users, which is not expected behavior."
    remediation: 
      "Edit /etc/shells and remove any lines that include nologin."
    cis_benchmark: {
      profile_level: 2
      severity: MEDIUM
    }
    scan_instructions:
      "generic:{check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{single_file:{path:\"/etc/shells\"}}"
      "      content_entry:{"
      "        match_type: NONE_MATCH"
      "        match_criteria: {"
      "          filter_regex: \"/nologin\\\\b.*\""
      "          expected_regex: \"/nologin\\\\b.*\""
      "        }"
      "      }"
      "    }"
      "}}"
  }
}
benchmark_configs: {
  id: "ensure-default-user-umask-configured"
  compliance_note: {
    version: { cpe_uri: "cpe:/o:debian:ubuntu_linux:22.04" version: "2.0.0" benchmark_document: "CIS Ubuntu 22.04" }
    version: { cpe_uri: "cpe:/o:debian:debian_linux:12.0" version: "1.1.0" benchmark_document: "CIS Debian Linux 12" }
    title: "Ensure default user umask is configured"
    description: 
      "The user file-creation mode mask (umask) determines the default permissions for newly created files and directories, ensuring they have appropriate restrictions."
    rationale: 
      "Setting a secure default umask ensures that newly created files and directories have restricted permissions, reducing the risk of unauthorized access or modification."
    remediation: 
      "Edit configuration files to set the default umask to 027 or a more restrictive value. Suggested files include /etc/profile, /etc/bashrc, and scripts in /etc/profile.d."
    cis_benchmark: {
      profile_level: 1
      severity: HIGH
    }
    scan_instructions:
      "generic:{check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{single_file:{path:\"/etc/profile\"}}"
      "      content_entry:{"
      "        match_type: ALL_MATCH_ANY_ORDER"
      "        match_criteria:{"
      "          filter_regex: \"\\\\s*umask\\\\s+0?27\\\\b.*\""
      "          expected_regex: \"\\\\s*umask\\\\s+0?27\\\\b.*\""
      "        }"
      "      }"
      "    }"
      "    file_checks:{"
      "      files_to_check:{single_file:{path:\"/etc/bashrc\"}}"
      "      content_entry:{"
      "        match_type: ALL_MATCH_ANY_ORDER"
      "        match_criteria:{"
      "          filter_regex: \"\\\\s*umask\\\\s+0?27\\\\b.*\""
      "          expected_regex: \"\\\\s*umask\\\\s+0?27\\\\b.*\""
      "        }"
      "      }"
      "    }"
      "    file_checks:{"
      "      files_to_check:{files_in_dir:{dir_path:\"/etc/profile.d/\", filename_regex:\".*\\\\.sh\"}}"
      "      content_entry:{"
      "        match_type: ALL_MATCH_ANY_ORDER"
      "        match_criteria:{"
      "          filter_regex: \"\\\\s*umask\\\\s+0?27\\\\b.*\""
      "          expected_regex: \"\\\\s*umask\\\\s+0?27\\\\b.*\""
      "        }"
      "      }"
      "    }"
      "}}"
  }
}
benchmark_configs: {
  id: "ensure-cryptographic-mechanisms-audit-tools"
  compliance_note: {
    version: { cpe_uri: "cpe:/o:debian:ubuntu_linux:22.04" version: "2.0.0" benchmark_document: "CIS Ubuntu 22.04" }
    version: { cpe_uri: "cpe:/o:debian:debian_linux:12.0" version: "1.1.0" benchmark_document: "CIS Debian Linux 12" }
    title: "Ensure cryptographic mechanisms are used to protect the integrity of audit tools"
    description: 
      "Audit tools include vendor-provided and open source tools needed to view and manipulate audit information. Protecting their integrity ensures audit data remains secure and trustworthy."
    rationale: 
      "Attackers may modify or replace audit tools to hide or erase activity from logs. Cryptographic signatures enable detection of unauthorized changes."
    remediation: 
      "Configure AIDE to monitor audit tool files with cryptographic integrity checks. Edit /etc/aide/aide.conf and add or update the following entries:\n" 
      "# Audit Tools\n" 
      "/sbin/auditctl p+i+n+u+g+s+b+acl+xattrs+sha512\n" 
      "/sbin/auditd p+i+n+u+g+s+b+acl+xattrs+sha512\n" 
      "/sbin/ausearch p+i+n+u+g+s+b+acl+xattrs+sha512\n" 
      "/sbin/aureport p+i+n+u+g+s+b+acl+xattrs+sha512\n" 
      "/sbin/autrace p+i+n+u+g+s+b+acl+xattrs+sha512\n" 
      "/sbin/augenrules p+i+n+u+g+s+b+acl+xattrs+sha512"
    cis_benchmark: {
      profile_level: 2
      severity: MEDIUM
    }
    scan_instructions:
      "generic:{check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{single_file:{path:\"/etc/aide/aide.conf\"}}"
      "      content_entry:{"
      "        match_type: ALL_MATCH_ANY_ORDER"
      "        match_criteria:{"
      "          filter_regex: \"/sbin/(auditctl|auditd|ausearch|aureport|autrace|augenrules)\\\\s+p\\\\+i\\\\+n\\\\+u\\\\+g\\\\+s\\\\+b\\\\+acl\\\\+xattrs\\\\+sha512.*\""
      "          expected_regex: \"/sbin/(auditctl|auditd|ausearch|aureport|autrace|augenrules)\\\\s+p\\\\+i\\\\+n\\\\+u\\\\+g\\\\+s\\\\+b\\\\+acl\\\\+xattrs\\\\+sha512.*\""
      "        }"
      "      }"
      "    }"
      "}}"
  }
}
benchmark_configs: {
  id: "ensure-journald-forwardtosyslog-disabled"
  compliance_note: {
    version: { cpe_uri: "cpe:/o:debian:ubuntu_linux:22.04" version: "2.0.0" benchmark_document: "CIS Ubuntu 22.04" }
    version: { cpe_uri: "cpe:/o:debian:debian_linux:12.0" version: "1.1.0" benchmark_document: "CIS Debian Linux 12" }
    title: "Ensure journald ForwardToSyslog is disabled"
    description: 
      "Data from journald should be kept within the service and not forwarded to other logging mechanisms."
    rationale: 
      "Logs should be handled exclusively by journald to prevent unnecessary forwarding and enhance security."
    remediation: 
      "Set the following parameter in the [Journal] section of /etc/systemd/journald.conf or a file in /etc/systemd/journald.conf.d/ ending in .conf:\n" 
      "[Journal]\n" 
      "ForwardToSyslog=no\n\n" 
      "After updating the configuration, reload or restart systemd-journald:\n\n" 
      "# systemctl reload-or-restart systemd-journald"
    cis_benchmark: {
      profile_level: 1
      severity: MEDIUM
    }
    scan_instructions:
      "generic:{check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{files_in_dir:{dir_path:\"/etc/systemd/journald.conf.d/\", filename_regex:\".*\\\\.conf\", recursive:false}}"
      "      content_entry:{"
      "        match_type: NONE_MATCH"
      "        match_criteria:{"
      "          filter_regex: \"[^#]*\\\\s*ForwardToSyslog\\\\s*=\\\\s*yes.*\""
      "          expected_regex: \"[^#]*\\\\s*ForwardToSyslog\\\\s*=\\\\s*yes.*\""
      "        }"
      "      }"
      "    }"
      "    file_checks:{"
      "      files_to_check:{single_file:{path:\"/etc/systemd/journald.conf\"}}"
      "      content_entry:{"
      "        match_type: ALL_MATCH_ANY_ORDER"
      "        match_criteria:{"
      "          filter_regex: \"[^#]*\\\\s*ForwardToSyslog\\\\s*=\\\\s*no.*\""
      "          expected_regex:  \"[^#]*\\\\s*ForwardToSyslog\\\\s*=\\\\s*no.*\""
      "        }"
      "      }"
      "    }"
      "}}"
  }
}
benchmark_configs: {
  id: "ensure-journald-storage-configured"
  compliance_note: {
    version: { cpe_uri: "cpe:/o:debian:ubuntu_linux:22.04" version: "2.0.0" benchmark_document: "CIS Ubuntu 22.04" }
    version: { cpe_uri: "cpe:/o:debian:debian_linux:12.0" version: "1.1.0" benchmark_document: "CIS Debian Linux 12" }
    title: "Ensure journald Storage is configured"
    description: 
      "Data from journald may be stored in volatile memory or persisted locally on the server. Logs in memory will be lost upon a system reboot. By persisting logs to local disk on the server, they are protected from loss due to a reboot."
    rationale: 
      "Writing log data to disk provides the ability to forensically reconstruct events which may have impacted the operations or security of a system even after a system crash or reboot."
    remediation: 
      "Set the following parameter in the [Journal] section of /etc/systemd/journald.conf or a file in /etc/systemd/journald.conf.d/ ending in .conf:\n\n" 
      "[Journal]\n" 
      "Storage=persistent\n\n" 
      "After updating the configuration, reload or restart systemd-journald:\n\n" 
      "# systemctl reload-or-restart systemd-journald"
    cis_benchmark: {
      profile_level: 1
      severity: MEDIUM
    }
    scan_instructions:
      "generic:{check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{files_in_dir:{dir_path:\"/etc/systemd/\", filename_regex:\".*\\\\.conf\", recursive:true}}"
      "      content_entry:{"
      "        match_type: ALL_MATCH_ANY_ORDER"
      "        match_criteria:{"
      "          filter_regex: \"[^#]*\\\\s*Storage\\\\s*=\\\\s*(persistent|auto|volatile).*\""
      "          expected_regex: \"[^#]*\\\\s*Storage\\\\s*=\\\\s*persistent\""
      "        }"
      "      }"
      "    }"
      "}}"
  }
}
benchmark_configs: {
  id: "audit-backlog-limit-sufficient"
  compliance_note: {
    version: { cpe_uri: "cpe:/o:debian:ubuntu_linux:22.04" version: "2.0.0" benchmark_document: "CIS Ubuntu 22.04" }
    version: { cpe_uri: "cpe:/o:debian:debian_linux:12.0" version: "1.1.0" benchmark_document: "CIS Debian Linux 12" }
    title: "Ensure Audit Backlog Limit is Sufficient"
    description: 
      "This configuration ensures that the audit subsystem's queue for audit events has a sufficient backlog limit to prevent loss of audit data during high activity periods."
    rationale: 
      "Setting a sufficient audit backlog limit minimizes the risk of losing critical audit data, enhancing the reliability of audit records in detecting potential malicious activities."
    remediation: 
      "Edit `/etc/default/grub` to include `audit_backlog_limit=8192` or a higher value in the `GRUB_CMDLINE_LINUX` configuration. Update the GRUB configuration with the command `update-grub`."
    cis_benchmark: {
      profile_level: 2
      severity: HIGH
    }
    scan_instructions:
      "scan_type_specific:{instance_scanning:{"
      "  check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{single_file:{path:\"/boot/grub/grub.cfg\"}}"
      "      content_entry:{"
      "        match_type: ALL_MATCH_ANY_ORDER"
      "        match_criteria: {"
      "          filter_regex: \"\\b(audit_backlog_limit=(8192|[89][0-9]{3,}|[1-9][0-9]{4,}))\\b.*\""
      "          expected_regex: \"\\b(audit_backlog_limit=(8192|[89][0-9]{3,}|[1-9][0-9]{4,}))\\b.*\""
      "        }"
      "      }"
      "    }"
      "  }"
      "}}"
  }
}
benchmark_configs: {
  id: "system-warns-on-audit-logs-low-space"
  compliance_note: {
    version: { cpe_uri: "cpe:/o:debian:ubuntu_linux:22.04" version: "2.0.0" benchmark_document: "CIS Ubuntu 22.04" }
    version: { cpe_uri: "cpe:/o:debian:debian_linux:12.0" version: "1.1.0" benchmark_document: "CIS Debian Linux 12" }
    title: "Ensure System Warns When Audit Logs Are Low on Space"
    description: 
      "This configuration ensures that the system is configured to warn or take appropriate actions when audit logs are low on space, preserving the integrity and continuity of logging."
    rationale: 
      "Configuring the system to handle low audit log space helps prevent loss of critical audit data and enhances the reliability of audit records in monitoring and detecting security events."
    remediation: 
      "Edit `/etc/audit/auditd.conf` to set the `space_left_action` parameter to `email`, `exec`, `single`, or `halt` and the `admin_space_left_action` parameter to `single` or `halt`:\n"
      "```\n"
      "space_left_action = email"
      "admin_space_left_action = single"
      "```\n"
    cis_benchmark: {
      profile_level: 2
      severity: HIGH
    }
    scan_instructions:
      "generic:{check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{single_file:{path:\"/etc/audit/auditd.conf\"}}"
      "      content_entry:{"
      "        match_type: ALL_MATCH_ANY_ORDER"
      "        match_criteria: {"
      "          filter_regex:  \"[^#]*\\\\bspace_left_action\\\\s*=\\\\s*\\\\b(email|exec|single|halt)\\\\b.*\""
      "          expected_regex: \"[^#]*\\\\bspace_left_action\\\\s*=\\\\s*\\\\b(email|exec|single|halt)\\\\b.*\""
      "        }"
      "      }"
      "    }"
      "    file_checks:{"
      "      files_to_check:{single_file:{path:\"/etc/audit/auditd.conf\"}}"
      "      content_entry:{"
      "        match_type: ALL_MATCH_ANY_ORDER"
      "        match_criteria: {"
      "          filter_regex: \"[^#]*\\\\badmin_space_left_action\\\\s*=\\\\s*\\\\b(single|halt)\\\\b.*\""
      "          expected_regex:  \"[^#]*\\\\badmin_space_left_action\\\\s*=\\\\s*\\\\b(single|halt)\\\\b.*\""
      "        }"
      "      }"
      "  }"
      "}}"
  }
}
benchmark_configs: {
  id: "rpcbind-not-in-use"
  compliance_note: {
    version: { cpe_uri: "cpe:/o:debian:ubuntu_linux:22.04" version: "2.0.0" benchmark_document: "CIS Ubuntu 22.04" }
    title: "Ensure_rpcbind_services_are_not_in_use"
    description: 
      "The rpcbind utility maps RPC services to the ports on which they listen. RPC processes notify rpcbind when they start, registering the ports they are listening on and the RPC program numbers they expect to serve."
    rationale: 
      "A small request sent to the Portmapper generates a large response, making it a suitable tool for DDoS attacks. If rpcbind is not required, removing it reduces the potential attack surface."
    remediation: 
      "1. Stop and mask the rpcbind.socket and rpcbind.service to ensure they do not run:\n"
      "```\n"
      "# systemctl stop rpcbind.socket rpcbind.service\n"
      "# systemctl mask rpcbind.socket rpcbind.service\n"
      "```\n"
      "2. Remove the rpcbind package if it is not required as a dependency:\n"
      "```\n"
      "# apt purge rpcbind\n"
      "```\n"
      "Note: If rpcbind is required for dependencies, ensure the socket and service are stopped and masked."
    cis_benchmark: {
      profile_level: 1
      severity: MEDIUM
    }
    scan_instructions:
      "generic:{check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{process_path:{proc_name:\"rpcbind\"}}"
      "      existence:{should_exist:false}"
      "    }"
      "}}"
  }
}
benchmark_configs: {
  id: "ensure-password-failed-attempts-lockout-includes-root-account"
  compliance_note: {
    version: { cpe_uri: "cpe:/o:debian:ubuntu_linux:22.04" version: "2.0.0" benchmark_document: "CIS Ubuntu 22.04" }
    version: { cpe_uri: "cpe:/o:debian:debian_linux:12.0" version: "1.1.0" benchmark_document: "CIS Debian Linux 12" }
    title: "Ensure password failed attempts lockout includes root account"
    description: 
      "even_deny_root - Root account can become locked as well as regular accounts. root_unlock_time=n - This option implies even_deny_root option. Allow access after n seconds to root account after the account is locked. In case the option is not specified the value is the same as of the unlock_time option."
    rationale: 
      "Locking out user IDs after n unsuccessful consecutive login attempts mitigates brute force password attacks against your systems."
    remediation: 
      "Edit /etc/security/faillock.conf:\n"
      "• Remove or update any line containing root_unlock_time, - OR - set it to a value of 60 or more\n"
      "• Update or add the following line:\n"
      "even_deny_root\n"
      "\nRun the following command:\n"
      "# grep -Pl '\\bpam_faillock\\.so\\h+([^#\\n\\r]+\\h+)?(even_deny_root|root_unlock_time)' /usr/share/pam-configs/*\n"
      "Edit any returned files and remove the even_deny_root and root_unlock_time arguments from the pam_faillock.so line(s):"
    cis_benchmark: {
      profile_level: 2
      severity: MEDIUM
    }
    scan_instructions: 
      "generic:{check_alternatives:{"
      "  file_checks:{"
      "    files_to_check:{single_file:{path:\"/etc/security/faillock.conf\"}}"
      "    content_entry:{"
      "      match_type: ALL_MATCH_ANY_ORDER"
      "      match_criteria: {"
      "        filter_regex:  \"even_deny_root.*\""
      "        expected_regex:  \"even_deny_root.*\""
      "      }"
      "    }"
      "  }"
      "}"
      "check_alternatives:{"
      "  file_checks:{"
      "    files_to_check:{single_file:{path:\"/etc/security/faillock.conf\"}}"
      "      content_entry:{"
      "        match_type: ALL_MATCH_ANY_ORDER"     
      "	       match_criteria: {"
      "          filter_regex: \"[^#]*\\\\broot_unlock_time\\\\s*=\\\\s*[0-5]?\\\\d\\\\s*\""
      "          expected_regex: \"[^#]*\\\\broot_unlock_time\\\\s*=\\\\s*[0-5]?\\\\d\\\\s*\""
      "        }"
      "      }"
      "  }"
      "}}"
  }
}
benchmark_configs: {
  id: "ensure-root-password-is-set"
  compliance_note: {
    version: { cpe_uri: "cpe:/o:debian:ubuntu_linux:22.04" version: "2.0.0" benchmark_document: "CIS Ubuntu 22.04" }
    version: { cpe_uri: "cpe:/o:debian:debian_linux:12.0" version: "1.1.0" benchmark_document: "CIS Debian Linux 12" }
    title: "Ensure root password is set"
    description: 
      "There are a number of methods to access the root account directly. Without a password set, any user would be able to gain access and control over the entire system."
    rationale: 
      "Access to root should be secured at all times."
    remediation: 
      "Run the following command to set a password for the root user:\n"
      "```\n"
      "# passwd root\n"
      "```\n"
      "Note: Ensure no automated processes rely on root access without authentication."
    cis_benchmark: {
      profile_level: 1
      severity: HIGH
    }
    scan_instructions: 
      "generic:{check_alternatives:{"
      "  file_checks:{"
      "    files_to_check:{single_file:{path:\"/etc/shadow\"}}"
      "    content_entry:{"
      "      match_type: ALL_MATCH_STRICT_ORDER"
      "      match_criteria: {"
      "        filter_regex: \"root:[^!*]+:\""
      "        expected_regex: \"root:[^!*]+:\""
      "      }"
      "    }"
      "  }"
      "}}"
  }
}
benchmark_configs: {
  id: "automount-removable-media-disabled"
  compliance_note: {
    version: { cpe_uri: "cpe:/o:debian:ubuntu_linux:22.04" version: "2.0.0" benchmark_document: "CIS Ubuntu 22.04" }
    title: "Ensure automatic mounting of removable media is disabled"
    description:
      "By default GNOME automatically mounts removable media when inserted as a convenience "
      "to the user."
    rationale:
      "With automounting enabled anyone with physical access could attach a USB drive or disc "
      "and have its contents available in system even if they lacked permissions to mount it "
      "themselves."
    remediation:
      "Ensure that automatic mounting of media is disabled for all GNOME users:\n"
      "```\n"
      "# cat << EOF >> /etc/dconf/db/local.d/00-media-automount\n"
      "[org/gnome/desktop/media-handling]\n"
      "automount=false\n"
      "automount-open=false\n"
      "EOF\n"
      "```\n"
      "Apply the changes with:\n"
      "```\n"
      "# dconf update\n"
      "```\n"
    cis_benchmark: {
      profile_level: 2
      severity: LOW
    }
    scan_instructions:
      "generic:{check_alternatives:{"
      "    file_checks:{"
      "        files_to_check:{single_file:{path:\"/etc/glib-2.0/settings/defaults\"}}"
      "        content_entry:{"
      "        match_type: ALL_MATCH_ANY_ORDER"
      "        delimiter: \"\\0\""
      "        match_criteria: {"
      "            filter_regex: \"\\\\[org/gnome/desktop/media-handling\\\\].*(\\\\n\\\\[|$)\""
      "            expected_regex: \".*\\\\nautomount=false.*\""
      "        }"
      "        match_criteria: {"
      "            filter_regex: \"\\\\[org/gnome/desktop/media-handling\\\\].*(\\\\n\\\\[|$)\""
      "            expected_regex: \".*\\\\nautomount-open=false.*\""
      "        }"
      "        }"
      "        } "
      "    }"
      "}"
  }
}
benchmark_configs: {
  id: "ensure-ftp-client-not-installed"
  compliance_note: {
    version: { cpe_uri: "cpe:/o:debian:ubuntu_linux:22.04" version: "2.0.0" benchmark_document: "CIS Ubuntu 22.04" }
    title: "Ensure FTP client is not installed"
    description: 
      "FTP (File Transfer Protocol) is a traditional and widely used standard tool for transferring files between a server and clients over a network. However, FTP does not protect the confidentiality of data or authentication credentials. It is recommended to use SFTP if file transfer is required. Unless the system needs to run as an FTP server, it is recommended to remove the FTP package to reduce the potential attack surface."
    rationale: 
      "FTP does not protect data confidentiality or authentication credentials, making it vulnerable to interception. Removing unnecessary FTP clients reduces potential security risks."
    remediation: 
      "Run the following command to uninstall FTP:\n"
      "```\n"
      "# apt purge ftp\n"
      "```\n"
      "Ensure alternative secure protocols like SFTP are used if file transfer is required."
    cis_benchmark: {
      profile_level: 1
      severity: MEDIUM
    }
    scan_instructions:
      "generic:{check_alternatives:{"
      "  file_checks:{"
      "    files_to_check:{single_file:{path:\"/usr/bin/ftp\"}}"
      "    files_to_check:{single_file:{path:\"/usr/sbin/ftp\"}}"
      "    files_to_check:{single_file:{path:\"/bin/ftp\"}}"
      "    files_to_check:{single_file:{path:\"/sbin/ftp\"}}"
      "    existence:{should_exist: false}"
      "  }"
      "}}"
  }
}
benchmark_configs: {
  id: "ensure-single-time-sync-daemon"
  compliance_note: {
    version: { cpe_uri: "cpe:/o:debian:ubuntu_linux:22.04" version: "2.0.0" benchmark_document: "CIS Ubuntu 22.04" }
    title: "Ensure a single time synchronization daemon is in use"
    description:
      "System time should be synchronized between all systems in an environment. This is typically done by establishing an authoritative time server or set of servers and having all systems synchronize their clocks to them."
    rationale:
      "Time synchronization is important to support time-sensitive security mechanisms and ensures log files have consistent time records across the enterprise, which aids in forensic investigations."
    remediation:
      "On physical systems, and virtual systems where host-based time synchronization is not available:\n"
      "1. Select one of the two time synchronization daemons; chrony or systemd-timesyncd.\n"
      "   - To use chrony:\n"
      "     ```\n"
      "     # apt install chrony\n"
      "     # systemctl stop systemd-timesyncd.service\n"
      "     # systemctl mask systemd-timesyncd.service\n"
      "     ```\n"
      "   - To use systemd-timesyncd:\n"
      "     ```\n"
      "     # apt purge chrony\n"
      "     # apt autoremove chrony\n"
      "     ```\n"
      "Avoid enabling both daemons simultaneously, as this may lead to unreliable results."
    cis_benchmark: {
      profile_level: 1
      severity: MEDIUM
    }
    scan_instructions:
      "generic:{check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{process_path:{proc_name:\"chronyd\"}}"
      "      existence:{should_exist:true}"
      "      non_compliance_msg: \"chronyd is not active.\""
      "    }"
      "    file_checks:{"
      "      files_to_check:{single_file:{path:\"/etc/systemd/system/systemd-timesyncd.service\"}}"
      "      existence:{should_exist:true}"
      "      non_compliance_msg: \"systemd-timesyncd should be masked.\""
      "    }"
      "}"
      "check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{single_file:{path:\"/lib/systemd/systemd-timesyncd\"}}"
      "      existence:{should_exist:true}"
      "      non_compliance_msg: \"systemd-timesyncd is not active.\""
      "    }"
      "    file_checks:{"
      "      files_to_check:{process_path:{proc_name:\"chronyd\"}}"
      "      existence:{should_exist:false}"
      "      non_compliance_msg: \"chronyd is active while systemd-timesyncd is expected.\""
      "    }"
      "}"
    "}"
  }
}
benchmark_configs: {
  id: "ensure-chrony-running-as-user-chrony"
  compliance_note: {
    version: { cpe_uri: "cpe:/o:debian:ubuntu_linux:22.04" version: "2.0.0" benchmark_document: "CIS Ubuntu 22.04" }
    version: { cpe_uri: "cpe:/o:debian:debian_linux:12.0" version: "1.1.0" benchmark_document: "CIS Debian Linux 12" }
    title: "Ensure chrony is running as user _chrony"
    description:
      "The chrony package is installed with a dedicated user account _chrony. This account is granted the access required by the chronyd service."
    rationale:
      "The chronyd service should run with only the required privileges."
    remediation:
      "Add or edit the user line to /etc/chrony/chrony.conf or a file ending in .conf in /etc/chrony/conf.d/:\n"
      "```\n"
      "user _chrony\n"
      "```\n"
      "- OR - If another time synchronization service is in use on the system, remove chrony:\n"
      "```\n"
      "# apt purge chrony\n"
      "# apt autoremove chrony\n"
      "```\n"
    cis_benchmark: {
      profile_level: 1
      severity: MEDIUM
    }
    scan_instructions:
      "scan_type_specific:{instance_scanning:{"
      "  check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{files_in_dir:{dir_path:\"/etc/chrony/\", filename_regex:\".*\\\\.conf\", recursive:true}}"
      "      content_entry:{"
      "        match_type: ALL_MATCH_ANY_ORDER"
      "        match_criteria:{"
      "          filter_regex: \"\\\\s*user\\\\s+_chrony\\\\b.*\""
      "          expected_regex: \"\\\\s*user\\\\s+_chrony\\\\b.*\""
      "        }"
      "      }"
      "      non_compliance_msg: \"The user configuration for chronyd is missing or incorrect.\""
      "    }"
      "    file_checks:{"
      "      files_to_check:{process_path:{proc_name:\"chronyd\"}}"
      "      permission:{user:{name:\"_chrony\" should_own:true}}"
      "      non_compliance_msg: \"chronyd is not running as the user _chrony.\""
      "    }"
      "  }"
      "  check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{single_file:{path:\"/etc/chrony/chrony.conf\"}}"
      "      existence:{should_exist:false}"
      "      non_compliance_msg: \"chrony is not in use on this system.\""
      "    }"
      "  }"
      "}"
      "image_scanning:{"
      "  check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{files_in_dir:{dir_path:\"/etc/chrony/\", filename_regex:\".*\\\\.conf\", recursive:true}}"
      "      content_entry:{"
      "        match_type: ALL_MATCH_ANY_ORDER"
      "        match_criteria:{"
      "          filter_regex: \"\\\\s*user\\\\s+_chrony\\\\b.*\""
      "          expected_regex: \"\\\\s*user\\\\s+_chrony\\\\b.*\""
      "        }"
      "      }"
      "    }"
      "  }"
      "  check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{single_file:{path:\"/etc/chrony/chrony.conf\"}}"
      "      existence:{should_exist:false}"
      "    }"
      "  }"
      "}}"
  }
}
benchmark_configs: {
  id: "ensure-bluetooth-services-disabled"
  compliance_note: {
    version: { cpe_uri: "cpe:/o:debian:ubuntu_linux:22.04" version: "2.0.0" benchmark_document: "CIS Ubuntu 22.04" }
    version: { cpe_uri: "cpe:/o:debian:debian_linux:12.0" version: "1.1.0" benchmark_document: "CIS Debian Linux 12" }
    title: "Ensure Bluetooth Services Are Not in Use"
    description:
      "Bluetooth is a short-range wireless technology standard that is used for exchanging data between devices over short distances. If Bluetooth is not needed, it should be disabled to reduce the potential attack surface."
    rationale:
      "Disabling Bluetooth services prevents attackers from exploiting vulnerabilities in Bluetooth technology, such as bluesnarfing, and reduces the risk of data corruption, theft, or loss due to malicious activity."
    remediation:
      "Run the following commands to stop the Bluetooth service and remove the bluez package:\n"
      "```\n"
      "# systemctl stop bluetooth.service\n"
      "# apt purge bluez\n"
      "```\n"
      "- OR - If the bluez package is required as a dependency:\n"
      "```\n"
      "# systemctl stop bluetooth.service\n"
      "# systemctl mask bluetooth.service\n"
      "```\n"
      "Note: A reboot may be required."
    cis_benchmark: {
      profile_level: 1
      severity: MEDIUM
    }
    scan_instructions:
      "scan_type_specific:{"
      "  instance_scanning:{"
      "    check_alternatives:{"
      "      file_checks:{"
      "        files_to_check:{process_path:{proc_name:\"bluetoothd\"}}"
      "        existence:{should_exist:false}"
      "        non_compliance_msg: \"bluetoothd is running, Bluetooth services are active.\""
      "      }"
      "      file_checks:{"
      "        files_to_check:{single_file:{path:\"/etc/systemd/system/bluetooth.service\"}}"
      "        existence:{should_exist:false}"
      "        non_compliance_msg: \"The Bluetooth service is not masked or disabled.\""
      "      }"
      "      file_checks:{"
      "        files_to_check:{single_file:{path:\"/usr/sbin/bluetoothd\"}}"
      "        existence:{should_exist:false}"
      "        non_compliance_msg: \"The bluez package is installed.\""
      "      }"
      "    }"
      "  }"
      "  image_scanning:{"
      "    check_alternatives:{"
      "      file_checks:{"
      "        files_to_check:{files_in_dir:{dir_path:\"/etc/systemd/system/\", filename_regex:\"bluetooth.service\", recursive:true}}"
      "        existence:{should_exist:false}"
      "        non_compliance_msg: \"The Bluetooth service configuration file is present in the image.\""
      "      }"
      "      file_checks:{"
      "        files_to_check:{single_file:{path:\"/usr/sbin/bluetoothd\"}}"
      "        existence:{should_exist:false}"
      "        non_compliance_msg: \"The bluez package is present in the image.\""
      "      }"
      "    }"
      "  }"
      "}"
  }
}
benchmark_configs: {
  id: "ensure-ufw-service-enabled"
  compliance_note: {
    version: { cpe_uri: "cpe:/o:debian:ubuntu_linux:22.04" version: "2.0.0" benchmark_document: "CIS Ubuntu 22.04" }
    version: { cpe_uri: "cpe:/o:debian:debian_linux:12.0" version: "1.1.0" benchmark_document: "CIS Debian Linux 12" }
    title: "Ensure ufw Service is Enabled"
    description: 
      "Uncomplicated Firewall (ufw) is a frontend for iptables that provides a framework for managing Netfilter, offering both command-line and GUI interfaces for firewall management."
    rationale: 
      "The `ufw` service must be enabled and running to ensure proper system protection by the firewall."
    remediation: 
      "To unmask, enable, and start the `ufw` daemon:\n"
      "```\n"
      "# systemctl unmask ufw.service\n"
      "# systemctl --now enable ufw.service\n"
      "# ufw enable\n"
      "```\n"
      "Note: Ensure to configure rules to avoid being locked out of the system, especially when connected over SSH."
    cis_benchmark: {
      profile_level: 1
      severity: HIGH
    }
    scan_instructions:
      "scan_type_specific:{"
      "  instance_scanning:{"
      "    check_alternatives:{"
      "      file_checks:{"
      "        files_to_check:{single_file:{path:\"/lib/systemd/system/ufw.service\"}}"
      "        existence:{should_exist:true}"
      "        non_compliance_msg: \"The ufw service file is missing or masked.\""
      "      }"
      "      file_checks:{"
      "        files_to_check:{single_file:{path:\"/etc/systemd/system/ufw.service\"}}"
      "        existence:{should_exist:false}"
      "        non_compliance_msg: \"The ufw service file is missing or masked.\""
      "      }"
      "    }"
      "  }"
      "  image_scanning:{"
      "    check_alternatives:{"
      "      file_checks:{"
      "        files_to_check:{files_in_dir:{dir_path:\"/lib/systemd/system/\", filename_regex:\"ufw.service\", recursive:true}}"
      "        existence:{should_exist:true}"
      "        non_compliance_msg: \"The ufw service file is missing in the image.\""
      "      }"
      "    }"
      "  }"
      "}"
  }
}
benchmark_configs: {
  id: "ufw-uninstalled-or-disabled-with-iptables"
  compliance_note: {
    version: {
      cpe_uri: "cpe:/o:debian:ubuntu_linux:22.04"
      version: "2.0.0"
      benchmark_document: "CIS Ubuntu 22.04"
    }
    version: { cpe_uri: "cpe:/o:debian:debian_linux:12.0" version: "1.1.0" benchmark_document: "CIS Debian Linux 12" }
    title: "Ensure ufw is uninstalled or disabled with iptables"
    description: 
      "Uncomplicated Firewall (UFW) is a program for managing a Netfilter firewall designed to be easy to use. Running iptables.persistent with ufw enabled may lead to conflict and unexpected results."
    rationale: 
      "Running iptables.persistent with UFW enabled may lead to conflict and unexpected results. Ensuring only one is active prevents issues."
    remediation: 
      "To remove or disable UFW, run one of the following:\n"
      "```\n"
      "# apt purge ufw\n"
      "-OR-\n"
      "# ufw disable\n"
      "# systemctl stop ufw.service\n"
      "# systemctl mask ufw.service\n"
      "```\n"
      "Note: Run `ufw disable` before `systemctl mask ufw.service` to ensure proper disabling of UFW."
    cis_benchmark: {
      profile_level: 1
      severity: MEDIUM
    }
    scan_instructions:
      "scan_type_specific:{"
      "  instance_scanning:{"
      "    check_alternatives:{"
      "      file_checks:{"
      "        files_to_check:{single_file:{path:\"/usr/sbin/iptables\"}}"
      "        existence:{should_exist:true}"
      "      }"
      "      file_checks:{"
      "        files_to_check:{single_file:{path:\"/etc/systemd/system/ufw.service\"}}"
      "        existence:{should_exist:true}"
      "      }"
      "    }"
      "    check_alternatives:{"
      "      file_checks:{"
      "        files_to_check:{single_file:{path:\"/usr/sbin/iptables\"}}"
      "        existence:{should_exist:true}"
      "      }"
      "      file_checks:{"
      "        files_to_check:{single_file:{path:\"/usr/sbin/ufw\"}}"
      "        existence:{should_exist:false}"
      "      }"
      "    }"
      "  }"
      "  image_scanning:{"
      "    check_alternatives:{"
      "      file_checks:{"
      "        files_to_check:{single_file:{path:\"/usr/sbin/iptables\"}}"
      "        existence:{should_exist:true}"
      "      }"
      "      file_checks:{"
      "        files_to_check:{single_file:{path:\"/usr/sbin/ufw\"}}"
      "        existence:{should_exist:false}"
      "      }"
      "    }"
      "    check_alternatives:{"
      "      file_checks:{"
      "        files_to_check:{single_file:{path:\"/etc/systemd/system/multi-user.target.wants/ufw.service\"}}"
      "        existence:{should_exist:false}"
      "      }"
      "    }"
      "  }"
      "}"
  }
}
benchmark_configs: {
  id: "ensure-sshd-ciphers-configured"
  compliance_note: {
    version: { cpe_uri: "cpe:/o:debian:ubuntu_linux:22.04" version: "2.0.0" benchmark_document: "CIS Ubuntu 22.04" }
    version: { cpe_uri: "cpe:/o:debian:debian_linux:12.0" version: "1.1.0" benchmark_document: "CIS Debian Linux 12" }
    title: "Ensure sshd Ciphers are configured"
    description: 
      "This variable limits the ciphers that SSH can use during communication. The only strong ciphers currently FIPS 140 compliant are:\n"
      "- aes256-gcm@openssh.com\n"
      "- aes128-gcm@openssh.com\n"
      "- aes256-ctr\n"
      "- aes192-ctr\n"
      "- aes128-ctr."
    rationale: 
      "Weak ciphers cannot be relied upon to provide confidentiality or integrity. For example, Triple DES ciphers are vulnerable to the \"Sweet32\" attack, and block cipher algorithms in CBC mode make systems susceptible to plain text recovery attacks."
    remediation: 
      "Edit the `/etc/ssh/sshd_config` file and modify the Ciphers line to exclude weak ciphers. Use a comma-separated list prefixed by `-` to explicitly deny ciphers:\n"
      "```\n"
      "Ciphers -3des-cbc,aes128-cbc,aes192-cbc,aes256-cbc\n"
      "```\n"
      "Ensure no weak ciphers are configured."
    cis_benchmark: {
      profile_level: 1
      severity: HIGH
    }
    scan_instructions:
      "generic:{check_alternatives:{"
      "  file_checks:{"
      "    files_to_check:{single_file:{path:\"/etc/ssh/sshd_config\"}}"
      "    content_entry:{"
      "      match_type: NONE_MATCH"
      "      match_criteria: {"
      "        filter_regex: \"Ciphers .*\""
      "        expected_regex: \"Ciphers .*3des-cbc(,|$).*\""
      "      }"
      "      match_criteria: {"
      "        filter_regex: \"Ciphers .*\""
      "        expected_regex: \"Ciphers .*aes128-cbc(,|$).*\""
      "      }"
      "      match_criteria: {"
      "        filter_regex: \"Ciphers .*\""
      "        expected_regex: \"Ciphers .*aes192-cbc(,|$).*\""
      "      }"
      "      match_criteria: {"
      "        filter_regex: \"Ciphers .*\""
      "        expected_regex: \"Ciphers .*aes256-cbc(,|$).*\""
      "      }"
      "    }"
      "  }"
      "}}"
  }
}
benchmark_configs: {
  id: "ensure-sshd-clientalive-configured"
  compliance_note: {
    version: { cpe_uri: "cpe:/o:debian:ubuntu_linux:22.04" version: "2.0.0" benchmark_document: "CIS Ubuntu 22.04" }
    version: { cpe_uri: "cpe:/o:debian:debian_linux:12.0" version: "1.1.0" benchmark_document: "CIS Debian Linux 12" }
    title: "Ensure sshd ClientAliveInterval and ClientAliveCountMax are configured"
    description:
      "The two options ClientAliveInterval and ClientAliveCountMax control the timeout "
      "of SSH sessions. The ClientAliveInterval option sets a timeout interval in seconds, "
      "after which, if no data has been received from the client, sshd will send a message "
      "to request a response. The ClientAliveCountMax option determines the number of such "
      "messages sent before terminating the session. For example, with ClientAliveInterval "
      "set to 15 seconds and ClientAliveCountMax set to 3, unresponsive SSH clients will "
      "be disconnected after approximately 45 seconds."
    rationale:
      "In order to prevent resource exhaustion and ensure unresponsive SSH sessions are "
      "properly terminated, appropriate values should be set for ClientAliveInterval and "
      "ClientAliveCountMax. Idle connections could lead to resource exhaustion or be used "
      "as a vector for a Denial of Service attack. Recommended values are site-dependent, "
      "but typical settings are a timeout of 15-45 seconds."
    remediation:
      "Edit the `/etc/ssh/sshd_config` file to set the ClientAliveInterval and "
      "ClientAliveCountMax parameters above any Include or Match entries according to "
      "site policy. Example configuration:\n"
      "```\n"
      "ClientAliveInterval 15\n"
      "ClientAliveCountMax 3\n"
      "```\n"
      "Ensure that any Match blocks are configured appropriately for specific users or "
      "groups as needed."
    cis_benchmark: {
      profile_level: 1
      severity: LOW
    }
    scan_instructions:
      "generic:{"
      "  check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{single_file:{path:\"/etc/ssh/sshd_config\"}}"
      "      content_entry:{"
      "        match_type: ALL_MATCH_ANY_ORDER"
      "        match_criteria: {"
      "          filter_regex: \"ClientAliveInterval .*\""
      "          expected_regex: \"ClientAliveInterval (\\\\d+)\""
      "          group_criteria:{"
      "            group_index: 1"
      "            type: LESS_THAN"
      "            const: 46"
      "          }"
      "        }"
      "        match_criteria: {"
      "          filter_regex: \"ClientAliveInterval .*\""
      "          expected_regex: \"ClientAliveInterval (\\\\d+)\""
      "          group_criteria:{"
      "            group_index: 1"
      "            type: GREATER_THAN"
      "            const: 0"
      "          }"
      "        }"
      "        match_criteria: {"
      "          filter_regex: \"ClientAliveCountMax .*\""
      "          expected_regex: \"ClientAliveCountMax (\\\\d+)\""
      "          group_criteria:{"
      "            group_index: 1"
      "            type: GREATER_THAN"
      "            const: 0"
      "          }"
      "        }"
      "        match_criteria: {"
      "          filter_regex: \"ClientAliveCountMax .*\""
      "          expected_regex: \"ClientAliveCountMax (\\\\d+)\""
      "          group_criteria:{"
      "            group_index: 1"
      "            type: LESS_THAN"
      "            const: 4"
      "          }"
      "        }"
      "      }"
      "    }"
      "  }"
      "}"
  }
}
benchmark_configs: {
  id: "ensure-accounts-without-valid-shell-locked"
  compliance_note: {
    version: { cpe_uri: "cpe:/o:debian:ubuntu_linux:22.04" version: "2.0.0" benchmark_document: "CIS Ubuntu 22.04" }
    version: { cpe_uri: "cpe:/o:debian:debian_linux:12.0" version: "1.1.0" benchmark_document: "CIS Debian Linux 12" }
    title: "Ensure accounts without a valid login shell are locked"
    description:
      "Accounts that are not intended for interactive login should have their login "
      "shell set to nologin or a similar shell that prevents interactive sessions. "
      "Additionally, these accounts should be locked to prevent potential misuse."
    rationale:
      "It is important to make sure that accounts not used by regular users are prevented "
      "from being used for interactive sessions. Most distributions set these accounts to "
      "an invalid password or nologin shell by default. Ensuring these accounts are locked "
      "adds an additional layer of security."
    remediation:
      "Run the following command to lock any non-root accounts without a valid login shell "
      "returned by the audit:\n"
      "```\n"
      "# usermod -L <user>\n"
      "```\n"
      "Alternatively, set the shell for accounts without valid shells to nologin:\n"
      "```\n"
      "# usermod -s $(which nologin) <user>\n"
      "```\n"
    cis_benchmark: {
      profile_level: 1
      severity: LOW
    }
    scan_instructions:
      "generic:{check_alternatives:{"
      "  file_checks:{"
      "    files_to_check:{single_file:{path:\"/etc/passwd\"}}"
      "    repeat_config:{type: FOR_EACH_USER_WITH_LOGIN}"
      "    content_entry:{"
      "      match_type: NONE_MATCH"
      "      match_criteria: {"
      "        filter_regex: \"$user:.*:.*:.*:.*:.*:(/bin/bash|/bin/sh|/bin/zsh|/bin/tcsh|/bin/csh)$\""
      "      }"
      "    }"
      "    non_compliance_msg: \"Some non-root accounts have valid login shells and are not locked.\""
      "  }"
      "  file_checks:{"
      "    files_to_check:{single_file:{path:\"/etc/shadow\"}}"
      "    repeat_config:{type: FOR_EACH_USER_WITH_LOGIN}"
      "    content_entry:{"
      "      match_type: ALL_MATCH_ANY_ORDER"
      "      match_criteria: {"
      "        filter_regex: \"$user:.*:.*:.*:.*:.*:.*:.*:.*\""
      "        expected_regex: \"(.*:.*[*!].*:.*:.*:.*:.*:.*:.*:.*)|(root:.*:.*:.*:.*:.*:.*:.*:.*)\""
      "      }"
      "    }"
      "    non_compliance_msg: \"Some non-root accounts are not locked.\""
      "  }"
      "}}"
  }
}
benchmark_configs: {
  id: "xinetd-services-not-in-use"
  compliance_note: {
    version: { cpe_uri: "cpe:/o:debian:ubuntu_linux:22.04" version: "2.0.0" benchmark_document: "CIS Ubuntu 22.04" }
    title: "Ensure xinetd services are not in use"
    description:
      "The eXtended InterNET Daemon (xinetd) is a service dispatcher for well-known "
      "internet protocols. While it is often used in legacy environments, xinetd "
      "is not commonly required on modern systems and should be disabled unless needed."
    rationale:
      "Disabling xinetd helps reduce the attack surface by ensuring unnecessary "
      "services are not available."
    remediation:
      "Run the following commands to stop xinetd.service, and remove the xinetd package:\n"
      "```\n"
      "# systemctl stop xinetd.service"
      "# apt purge xinetd"
      "```\n"
      "-OR-IF- the xinetd package is required as a dependency:\n"
      "```\n"
      "# systemctl stop xinetd.service"
      "# systemctl mask xinetd.service"
      "```\n"
    cis_benchmark: {
      profile_level: 1
      severity: MEDIUM
    }
    scan_instructions:
      "generic:{"
      "  check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{single_file:{path:\"/usr/sbin/xinetd\"}}"
      "        existence:{should_exist:false}"
      "        non_compliance_msg:\"The xinetd binary exists on the system. Please remove it unless explicitly required.\""
      "        file_display_command:\"dpkg-query -s xinetd &>/dev/null && echo 'xinetd is installed'\""
      "      }"
      "    }"
      "  check_alternatives:{"
      "      file_checks:{"
      "        files_to_check:{single_file:{path:\"/etc/init.d/xinetd\"}}"
      "        existence:{should_exist:false}"
      "        non_compliance_msg:\"The xinetd init script exists. Ensure it is disabled or removed.\""
      "        file_display_command:\"ls /etc/init.d/xinetd\""
      "      }"
      "   }"
      "}"
  }
}
benchmark_configs: {
  id: "crontab-restricted-to-authorized-users"
  compliance_note: {
    version: { cpe_uri: "cpe:/o:debian:ubuntu_linux:22.04" version: "2.0.0" benchmark_document: "CIS Ubuntu 22.04" }
    title: "Ensure crontab is restricted to authorized users"
    description:
      "crontab is the program used to install, deinstall, or list the tables used to drive the cron "
      "daemon. Each user can have their own crontab, and though these are files in /var/spool/cron/crontabs, "
      "they are not intended to be edited directly. If the /etc/cron.allow file exists, then you must be listed "
      "(one user per line) therein in order to be allowed to use this command. If the /etc/cron.allow file does "
      "not exist but the /etc/cron.deny file does exist, then you must not be listed in the /etc/cron.deny file "
      "in order to use this command. If neither of these files exists, then depending on site-dependent "
      "configuration parameters, only the super user will be allowed to use this command, or all users will be "
      "able to use this command. If both files exist then /etc/cron.allow takes precedence. Regardless of the "
      "existence of any of these files, the root administrative user is always allowed to setup a crontab."
    rationale:
      "On many systems, only the system administrator is authorized to schedule cron jobs. Using the cron.allow "
      "file to control who can run cron jobs enforces this policy. It is easier to manage an allow list than a deny "
      "list. In a deny list, you could potentially add a user ID to the system and forget to add it to the deny files."
    remediation:
      "Run the following commands to ensure proper configuration of cron access:\n"
      "```\n"
      "# [ ! -e \"/etc/cron.allow\" ] && touch /etc/cron.allow"
      "# chown root:root /etc/cron.allow"
      "# chmod u-x,g-wx,o-rwx /etc/cron.allow"
      "# [ -e \"/etc/cron.deny\" ] && chown root:root /etc/cron.deny"
      "# [ -e \"/etc/cron.deny\" ] && chmod u-x,g-wx,o-rwx /etc/cron.deny"
      "```\n"
    cis_benchmark: {
      profile_level: 1
      severity: LOW
    }
    scan_instructions:
      "generic:{check_alternatives:{"
      "  file_checks:{"
      "    files_to_check:{single_file:{path:\"/etc/cron.deny\"}}"
      "    existence:{should_exist:false}"
      "    non_compliance_msg:\"The /etc/cron.deny file exists. Remove it to restrict cron access to authorized users.\""
      "    file_display_command:\"ls /etc/cron.deny\""
      "  }"
      "  file_checks:{"
      "    files_to_check:{single_file:{path:\"/etc/cron.allow\"}}"
      "    existence:{should_exist:true}"
      "    non_compliance_msg:\"The /etc/cron.allow file is missing. Ensure it exists to restrict cron access to authorized users.\""
      "  }"
      "  file_checks:{"
      "    files_to_check:{single_file:{path:\"/etc/cron.allow\"}}"
      "    permission:{"
      "      user: {name: \"root\" should_own: true}"
      "      group: {name: \"root\" should_own: true}"
      "    }"
      "    non_compliance_msg:\"The /etc/cron.allow file has incorrect permissions or ownership. Ensure it is properly configured.\""
      "    file_display_command:\"stat -Lc 'Access: (%a/%A) Owner: (%U) Group: (%G)' /etc/cron.allow\""
      "  }"
      "}}"
  }
}
