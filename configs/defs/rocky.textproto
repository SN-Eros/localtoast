benchmark_configs: {
  id: "var-nodev"
  compliance_note: {
    version: { cpe_uri: "cpe:/o:rockylinux:rockylinux:8.5" version: "2.0.0" benchmark_document: "CIS Rocky Linux 8" }
    title: "Ensure nodev option set on /var partition"
    description: "The nodev mount option specifies that the filesystem cannot contain special devices."
    rationale:
      "Since the /var filesystem is not intended to support devices, set this option to ensure that "
      "users cannot create a block or character special devices in /var."
    remediation:
      "Edit the /etc/fstab file and add nodev to the fourth field (mounting options) for the /var "
      "partition.\n"
      "Example: \n"
      "\n```\n"
      "<device> /var <fstype> defaults, rw,nosuid, nodev, noexec, relatime 0 0\n"
      "```\n\n"
      "Run the following command to remount /var with the configured options:\n"
      "\n```\n"
      "mount -o remount /var\n"
      "```\n\n"
      "References:\n"
      "1. See the fstab(5) manual page for more information."
    cis_benchmark: {
      profile_level: 1
      severity: LOW
    }
    scan_instructions:
      "scan_type_specific:{instance_scanning:{"
      "check_alternatives:{"
      "  file_checks:{"
      "    files_to_check:{single_file:{path:\"/proc/self/mountinfo\"}}"
      "    content_entry:{"
      "      match_type: ALL_MATCH_ANY_ORDER"
      "      match_criteria: {"
      "        filter_regex: \".* /var .* - .*\""
      "        expected_regex: \".* /var .*nodev.* - .*\""
      "      }"
      "    }"
      "  }"
      "}"
      "check_alternatives:{"
      "  file_checks:{"
      "    files_to_check:{single_file:{path:\"/proc/self/mountinfo\"}}"
      "    content_entry:{"
      "      match_type: NONE_MATCH"
      "      match_criteria: {"
      "        filter_regex: \".* /var .* - .*\""
      "        expected_regex: \".* /var .* - .*\""
      "      }"
      "    }"
      "  }"
      "}}}"
  }
}
benchmark_configs: {
  id: "var-noexec"
  compliance_note: {
    version: { cpe_uri: "cpe:/o:rockylinux:rockylinux:8.5" version: "2.0.0" benchmark_document: "CIS Rocky Linux 8" }
    title: "Ensure noexec option set on /var partition"
    description: "The noexec mount option specifies that the filesystem cannot contain executable binaries."
    rationale:
      "Since the /var filesystem is only intended for variable files such as logs, set this option to "
      "ensure that users cannot run executable binaries from /var."
    remediation:
      "Edit the /etc/fstab file and add noexec to the fourth field (mounting options) for the /var "
      "partition.\n"
      "Example:\n"
      "\n```\n"
      "<device> /var <fstype> defaults, rw,nosuid, nodev, noexec, relatime 0 0\n"
      "```\n\n"
      "Run the following command to remount /var with the configured options:\n"
      "\n```\n"
      "mount -o remount /var\n"
      "```\n\n"
      "References:\n"
      "1. See the fstab(5) manual page for more information."
    cis_benchmark: {
      profile_level: 1
      severity: LOW
    }
    scan_instructions:
      "scan_type_specific:{instance_scanning:{"
      "check_alternatives:{"
      "  file_checks:{"
      "    files_to_check:{single_file:{path:\"/proc/self/mountinfo\"}}"
      "    content_entry:{"
      "      match_type: ALL_MATCH_ANY_ORDER"
      "      match_criteria: {"
      "        filter_regex: \".* /var .* - .*\""
      "        expected_regex: \".* /var .*noexec.* - .*\""
      "      }"
      "    }"
      "  }"
      "}"
      "check_alternatives:{"
      "  file_checks:{"
      "    files_to_check:{single_file:{path:\"/proc/self/mountinfo\"}}"
      "    content_entry:{"
      "      match_type: NONE_MATCH"
      "      match_criteria: {"
      "        filter_regex: \".* /var .* - .*\""
      "        expected_regex: \".* /var .* - .*\""
      "      }"
      "    }"
      "  }"
      "}}}"
  }
}
benchmark_configs: {
  id: "var-nosuid"
  compliance_note: {
    version: { cpe_uri: "cpe:/o:rockylinux:rockylinux:8.5" version: "2.0.0" benchmark_document: "CIS Rocky Linux 8" }
    title: "Ensure nosuid option set on /var partition"
    description: "The nosuid mount option specifies thatthe filesystem cannot contain setuid files."
    rationale:
      "Since the /var file system is only intended for variable files such as logs, set this option to "
      "ensure that users cannot create setuid files in /var."
    remediation:
      "Editthe /etc/fstab file and add nosuid to the fourth field (mounting options) for the /var "
      "partition. "
      "Example: "
      "\n```\n"
      "â€˜ <device> /var <fstype> defaults, rw,nosuid, nodev, noexec, relatime 0 0\n"
      "```\n\n"
      "Run the following command to remount /var with the configured options: "
      "\n```\n"
      "mount -o remount /var\n"
      "```\n\n"
      "References: "
      "1. See the fstab(5) manual page for more information."
    cis_benchmark: {
      profile_level: 1
      severity: LOW
    }
    scan_instructions:
      "scan_type_specific:{instance_scanning:{"
      "check_alternatives:{"
      "  file_checks:{"
      "    files_to_check:{single_file:{path:\"/proc/self/mountinfo\"}}"
      "    content_entry:{"
      "      match_type: ALL_MATCH_ANY_ORDER"
      "      match_criteria: {"
      "        filter_regex: \".* /var .* - .*\""
      "        expected_regex: \".* /var .*nosuid.* - .*\""
      "      }"
      "    }"
      "  }"
      "}"
      "check_alternatives:{"
      "  file_checks:{"
      "    files_to_check:{single_file:{path:\"/proc/self/mountinfo\"}}"
      "    content_entry:{"
      "      match_type: NONE_MATCH"
      "      match_criteria: {"
      "        filter_regex: \".* /var .* - .*\""
      "        expected_regex: \".* /var .* - .*\""
      "      }"
      "    }"
      "  }"
      "}}}"
  }
}
benchmark_configs: {
  id: "var-log-nodev"
  compliance_note: {
    version: { cpe_uri: "cpe:/o:rockylinux:rockylinux:8.5" version: "2.0.0" benchmark_document: "CIS Rocky Linux 8" }
    title: "Ensure nodev option set on /var/log partition"
    description: "The nodev mount option specifies that the filesystem cannot contain special devices."
    rationale:
      "Since the /var/log file system is not intended to support devices, set this option to ensure "
      "that users cannot create a block or character special devices in /var/log."
    remediation:
      "Edit the /etc/fstab file and add nodev to the fourth field (mounting options) for the "
      "/var/log partition.\n"
      "Example:\n"
      "\n```\n"
      "<device> /var/log <fstype> defaults, rw,nosuid, nodev, noexec, relatime 0\n"
      "```\n\n"
      "Run the following command to remount /var/log with the configured options:\n"
      "\n```\n"
      "mount -o remount /var/log\n"
      "```\n\n"
      "References:\n"
      "1. See the fstab(5) manual page for more information."
    cis_benchmark: {
      profile_level: 1
      severity: LOW
    }
    scan_instructions:
      "scan_type_specific:{instance_scanning:{"
      "check_alternatives:{"
      "  file_checks:{"
      "    files_to_check:{single_file:{path:\"/proc/self/mountinfo\"}}"
      "    content_entry:{"
      "      match_type: ALL_MATCH_ANY_ORDER"
      "      match_criteria: {"
      "          filter_regex: \".* /var/log .* - .*\""
      "          expected_regex: \".* /var/log .*nodev.* - .*\""
      "      }"
      "    }"
      "  }"
      "}"
      "check_alternatives:{"
      "  file_checks:{"
      "    files_to_check:{single_file:{path:\"/proc/self/mountinfo\"}}"
      "    content_entry:{"
      "      match_type: NONE_MATCH"
      "      match_criteria: {"
      "          filter_regex: \".* /var/log .* - .*\""
      "          expected_regex: \".* /var/log .* - .*\""
      "      }"
      "    }"
      "  }"
      "}}}"
  }
}
benchmark_configs: {
  id: "var-log-noexec"
  compliance_note: {
    version: { cpe_uri: "cpe:/o:rockylinux:rockylinux:8.5" version: "2.0.0" benchmark_document: "CIS Rocky Linux 8" }
    title: "Ensure noexec option set on /var/log partition"
    description: "The noexec mount option specifies that the filesystem cannot contain executable binaries."
    rationale:
      "Since the /var/log file system is only intended for log files, set this option to ensure that "
      "users cannot run executable binaries from /var/log."
    remediation:
      "Editthe /etc/fstab file and add noexec to the fourth field (mounting options) for the "
      "/var/log partition.\n"
      "Example:\n"
      "\n```\n"
      "<device> /var/log <fstype> defaults, rw,nosuid, nodev, noexec, relatime 0\n"
      "```\n\n"
      "Run the following command to remount /var/log with the configured options:\n"
      "\n```\n"
      "mount -o remount /var/log\n"
      "```\n\n"
      "References:\n"
      "1. See the fstab(5) manual page for more information."
    cis_benchmark: {
      profile_level: 1
      severity: LOW
    }
    scan_instructions:
      "scan_type_specific:{instance_scanning:{"
      "check_alternatives:{"
      "  file_checks:{"
      "    files_to_check:{single_file:{path:\"/proc/self/mountinfo\"}}"
      "    content_entry:{"
      "      match_type: ALL_MATCH_ANY_ORDER"
      "      match_criteria: {"
      "          filter_regex: \".* /var/log .* - .*\""
      "          expected_regex: \".* /var/log .*noexec.* - .*\""
      "      }"
      "    }"
      "  }"
      "}"
      "check_alternatives:{"
      "  file_checks:{"
      "    files_to_check:{single_file:{path:\"/proc/self/mountinfo\"}}"
      "    content_entry:{"
      "      match_type: NONE_MATCH"
      "      match_criteria: {"
      "          filter_regex: \".* /var/log .* - .*\""
      "          expected_regex: \".* /var/log .* - .*\""
      "      }"
      "    }"
      "  }"
      "}}}"
  }
}
benchmark_configs: {
  id: "var-log-nosuid"
  compliance_note: {
    version: { cpe_uri: "cpe:/o:rockylinux:rockylinux:8.5" version: "2.0.0" benchmark_document: "CIS Rocky Linux 8" }
    title: "Ensure nosuid option set on /var/log partition"
    description: "The nosuid mount option specifies thatthe filesystem cannot contain setuid files."
    rationale:
      "Since the /var/log file system is only intended for log files, set this option to ensure that "
      "users cannot create setuid files in /var/log."
    remediation:
      "Editthe /etc/fstab file and add nosuid to the fourth field (mounting options) for the "
      "/var/log partition.\n"
      "Example:\n"
      "\n```\n"
      "<device> /var/log <fstype> defaults, rw,nosuid, nodev, noexec, relatime 0\n"
      "```\n\n"
      "Run the following command to remount /var/log with the configured options:\n"
      "\n```\n"
      "mount -o remount /var/log\n"
      "```\n\n"
      "References:\n"
      "1. See the fstab(5) manual page for more information."
    cis_benchmark: {
      profile_level: 1
      severity: LOW
    }
    scan_instructions:
      "scan_type_specific:{instance_scanning:{"
      "check_alternatives:{"
      "  file_checks:{"
      "    files_to_check:{single_file:{path:\"/proc/self/mountinfo\"}}"
      "    content_entry:{"
      "      match_type: ALL_MATCH_ANY_ORDER"
      "      match_criteria: {"
      "          filter_regex: \".* /var/log .* - .*\""
      "          expected_regex: \".* /var/log .*nosuid.* - .*\""
      "      }"
      "    }"
      "  }"
      "}"
      "check_alternatives:{"
      "  file_checks:{"
      "    files_to_check:{single_file:{path:\"/proc/self/mountinfo\"}}"
      "    content_entry:{"
      "      match_type: NONE_MATCH"
      "      match_criteria: {"
      "          filter_regex: \".* /var/log .* - .*\""
      "          expected_regex: \".* /var/log .* - .*\""
      "      }"
      "    }"
      "  }"
      "}}}"
  }
}
benchmark_configs: {
  id: "var-log-audit-noexec"
  compliance_note: {
    version: { cpe_uri: "cpe:/o:rockylinux:rockylinux:8.5" version: "2.0.0" benchmark_document: "CIS Rocky Linux 8" }
    title: "Ensure noexec option set on /var/log/audit partition"
    description: "The noexec mount option specifies that the filesystem cannot contain executable binaries."
    rationale:
      "Since the /var/log/audit filesystems only intended for auditlogs, set this option to "
      "ensure that users cannot run executable binaries from /var/log/audit."
    remediation:
      "Editthe /etc/fstab file and add noexec to the fourth field (mounting options) for the /var "
      "partition.\n"
      "Example:\n"
      "\n```\n"
      "<device> /var/log/audit <fstype>\n"
      "defaults, rw,nosuid, nodev, noexec, relatime 0 0\n"
      "```\n\n"
      "Run the following command to remount /var/log/audit with the configured options:\n"
      "\n```\n"
      "mount -o remount /var/log/audit\n"
      "```\n\n"
      "References:\n"
      "1. See the fstab(5) manual page for more information."
    cis_benchmark: {
      profile_level: 1
      severity: LOW
    }
    scan_instructions:
      "scan_type_specific:{instance_scanning:{"
      "check_alternatives:{"
      "  file_checks:{"
      "    files_to_check:{single_file:{path:\"/proc/self/mountinfo\"}}"
      "    content_entry:{"
      "      match_type: ALL_MATCH_ANY_ORDER"
      "      match_criteria: {"
      "          filter_regex: \".* /var/log/audit .* - .*\""
      "          expected_regex: \".* /var/log/audit .*noexec.* - .*\""
      "      }"
      "    }"
      "  }"
      "}"
      "check_alternatives:{"
      "  file_checks:{"
      "    files_to_check:{single_file:{path:\"/proc/self/mountinfo\"}}"
      "    content_entry:{"
      "      match_type: NONE_MATCH"
      "      match_criteria: {"
      "          filter_regex: \".* /var/log/audit .* - .*\""
      "          expected_regex: \".* /var/log/audit .* - .*\""
      "      }"
      "    }"
      "  }"
      "}}}"
  }
}
benchmark_configs: {
  id: "var-log-audit-nodev"
  compliance_note: {
    version: { cpe_uri: "cpe:/o:rockylinux:rockylinux:8.5" version: "2.0.0" benchmark_document: "CIS Rocky Linux 8" }
    title: "Ensure nodev option set on /var/log/audit partition"
    description: "The nodev mount option specifies that the filesystem cannot contain special devices."
    rationale:
      "Since the /var/log/audit file system is not intended to support devices, set this option to "
      "ensure that users cannot create a block or character special devices in /var/log/audit.\n"
    remediation:
      "Editthe /etc/fstab file and add nodev to the fourth field (mounting options) for the "
      "/var/log/audit partition.\n"
      "Example:\n"
      "\n```\n"
      "<device> /var/log/audit <fstype>\n"
      "defaults, rw,nosuid, nodev, noexec, relatime 0 0\n"
      "```\n\n"
      "Run the following command to remount /var/log/audit with the configured options:\n"
      "\n```\n"
      "mount -o remount /var/log/audit\n"
      "```\n\n"
      "References:\n"
      "1. See the fstab(5) manual page for more information."
    cis_benchmark: {
      profile_level: 1
      severity: LOW
    }
    scan_instructions:
      "scan_type_specific:{instance_scanning:{"
      "check_alternatives:{"
      "  file_checks:{"
      "    files_to_check:{single_file:{path:\"/proc/self/mountinfo\"}}"
      "    content_entry:{"
      "      match_type: ALL_MATCH_ANY_ORDER"
      "      match_criteria: {"
      "          filter_regex: \".* /var/log/audit .* - .*\""
      "          expected_regex: \".* /var/log/audit .*nodev.* - .*\""
      "      }"
      "    }"
      "  }"
      "}"
      "check_alternatives:{"
      "  file_checks:{"
      "    files_to_check:{single_file:{path:\"/proc/self/mountinfo\"}}"
      "    content_entry:{"
      "      match_type: NONE_MATCH"
      "      match_criteria: {"
      "          filter_regex: \".* /var/log/audit .* - .*\""
      "          expected_regex: \".* /var/log/audit .* - .*\""
      "      }"
      "    }"
      "  }"
      "}}}"
  }
}
benchmark_configs: {
  id: "var-log-audit-nosuid"
  compliance_note: {
    version: { cpe_uri: "cpe:/o:rockylinux:rockylinux:8.5" version: "2.0.0" benchmark_document: "CIS Rocky Linux 8" }
    title: "Ensure nosuid option set on /var/log/audit partition"
    description: "The nosuid mount option specifies thatthe filesystem cannot contain setuid files."
    rationale:
      "Since the /var/log/audit file system is only intended for variable files such as logs, set this "
      "option to ensure that users cannot create setuid files in /var/log/audit.\n"
    remediation:
      "Editthe /etc/fstab file and add nosuid to the fourth field (mounting options) for the "
      "option to ensure that users cannot create setuid files in /var/log/audit.\n"
      "Example:\n"
      "\n```\n"
      "<device> /var/log/audit <fstype>\n"
      "defaults, rw,nosuid, nodev, noexec, relatime 0 0\n"
      "```\n\n"
      "Run the following command to remount /var/log/audit with the configured options:\n"
      "\n```\n"
      "mount -o remount /var/log/audit\n"
      "```\n\n"
      "References:\n"
      "1. See the fstab(5) manual page for more information."
    cis_benchmark: {
      profile_level: 1
      severity: LOW
    }
    scan_instructions:
      "scan_type_specific:{instance_scanning:{"
      "check_alternatives:{"
      "  file_checks:{"
      "    files_to_check:{single_file:{path:\"/proc/self/mountinfo\"}}"
      "    content_entry:{"
      "      match_type: ALL_MATCH_ANY_ORDER"
      "      match_criteria: {"
      "          filter_regex: \".* /var/log/audit .* - .*\""
      "          expected_regex: \".* /var/log/audit .*nosuid.* - .*\""
      "      }"
      "    }"
      "  }"
      "}"
      "check_alternatives:{"
      "  file_checks:{"
      "    files_to_check:{single_file:{path:\"/proc/self/mountinfo\"}}"
      "    content_entry:{"
      "      match_type: NONE_MATCH"
      "      match_criteria: {"
      "          filter_regex: \".* /var/log/audit .* - .*\""
      "          expected_regex: \".* /var/log/audit .* - .*\""
      "      }"
      "    }"
      "  }"
      "}}}"
  }
}
benchmark_configs: {
  id: "home-nosuid"
  compliance_note: {
    version: { cpe_uri: "cpe:/o:rockylinux:rockylinux:8.5" version: "2.0.0" benchmark_document: "CIS Rocky Linux 8" }
    title: "Ensure nosuid option set on /home partition"
    description: "The nosuid mount option specifies thatthe filesystem cannot contain setuid files."
    rationale:
      "Since the /nome filesystem is only intended for user file storage, set this option to ensure "
      "that users cannot create setuid files in /home."
    remediation:
      "Editthe /etc/fstab file and add nosuid to the fourth field (mounting options) for the "
      "/home partition.\n"
      "Example:\n"
      "\n```\n"
      "<device> /home <fstype> defaults, rw,nosuid, nodev, noexec, relatime 0 0\n"
      "```\n\n"
      "Run the following command to remount /home with the configured options:\n"
      "\n```\n"
      "mount -o remount /home\n"
      "```\n\n"
      "References:\n"
      "1. See the fstab(5) manual page for more information."
    cis_benchmark: {
      profile_level: 1
      severity: LOW
    }
    scan_instructions:
      "scan_type_specific:{instance_scanning:{"
      "check_alternatives:{"
      "  file_checks:{"
      "    files_to_check:{single_file:{path:\"/proc/self/mountinfo\"}}"
      "    content_entry:{"
      "      match_type: ALL_MATCH_ANY_ORDER"
      "      match_criteria: {"
      "          filter_regex: \".* /home .* - .*\""
      "          expected_regex: \".* /home .*nosuid.* - .*\""
      "      }"
      "    }"
      "  }"
      "}"
      "check_alternatives:{"
      "  file_checks:{"
      "    files_to_check:{single_file:{path:\"/proc/self/mountinfo\"}}"
      "    content_entry:{"
      "      match_type: NONE_MATCH"
      "      match_criteria: {"
      "          filter_regex: \".* /home .* - .*\""
      "          expected_regex: \".* /home .* - .*\""
      "      }"
      "    }"
      "  }"
      "}}}"
  }
}
benchmark_configs: {
  id: "home-usrquota"
  compliance_note: {
    version: { cpe_uri: "cpe:/o:rockylinux:rockylinux:8.5" version: "2.0.0" benchmark_document: "CIS Rocky Linux 8" }
    title: "Ensure usrquota option set on /home partition"
    description: "The usrquota mount optionallows for the filesystem to have disk quotas configured."
    rationale:
      "To ensure the availability of disk space on /home, it is important to limit the impact a single "
      "user or group can cause for other users (or the wider system) by accidentally filling up the "
      "partition. Quotas can also be applied to inodes for filesystems where inode exhaustion is a "
      "concern."
    remediation:
      "Edit the /etc/fstab file and add usrquota to the fourth field (mounting options) for the "
      "/home partition. "
      "Example:\n"
      "\n```\n"
      "<device> /home <fstype> defaults, rw, usrquota, grpquota, nodev, relatime\n"
      "```\n\n"
      "Run the following command to remount /home with the configured options:\n"
      "\n```\n"
      "# mount -o remount /home\n"
      "```\n\n"
      "Create the quota database. This example will ignore any existing quotafiles.\n"
      "\n```\n"
      "quotacheck -cugv /home \n"
      "quotacheck: Your kernel probably supports journaled quota but you are not \n"
      "using it. Consider switching to journaled quota to avoid running quotacheck \n"
      "after an unclean shutdown. \n"
      "quotacheck: Scanning /dev/sdb [/home] done \n"
      "quotacheck: Cannot stat old user quota file /home/aquota.user: No such file \n"
      "or directory. Usage will not be subtracted. \n"
      "quotacheck: Cannot stat old group quota file /home/aquota.group: No such file \n"
      "or directory. Usage will not be subtracted. \n"
      "quotacheck: Cannot stat old user quota file /home/aquota.user: No such file \n"
      "or directory. Usage will not be subtracted. \n"
      "quotacheck: Cannot stat old group quota file /home/aquota.group: No such file \n"
      "or directory. Usage will not be subtracted. \n"
      "quotacheck: Checked 8 directories and 0 files \n"
      "quotacheck: Old file not found. \n"
      "quotacheck: Old file not found. \n"
      "```\n\n"
      "Restore SELinux context on the quota database files. Order of operations is importantas "
      "quotaon will set the immutable attribute on the files and thus restorecon will fail. "
      "\n```\n"
      "restorecon /home/aquota.user\n"
      "```\n\n"
      "Enable quotas on the partition:\n"
      "\n```\n"
      "quotaon -vug /home\n"
      "/dev/sdb [/home]: group quotas turned on\n"
      "/dev/sdb [/home]: user quotas turned on\n"
      "```\n\n"
      "References:\n"
      "1. See the fstab(5) and edquota(8) manual pages for more information."
    cis_benchmark: {
      profile_level: 1
      severity: LOW
    }
    scan_instructions:
      "scan_type_specific:{instance_scanning:{"
      "check_alternatives:{"
      "  file_checks:{"
      "    files_to_check:{single_file:{path:\"/proc/self/mountinfo\"}}"
      "    content_entry:{"
      "      match_type: ALL_MATCH_ANY_ORDER"
      "      match_criteria: {"
      "          filter_regex: \".* /home .*\""
      "          expected_regex: \".* /home .*usrquota.*\""
      "      }"
      "    }"
      "  }"
      "}"
      "check_alternatives:{"
      "  file_checks:{"
      "    files_to_check:{single_file:{path:\"/proc/self/mountinfo\"}}"
      "    content_entry:{"
      "      match_type: NONE_MATCH"
      "      match_criteria: {"
      "          filter_regex: \".* /home .* - .*\""
      "          expected_regex: \".* /home .* - .*\""
      "      }"
      "    }"
      "  }"
      "}}}"
  }
}
benchmark_configs: {
  id: "home-grpquota"
  compliance_note: {
    version: { cpe_uri: "cpe:/o:rockylinux:rockylinux:8.5" version: "2.0.0" benchmark_document: "CIS Rocky Linux 8" }
    title: "Ensure grpquota option set on /home partition"
    description: "The grpquota mount option allows for the filesystem to have disk quotas configured."
    rationale:
      "To ensure the availability of disk space on /home, it is important to limit the impact a single "
      "user or group can cause for other users (or the wider system) by accidentally filling up the "
      "partition. Quotas can also be applied to inodes for filesystems where inode exhaustion is a "
      "concern."
    remediation:
      "Edit the /etc/fstab file and add grpquota to the fourth field (mounting options) for the "
      "/home partition. "
      "Example:\n"
      "\n```\n"
      "<device> /home <fstype> defaults, rw, usrquota, grpquota, nodev, relatime\n"
      "```\n\n"
      "Run the following command to remount /home with the configured options:\n"
      "\n```\n"
      "mount -o remount /home\n"
      "```\n\n"
      "Create the quota database. This example will ignore any existing quotafiles.\n"
      "\n```\n"
      "quotacheck -cugv /home\n"
      "quotacheck: Your kernel probably supports journaled quota but you are not\n"
      "using it. Consider switching to journaled quota to avoid running quotacheck\n"
      "after an unclean shutdown.\n"
      "quotacheck: Scanning /dev/sdb [/home] done\n"
      "quotacheck: Cannot stat old user quota file /home/aquota.user: No such file\n"
      "or directory. Usage will not be subtracted.\n"
      "quotacheck: Cannot stat old group quota file /home/aquota.group: No such file\n"
      "or directory. Usage will not be subtracted.\n"
      "quotacheck: Cannot stat old user quota file /home/aquota.user: No such file\n"
      "or directory. Usage will not be subtracted.\n"
      "quotacheck: Cannot stat old group quota file /home/aquota.group: No such file\n"
      "or directory. Usage will not be subtracted.\n"
      "quotacheck: Checked 8 directories and 0 files\n"
      "quotacheck: Old file not found.\n"
      "quotacheck: Old file not found.\n"
      "```\n\n"
      "Restore SELinux context on the quota database files. Order of operations is importantas "
      "quotaon will set the immutable attribute on the files and thus restorecon will fail.\n"
      "\n```\n"
      "restorecon /home/aquota.group\n"
      "```\n\n"
      "Enable quotas on the partition:\n"
      "\n```\n"
      "quotaon -vug /home\n"
      "/dev/sdb [/home]: group quotas turned on\n"
      "/dev/sdb [/home]: user quotas turned on\n"
      "```\n\n"
      "References:\n"
      "1. See the fstab(5) and edquota(8) manual pages for more information."
    cis_benchmark: {
      profile_level: 1
      severity: LOW
    }
    scan_instructions:
      "scan_type_specific:{instance_scanning:{"
      "check_alternatives:{"
      "  file_checks:{"
      "    files_to_check:{single_file:{path:\"/proc/self/mountinfo\"}}"
      "    content_entry:{"
      "      match_type: ALL_MATCH_ANY_ORDER"
      "      match_criteria: {"
      "          filter_regex: \".* /home .*\""
      "          expected_regex: \".* /home .*grpgquota.*\""
      "      }"
      "    }"
      "  }"
      "}"
      "check_alternatives:{"
      "  file_checks:{"
      "    files_to_check:{single_file:{path:\"/proc/self/mountinfo\"}}"
      "    content_entry:{"
      "      match_type: NONE_MATCH"
      "      match_criteria: {"
      "          filter_regex: \".* /home .* - .*\""
      "          expected_regex: \".* /home .* - .*\""
      "      }"
      "    }"
      "  }"
      "}}}"
  }
}
benchmark_configs: {
  id: "boot-rescue-mode-password"
  compliance_note: {
    version: { cpe_uri: "cpe:/o:rockylinux:rockylinux:8.5" version: "2.0.0" benchmark_document: "CIS Rocky Linux 8" }
    title: "Ensure authentication is required when booting into rescue mode"
    description:
      "Rescue mode (former single user mode) is used for recovery when the system detects an "
      "issue during boot or by manual selection from the bootloader."
    rationale:
      "Requiring authentication in rescue mode (former single user mode) prevents an "
      "unauthorized user from rebooting the system into rescue mode to gainroot privileges "
      "without credentials."
    remediation:
      "The systemd drop-in files mustbe created if it is necessary to change the default settings:\n"
      "Create the file /etc/systemd/system/rescue.service.d/00-require-auth.conf which "
      "contains only the configuration to be overridden:\n"
      "\n```\n"
      "[Service]\n"
      "ExecStart=-/usr/lib/systemd/systemd-sulogin-shell rescue\n"
      "```\n\n"
    cis_benchmark: {
      profile_level: 1
      severity: LOW
    }
    scan_instructions:
      "generic:{"
      " check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{single_file:{path:\"/usr/lib/systemd/system/rescue.service\"}}"
      "      files_to_check:{files_in_dir:{dir_path:\"/etc/systemd/system/rescue.service.d\",recursive:true}}"
      "      content_entry:{"
      "        match_type: ALL_MATCH_ANY_ORDER"
      "        match_criteria: {"
      "          filter_regex: \".*/systemd-sulogin-shell.*\""
      "          expected_regex: \"ExecStart=-/usr/lib/systemd/systemd-sulogin-shell rescue\""
      "        }"
      "      }"
      "    }"
      " }"
      "}"
  }
}
benchmark_configs: {
  id: "systemwide-crypto-policy-not-legacy"
  compliance_note: {
    version: { cpe_uri: "cpe:/o:rockylinux:rockylinux:8.5" version: "2.0.0" benchmark_document: "CIS Rocky Linux 8" }
    title: "Ensure system-wide crypto policy is not legacy"
    description:
      "The system-wide crypto-policies followed by the crypto core components allow "
      "consistently deprecating and disabling algorithms system-wide.\n"
      "The individual policy levels (DEFAULT, LEGACY, FUTURE, and FIPS) are included in the "
      "crypto-policies(7) package."
    rationale:
      "If the Legacy system-wide crypto policy is selected, itincludes support for TLS 1.0, TLS 1.1, "
      "and SSH2 protocols or later. The algorithms DSA, 3DES, and RC4 are allowed, while RSA "
      "and Diffie-Hellman parameters are accepted if larger than 1023-bits.\n"
      "These legacy protocols and algorithms can make the system vulnerable to attacks, "
      "including those listed in RFC 7457\n"
      "Impact:\n"
      "Environments that require compatibility with older insecure protocols may require the use "
      "of the less secure LEGACY policy level."
    remediation:
      "Run the following command to change the system-wide crypto policy\n"
      "\n```\n"
      "update-crypto-policies --set <CRYPTO POLICY>\n"
      "```\n\n"
      "Example:\n"
      "\n```\n"
      "update-crypto-policies --set DEFAULT\n"
      "```\n\n"
      "Run the following to make the updated system-wide crypto policy active\n"
      "\n```\n"
      "update-crypto-policies\n"
      "```\n\n"
      "References:\n"
      "1. CRYPTO-POLICIES(7)\n"
      "2. https://access.redhat.com/articles/3642912#what-polices-are-provided-1"
    cis_benchmark: {
      profile_level: 1
      severity: LOW
    }
    scan_instructions:
      "generic:{"
      "  check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{single_file:{path:\"/etc/crypto-policies/config\"}}"
      "      content_entry:{"
      "        match_type: NONE_MATCH"
      "        match_criteria: {"
      "          filter_regex: \"\\\\s*LEGACY\\\\s*(\\\\s+#.*)?\""
      "          expected_regex: \"\\\\s*LEGACY\\\\s*(\\\\s+#.*)?\""
      "        }"
      "      }"
      "    }"
      "  }"
      "}"
  }
}
benchmark_configs: {
  id: "wireless-interfaces-are-disabled"
  compliance_note: {
    version: { cpe_uri: "cpe:/o:rockylinux:rockylinux:8.5" version: "2.0.0" benchmark_document: "CIS Rocky Linux 8" }
    title: "Ensure wireless interfaces are disabled"
    description: "Wireless networking is used when wired networks are unavailable."
    rationale:
      "If wireless is not to be used, wireless devices should be disabled to reduce the potential "
      "attack surface.\n"
      "Impact:\n"
      "Many if not all laptop workstations and some desktop workstations will connect via "
      "wireless requiring these interfaces be enabled."
    remediation:
      "Run the following script to disable any wireless interfaces:\n"
      "\n```\n"
      "#!/usr/bin/env bash\n"
      "if command -v nmcli >/dev/null 2>&1 ; then\n"
      "nmcli radio all off\n"
      "else\n"
      "if [ -n \"$(find /sys/class/net/*/ -type d -name wireless)\" ]; then\n"
      "mname=5$ (for driverdir in $(find /sys/class/net/*/ -type d -name\n"
      "wireless | xargs -0 dirname); do basename \"$(readlink -f\n"
      "\"$driverdir\"/device/driver/module) \";done | sort -u)\n"
      "for dm in $mname; do\n"
      "echo \"install $dm /bin/true\" >>\n"
      "/etc/modprobe.d/disable_wireless.conf\n"
      "done\n"
      "```\n\n"
    cis_benchmark: {
      profile_level: 1
      severity: LOW
    }
    scan_instructions:
      "scan_type_specific:{instance_scanning:{"
      "  check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{single_file:{"
      "         path:\"/proc/net/wireless\""
      "       }"
      "      }"
      "    content_entry:{"
      "        match_type: NONE_MATCH"
      "        match_criteria: {"
      # if there is an active wifi interface the /proc/net/wireless will contain a line starting with <nameofdevice>:
      "          filter_regex: \"[^:]*:.*\""
      "          expected_regex: \"[^:]*:.*\""
      "        }"
      "      }"
      "    }"
      "  }"
      "}}"
  }
}
benchmark_configs: {
  id: "systemd-journal-remote-installed"
  compliance_note: {
    version: { cpe_uri: "cpe:/o:rockylinux:rockylinux:8.5" version: "2.0.0" benchmark_document: "CIS Rocky Linux 8" }
    title: "Ensure systemd-journal-remote is installed"
    description:
      "Journald (via systemd-journal-remote) supports the ability to send log events it gathers to "
      "a remote log host or to receive messages from remote hosts, thus enabling centralised log "
      "management."
    rationale:
      "Storing log data on a remote host protects log integrity from local attacks. If an attacker "
      "gains root access on the local system, they could tamper with or remove log data that is "
      "stored on the local system."
    remediation:
      "Run the following command to install systemd-journal-remote:\n"
      "\n```\n"
      "dnf install systemd-journal-remote\n"
      "```\n\n"
    cis_benchmark: {
      profile_level: 1
      severity: LOW
    }
    scan_instructions:
      "generic:{"
      "  check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{files_in_dir:{"
      "         dir_path:\"/usr/lib/systemd/system/\""
      "        recursive: true"
      "        filename_regex: \"systemd-journal-upload.service\""
      "       }"
      "      }"
      "      existence:{should_exist:true}"
      "    }"
      "}}"
  }
}
benchmark_configs: {
  id: "systemd-journal-remote-enabled"
  compliance_note: {
    version: { cpe_uri: "cpe:/o:rockylinux:rockylinux:8.5" version: "2.0.0" benchmark_document: "CIS Rocky Linux 8" }
    title: "Ensure systemd-journal-remote is enabled"
    description:
      "Journald (via systemd-journal-remote) supports the ability to send log events it gathers to "
      "a remote log host or to receive messages from remote hosts, thus enabling centralised log "
      "management."
    rationale:
      "Storing log data on a remote host protects log integrity from local attacks. If an attacker "
      "gains root access on the local system, they could tamper with or remove log data that is "
      "stored on the local system."
    remediation:
      "Run the following command to enable systemd-journal-remote:\n"
      "\n```\n"
      "systemctl --now enable systemd-journal-upload.service\n"
      "```\n\n"
    cis_benchmark: {
      profile_level: 1
      severity: LOW
    }
    scan_instructions:
      "generic:{"
      "  check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{files_in_dir:{"
      "         dir_path:\"/etc/systemd/system/\""
      "        recursive: true"
      "        filename_regex: \"systemd-journal-upload.service\""
      "       }"
      "      }"
      "      existence:{should_exist:true}"
      "    }"
      "}}"
  }
}
benchmark_configs: {
  id: "journald-no-logs-from-remote-client"
  compliance_note: {
    version: { cpe_uri: "cpe:/o:rockylinux:rockylinux:8.5" version: "2.0.0" benchmark_document: "CIS Rocky Linux 8" }
    title: "Ensure journald is not configured to receive logs from a remote client"
    description:
      "Journald supports the ability to receive messages from remote hosts, thus acting as a log "
      "server. Clients should not receive data from other hosts.\n"
      "NOTE:\n"
      "The same package, systemd-journal-remote, is used for both sending logs to "
      "remote hostsand receiving incominglogs.\n"
      "With regards to receiving logs, there are two services; systemd-journal-"
      "remote.socket and systemd-journal-remote.service."
    rationale:
      "If a client is configured to also receive data, thus turning it into a server, the client system is "
      "acting outside it's operational boundary."
    remediation:
      "Run the following command to disable systemd-journal-remote.socket:\n"
      "\n```\n"
      "systemctl --now mask systemd-journal-remote.socket\n"
      "```\n\n"
    cis_benchmark: {
      profile_level: 1
      severity: LOW
    }
    scan_instructions:
      "generic:{check_alternatives:{"
      "  file_checks:{"
      "    files_to_check:{"
      "      files_in_dir:{"
      "        dir_path:\"/etc/systemd/system\""
      "        recursive: true"
      "        filename_regex: \"systemd-journal-remote.service\""
      "      }"
      "    }"
      "    files_to_check:{"
      "      files_in_dir:{"
      "        dir_path:\"/etc/systemd/system\""
      "        recursive: true"
      "        filename_regex: \"systemd-journal-remote.socket\""
      "      }"
      "    }"
      "    existence:{should_exist: false}"
      "  }"
      "}}"
  }
}
benchmark_configs: {
  id: "journald-default-file-permissions-configured"
  compliance_note: {
    version: { cpe_uri: "cpe:/o:rockylinux:rockylinux:8.5" version: "2.0.0" benchmark_document: "CIS Rocky Linux 8" }
    title: "Ensure journald default file permissions configured"
    description:
      "Journald will create log files that do not already exist on the system. This setting controls "
      "what permissions will be applied to these newly created files."
    rationale:
      "It is important to ensure that log files have the correct permissions to ensure that sensitive "
      "data is archived and protected."
    remediation:
      "If the default configuration is not appropriate for the site specific requirements, copy "
      "/usr/lib/tmpfiles.d/systemd.conf to /etc/tmpfiles.d/systemd.conf and modify as "
      "required. Requirements is either 0640 or site policy if that is less restrictive."
    cis_benchmark: {
      profile_level: 1
      severity: LOW
    }
    scan_instructions:
      "generic:{"
      "  check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{single_file:{"
      "        path:\"/etc/tmpfiles.d/systemd.conf\""
      "       }"
      "      }"
      "    permission:{"
      "      set_bits: 0640"
      "    }"
      "    }"
      "  }"
      "  check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{single_file:{"
      "        path:\"/usr/lib/tmpfiles.d/systemd.conf\""
      "       }"
      "      }"
      "    permission:{"
      "      set_bits: 0640"
      "    }"
      "    }"
      "    file_checks:{"
      "     files_to_check:{single_file:{path:\"/etc/tmpfiles.d/systemd.conf\"}}"
      "     existence:{should_exist: false}"
      "    }"
      "  }"
      "  check_alternatives:{"
      "    file_checks:{"
      "     files_to_check:{single_file:{path:\"/usr/lib/tmpfiles.d/systemd.conf\"}}"
      "     files_to_check:{single_file:{path:\"/etc/tmpfiles.d/systemd.conf\"}}"
      "     existence:{should_exist: false}"
      "    }"
      "}}"
  }
}
benchmark_configs: {
  id: "systemwide-crypto-policy-is-not-overridden"
  compliance_note: {
    version: { cpe_uri: "cpe:/o:rockylinux:rockylinux:8.5" version: "2.0.0" benchmark_document: "CIS Rocky Linux 8" }
    title: "Ensure system-wide crypto policy is not over-ridden"
    description: "System-wide Crypto policy can be over-ridden or opted out of for openSSH"
    rationale:
      "Over-riding or opting out of the system-wide crypto policy could allow for the use of less "
      "secure Ciphers, MACs, KexAlgorithms and GSSAPIKexAlgorithm"
    remediation:
      "Run the following commands:\n"
      "\n```\n"
      "sed -ri \"s/\"\\s* (CRYPTO_POLICY\\s*=.*)$/# \\1/\" /etc/sysconfig/sshd\n"
      "systemctl reload sshd\n"
      "```\n\n"
    cis_benchmark: {
      profile_level: 1
      severity: LOW
    }
    scan_instructions:
      "generic:{"
      " check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{single_file:{path:\"/etc/sysconfig/sshd\"}}"
      "      content_entry:{"
      "        match_type: NONE_MATCH"
      "        match_criteria: {"
      "          filter_regex: \"\\\\s*CRYPTO_POLICY\\\\s*=.*\""
      "          expected_regex: \"\\\\s*CRYPTO_POLICY\\\\s*=.*\""
      "        }"
      "      }"
      "    }"
      " }"
      "}"
  }
}
benchmark_configs: {
  id: "custom-authselect-profile-is-used"
  compliance_note: {
    version: { cpe_uri: "cpe:/o:rockylinux:rockylinux:8.5" version: "2.0.0" benchmark_document: "CIS Rocky Linux 8" }
    title: "Ensure custom authselect profile is used"
    description:
      "A custom profile can be created by copying and customizing one of the default profiles. The "
      "default profiles include: sssd, winbind, or the nis. This profile can then be customized to "
      "follow site specific requirements.\n"
      "You can select a profile for the authselect utility for a specific host. The profile will be "
      "applied to every user logging into the host."
    rationale:
      "A custom profile is required to customize many of the pam options.\n"
      "When you deploy a profile, the profile is applied to every user logging into the given host"
    remediation:
      "Run the following command to create a custom authselect profile:\n"
      "\n```\n"
      "authselect create-profile <custom-profile name> <options>\n"
      "```\n\n"
      "Example:\n"
      "\n```\n"
      "authselect create-profile custom-profile -b sssd --symlink-meta\n"
      "```\n\n"
      "Run the following command to select a custom authselect profile:\n"
      "\n```\n"
      "authselect select custom/<CUSTOM PROFILE NAME> {with-<OPTIONS>}\n"
      "```\n\n"
      "Example:\n"
      "\n```\n"
      "# authselect select custom/custom-profile with-sudo with-faillock without-nullok\n"
      "```\n\n"
      "References:\n"
      "1. authselect(8)"
    cis_benchmark: {
      profile_level: 1
      severity: LOW
    }
    scan_instructions:
      "generic:{check_alternatives:{"
      "  file_checks:{"
      "    files_to_check:{single_file:{path:\"/etc/authselect/authselect.conf\"}}"
      "    content_entry:{"
      "      match_type: ALL_MATCH_ANY_ORDER"
      "      match_criteria: {"
      # Expect a custom profile in the file.
      "        filter_regex: \"-\\\\s*custom/.*\""
      "        expected_regex: \"-\\\\s*custom/[a-z0-9A-Z_-]+\""
      "      }"
      "    }"
      "  }"
      "}"
      "check_alternatives:{"
      "  file_checks:{"
      "    files_to_check:{single_file:{path:\"/etc/authselect/authselect.conf\"}}"
      "    existence:{should_exist: false}"
      "  }"
      "}}"
  }
}
benchmark_configs: {
  id: "authselect-includes-with-faillock"
  compliance_note: {
    version: { cpe_uri: "cpe:/o:rockylinux:rockylinux:8.5" version: "2.0.0" benchmark_document: "CIS Rocky Linux 8" }
    title: "Ensure authselect includes with-faillock"
    description:
      "The pam_faillock.so module maintains a list of failed authentication attempts per user "
      "during a specified interval and locks the account in case there were more than deny "
      "consecutive failed authentications. It stores the failure records into per-user files in the "
      "tally directory"
    rationale:
      "Locking out user IDs after n unsuccessful consecutive login attempts mitigates brute force"
      "password attacks against your systems."
    remediation:
      "Run the following commands to include the with-faillock option to the current authselect "
      "profile:\n"
      "\n```\n"
      "# authselect enable-feature with-faillock\n"
      "# authselect apply-changes\n"
      "```\n\n"
      "References:\n"
      "1. faillock(8) - Linux man page\n"
      "2. pam_faillock(8) - Linux man page\n"
    cis_benchmark: {
      profile_level: 1
      severity: LOW
    }
    scan_instructions:
      "generic:{check_alternatives:{"
      "  file_checks:{"
      "    files_to_check:{single_file:{path:\"/etc/pam.d/password-auth\"}}"
      "    files_to_check:{single_file:{path:\"/etc/pam.d/system-auth\"}}"
      "    content_entry:{"
      "      match_type: ALL_MATCH_ANY_ORDER"
      "      match_criteria: {"
      "        filter_regex: \"\\\\s*pam_faillock\\\\.so\""
      "        expected_regex: \"\\\\s*pam_faillock\\\\.so\""
      "      }"
      "    }"
      "  }"
      "}"
      "check_alternatives:{"
      "  file_checks:{"
      "    files_to_check:{single_file:{path:\"/etc/pam.d/password-auth\"}}"
      "    files_to_check:{single_file:{path:\"/etc/pam.d/system-auth\"}}"
      "    existence:{should_exist: false}"
      "  }"
      "}}"
  }
}
benchmark_configs: {
  id: "nis-client-not-installed"
  compliance_note: {
    version: { cpe_uri: "cpe:/o:rockylinux:rockylinux:8.5" version: "2.0.0" benchmark_document: "CIS Rocky Linux 8" }
    title: "Ensure NIS Client is not installed"
    description:
      "The Network Information Service (NIS), formerly known as Yellow Pages, "
      "is a client-server directory service protocol used to distribute "
      "system configuration files. The NIS client (ypbind) was used to bind a "
      "machine to an NIS server and receive the distributed configuration "
      "files."
    rationale:
      "The NIS service is inherently an insecure system that has been "
      "vulnerable to DOS attacks, buffer overflows and has poor "
      "authentication for querying NIS maps. NIS generally has been replaced "
      "by such protocols as Lightweight Directory Access Protocol (LDAP). It "
      "is recommended that the service be removed."
    remediation:
      "Uninstall ypbind using the appropriate package manager or manual "
      "installation:\n"
      "\n```\n"
      "yum remove ypbind\n"
      "apt-get remove ypbind\n"
      "zypper remove ypbind\n"
      "```\n\n"
    cis_benchmark: {
      profile_level: 1
      severity: LOW
    }
    scan_instructions:
      "generic:{check_alternatives:{"
      "  file_checks:{"
      "    files_to_check:{single_file:{path:\"/usr/bin/ypbind\"}}"
      "    files_to_check:{single_file:{path:\"/usr/sbin/ypbind\"}}"
      "    files_to_check:{single_file:{path:\"/bin/ypbind\"}}"
      "    files_to_check:{single_file:{path:\"/sbin/ypbind\"}}"
      "    existence:{should_exist: false}"
      "  }"
      "}}"
  }
}
benchmark_configs: {
  id: "squashfs-mounting-disabled-rocky"
  compliance_note: {
    version: { cpe_uri: "cpe:/o:rockylinux:rockylinux:8.5" version: "2.0.0" benchmark_document: "CIS Rocky Linux 8" }
    title: "Ensure mounting of squashfs filesystems is disabled"
    description:
      "The squashfs filesystem type is a compressed read-only Linux "
      "filesystem embedded in small footprint systems (similar to cramfs ). A "
      "squashfs image can be used without having to first decompress the image."
    rationale:
      "Removing support for unneeded filesystem types reduces the local attack "
      "surface of the server. If this filesystem type is not needed, disable "
      "it."
    remediation:
      "Edit or create a file in the /etc/modprobe.d/ directory ending in .conf "
      "with the lines that read install squashfs /bin/false and blacklist squashfs.\n"
      "Example: \n"
      "\n```\n"
      "printf \"install squashfs /bin/false "
      "blacklist squashfs "
      "\" >> /etc/modprobe.d/squashfs.conf\n"
      "```\n\n"
      "Run the following command to unload the squashfs module:\n"
      "\n```\n"
      "# rmmod squashfs\n"
      "```\n\n"
    cis_benchmark: {
      profile_level: 2
      severity: LOW
    }
    scan_instructions:
      "scan_type_specific:{instance_scanning:{"
      "  check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{single_file:{path:\"/proc/modules\"}}"
      "      content_entry:{"
      "        match_type: NONE_MATCH"
      "        match_criteria: {"
      "          filter_regex: \"squashfs\\\\s+.*\""
      "          expected_regex: \"squashfs .*\""
      "        }"
      "      }"
      "    }"
      "    file_checks:{"
      "      files_to_check:{files_in_dir:{"
      "        dir_path:\"/etc/modprobe.d\""
      "        filename_regex: \".*\\\\.conf\""
      "        recursive: true"
      "      }}"
      "      content_entry:{"
      "        match_type: ALL_MATCH_ANY_ORDER"
      "        match_criteria: {"
      "          filter_regex: \"install squashfs .*\""
      "          expected_regex: \"install squashfs /bin/(true|false)\""
      "        }"
      "      }"
      "    }"
      "  }"
      "}"
      "image_scanning:{"
      "  check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{files_in_dir:{"
      "        dir_path:\"/etc/modprobe.d\""
      "        filename_regex: \".*\\\\.conf\""
      "        recursive: true"
      "      }}"
      "      content_entry:{"
      "        match_type: ALL_MATCH_ANY_ORDER"
      "        match_criteria: {"
      "          filter_regex: \"install squashfs .*\""
      "          expected_regex: \"install squashfs /bin/(true|false)\""
      "        }"
      "      }"
      "    }"
      "  }"
      "}}"
  }
}
benchmark_configs: {
  id: "udf-mounting-disabled-rocky"
  compliance_note: {
    version: { cpe_uri: "cpe:/o:rockylinux:rockylinux:8.5" version: "2.0.0" benchmark_document: "CIS Rocky Linux 8" }
    title: "Ensure mounting of udf filesystems is disabled"
    description:
      "The udf filesystem type is the universal disk format used to implement "
      "ISO/IEC 13346 and ECMA-167 specifications. This is an open vendor "
      "filesystem type for data storage on a broad range of media. This "
      "filesystem type is necessary to support writing DVDs and newer optical "
      "disc formats."
    rationale:
      "Removing support for unneeded filesystem types reduces the local "
      "attack surface of the system. If this filesystem type is not needed, "
      "disable it."
    remediation:
      "Edit or create a file in the /etc/modprobe.d/ directory ending in .conf "
      "with the lines that read install udf /bin/false and blacklist udf.\n"
      "Example: \n"
      "\n```\n"
      "printf \"install udf /bin/false "
      "blacklist udf "
      "\" >> /etc/modprobe.d/udf.conf\n"
      "```\n\n"
      "Run the following command to unload the udf module:\n"
      "\n```\n"
      "# rmmod udf\n"
      "```\n\n"
    cis_benchmark: {
      profile_level: 2
      severity: LOW
    }
    scan_instructions:
      "scan_type_specific:{instance_scanning:{"
      "  check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{single_file:{path:\"/proc/modules\"}}"
      "      content_entry:{"
      "        match_type: NONE_MATCH"
      "        match_criteria: {"
      "          filter_regex: \"udf .*\""
      "          expected_regex: \"udf .*\""
      "        }"
      "      }"
      "    }"
      "    file_checks:{"
      "      files_to_check:{files_in_dir:{"
      "        dir_path:\"/etc/modprobe.d\""
      "        filename_regex: \".*\\\\.conf\""
      "        recursive: true"
      "      }}"
      "      content_entry:{"
      "        match_type: ALL_MATCH_ANY_ORDER"
      "        match_criteria: {"
      "          filter_regex: \"install udf .*\""
      "          expected_regex: \"install udf /bin/(true|false)\""
      "        }"
      "      }"
      "    }"
      "  }"
      "}"
      "image_scanning:{"
      "  check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{files_in_dir:{"
      "        dir_path:\"/etc/modprobe.d\""
      "        filename_regex: \".*\\\\.conf\""
      "        recursive: true"
      "      }}"
      "      content_entry:{"
      "        match_type: ALL_MATCH_ANY_ORDER"
      "        match_criteria: {"
      "          filter_regex: \"install udf .*\""
      "          expected_regex: \"install udf /bin/(true|false)\""
      "        }"
      "      }"
      "    }"
      "  }"
      "}}"
  }
}
benchmark_configs: {
  id: "separate-partition-var"
  compliance_note: {
    version: { cpe_uri: "cpe:/o:rockylinux:rockylinux:8.5" version: "2.0.0" benchmark_document: "CIS Rocky Linux 8" }
    title: "Ensure separate partition exists for /var"
    description:
      "The /var directory is used by daemons and other system services to temporarily store "
      "dynamic data. Some directories created by these processes may be world-writable."
    rationale:
      "The reasoning for mounting /var on a separate partition is as follow.\n"
      "Protection from resource exhaustion\n"
      "The default installation only creates a single / partition. Since the /var directory may "
      "contain world-writable files and directories, there is a risk of resource exhaustion. It will "
      "essentially have the whole disk available to fill up and impact the system as a whole. In "
      "addition, other operations on the system could fill up the disk unrelated to /var and cause "
      "unintended behavior across the system as the disk is full. See man auditd.conf for details.\n"
      "Fine grained control over the mount\n"
      "Configuring /var as its own file system allows an administrator to set additional mount "
      "options such as noexec/nosuid/nodev. These options limits an attackers ability to create "
      "exploits on the system. Other options allow for specific behaviour. See man mount for exact "
      "details regarding filesystem-independent and filesystem-specific options.\n"
      "Protection from exploitation\n"
      "An example of exploiting /var may be an attacker establishing a hard-link to a system "
      "setuid program and wait for it to be updated. Once the program was updated, the hard-"
      "link would be broken and the attacker would have his own copy of the program. If the "
      "program happened to have a security vulnerability, the attacker could continue to exploit "
      "the known flaw."
    remediation:
      "For new installations, during installation create a custom partition setup and specify a "
      "separate partition for /var.\n"
      "For systems that were previously installed, create a new partition and configure "
      "/etc/fstab as appropriate."
    cis_benchmark: {
      profile_level: 2
      severity: LOW
    }
    scan_instructions:
      "scan_type_specific:{instance_scanning:{"
      "      check_alternatives:{"
      "        file_checks:{"
      "          files_to_check:{single_file:{path:\"/proc/self/mountinfo\"}}"
      "          content_entry:{"
      "            match_type: ALL_MATCH_ANY_ORDER"
      "            match_criteria: {"
      "              filter_regex: \".* /var .* - .*\""
      "              expected_regex: \".* /var .* - .*\""
      "            }"
      "          }"
      "        }"
      "      }"
      "    }}"
  }
}
benchmark_configs: {
  id: "separate-partition-var-tmp"
  compliance_note: {
    version: { cpe_uri: "cpe:/o:rockylinux:rockylinux:8.5" version: "2.0.0" benchmark_document: "CIS Rocky Linux 8" }
    title: "Ensure separate partition exists for /var/tmp"
    description:
      "The /var/tmp directory is a world-writable directory used for temporary storage by all"
      "users and some applications. Temporary file residing in /var/tmp is to be preserved"
      "between reboots."
    rationale:
      "The reasoning for mounting /var/tmp on a separate partition is as follow.\n"
      "Protection from resource exhaustion "
      "The default installation only creates a single / partition. Since the /var/tmp directory may "
      "contain world-writable files and directories, there is a risk of resource exhaustion. It will "
      "essentially have the whole disk available to fill up and impact the system as a whole. In "
      "addition, other operations on the system could fill up the disk unrelated to /var/tmp and "
      "cause the potential disruption to daemons as the disk is full.\n"
      "Fine grained control over the mount\n"
      "Configuring /var/tmp as its own file system allows an administrator to set additional "
      "mount options such as noexec/nosuid/nodev. These options limits an attackers ability to "
      "create exploits on the system. Other options allow for specific behavior. See man mount for "
      "exact details regarding filesystem-independent and filesystem-specific options.\n"
      "Protection from exploitation\n"
      "An example of exploiting /var/tmp may be an attacker establishing a hard-link to a system "
      "setuid program and wait for it to be updated. Once the program was updated, the hard-"
      "link would be broken and the attacker would have his own copy of the program. If the "
      "program happened to have a security vulnerability, the attacker could continue to exploit "
      "the known flaw."
    remediation:
      "For new installations, during installation create a custom partition setup and specify a "
      "separate partition for /var/tmp.\n"
      "For systems that were previously installed, create a new partition and configure "
      "/etc/fstab as appropriate."
    cis_benchmark: {
      profile_level: 2
      severity: LOW
    }
    scan_instructions:
      "scan_type_specific:{instance_scanning:{"
      "      check_alternatives:{"
      "        file_checks:{"
      "          files_to_check:{single_file:{path:\"/proc/self/mountinfo\"}}"
      "          content_entry:{"
      "            match_type: ALL_MATCH_ANY_ORDER"
      "            match_criteria: {"
      "              filter_regex: \".* /var/tmp .* - .*\""
      "              expected_regex: \".* /var/tmp .* - .*\""
      "            }"
      "          }"
      "        }"
      "      }"
      "    }}"
  }
}
benchmark_configs: {
  id: "separate-partition-var-log"
  compliance_note: {
    version: { cpe_uri: "cpe:/o:rockylinux:rockylinux:8.5" version: "2.0.0" benchmark_document: "CIS Rocky Linux 8" }
    title: "Ensure separate partition exists for /var/log"
    description: "The /var/log directory is used by system services to store log data."
    rationale:
      "The reasoning for mounting /var/log on a separate partition is as follow.\n"
      "Protection from resource exhaustion\n"
      "The default installation only creates a single / partition. Since the /var/log directory "
      "contain the log files that can grow quite large, there is a risk of resource exhaustion. It will "
      "essentially have the whole disk available to fill up and impact the system as a whole.\n"
      "Fine grained control over the mount\n"
      "Configuring /var/log as its own file system allows an administrator to set additional "
      "mount options such as noexec/nosuid/nodev. These options limits an attackers ability to "
      "create exploits on the system. Other options allow for specific behavior. See man mount for "
      "exact details regarding filesystem-independent and filesystem-specific options.\n"
      "Protection of log data\n"
      "As /var/log contains log files, care should be taken to ensure the security and integrity of "
      "the data and mount point."
    remediation:
      "For new installations, during installation create a custom partition setup and specify a "
      "separate partition for /var/log.\n"
      "For systems that were previously installed, create a new partition and configure "
      "/etc/fstab as appropriate."
    cis_benchmark: {
      profile_level: 2
      severity: LOW
    }
    scan_instructions:
      "scan_type_specific:{instance_scanning:{"
      "      check_alternatives:{"
      "        file_checks:{"
      "          files_to_check:{single_file:{path:\"/proc/self/mountinfo\"}}"
      "          content_entry:{"
      "            match_type: ALL_MATCH_ANY_ORDER"
      "            match_criteria: {"
      "              filter_regex: \".* /var/log .* - .*\""
      "              expected_regex: \".* /var/log .* - .*\""
      "            }"
      "          }"
      "        }"
      "      }"
      "    }}"
  }
}
benchmark_configs: {
  id: "separate-partition-var-log-audit"
  compliance_note: {
    version: { cpe_uri: "cpe:/o:rockylinux:rockylinux:8.5" version: "2.0.0" benchmark_document: "CIS Rocky Linux 8" }
    title: "Ensure separate partition exists for /var/log/audit"
    description: "The auditing daemon, auditd, stores log data in the /var/log/audit directory."
    rationale:
      "The reasoning for mounting /var/log/audit on a separate partition is as follow.\n"
      "Protection from resource exhaustion\n"
      "The default installation only creates a single / partition. Since the /var/log/audit "
      "directory contain the audit.log file that can grow quite large, there is a risk of resource "
      "exhaustion. It will essentially have the whole disk available to fill up and impact the system "
      "as a whole. In addition, other operations on the system could fill up the disk unrelated to "
      "/var/log/audit and cause auditd to trigger it's space_left_action as the disk is full. See "
      "man auditd.conf for details.\n"
      "Fine grained control over the mount\n"
      "Configuring /var/log/audit as its own file system allows an administrator to set "
      "additional mount options such as noexec/nosuid/nodev. These options limits an attackers "
      "ability to create exploits on the system. Other options allow for specific behavior. See man "
      "mount for exact details regarding filesystem-independent and filesystem-specific options.\n"
      "Protection of audit data\n"
      "As /var/log/audit contains audit logs, care should be taken to ensure the security and "
      "integrity of the data and mount point."
    remediation:
      "For new installations, during installation create a custom partition setup and specify a "
      "separate partition for /var/log/audit.\n"
      "For systems that were previously installed, create a new partition and configure "
      "/etc/fstab as appropriate."
    cis_benchmark: {
      profile_level: 2
      severity: LOW
    }
    scan_instructions:
      "scan_type_specific:{instance_scanning:{"
      "      check_alternatives:{"
      "        file_checks:{"
      "          files_to_check:{single_file:{path:\"/proc/self/mountinfo\"}}"
      "          content_entry:{"
      "            match_type: ALL_MATCH_ANY_ORDER"
      "            match_criteria: {"
      "              filter_regex: \".* /var/log/audit .* - .*\""
      "              expected_regex: \".* /var/log/audit .* - .*\""
      "            }"
      "          }"
      "        }"
      "      }"
      "    }}"
  }
}
benchmark_configs: {
  id: "separate-partition-home"
  compliance_note: {
    version: { cpe_uri: "cpe:/o:rockylinux:rockylinux:8.5" version: "2.0.0" benchmark_document: "CIS Rocky Linux 8" }
    title: "Ensure separate partition exists for /home"
    description: "The /home directory is used to support disk storage needs of local users."
    rationale:
      "The reasoning for mounting /home on a separate partition is as follow.\n"
      "Protection from resource exhaustion\n"
      "The default installation only creates a single / partition. Since the /home directory contains "
      "user generated data, there is a risk of resource exhaustion. It will essentially have the "
      "whole disk available to fill up and impact the system as a whole. In addition, other "
      "operations on the system could fill up the disk unrelated to /home and impact all local users.\n"
      "Fine grained control over the mount\n"
      "Configuring /home as its own file system allows an administrator to set additional mount "
      "options such as noexec/nosuid/nodev. These options limits an attackers ability to create "
      "exploits on the system. In the case of /home options such as usrquota/grpquota may be "
      "considered to limit the impact that users can have on each other with regards to disk "
      "resource exhaustion. Other options allow for specific behavior. See man mount for exact "
      "details regarding filesystem-independent and filesystem-specific options.\n"
      "Protection of user data\n"
      "As /home contains user data, care should be taken to ensure the security and integrity of the "
      "data and mount point."
    remediation:
      "For new installations, during installation create a custom partition setup and specify a "
      "separate partition for /home.\n"
      "For systems that were previously installed, create a new partition and configure "
      "/etc/fstab as appropriate."
    cis_benchmark: {
      profile_level: 2
      severity: LOW
    }
    scan_instructions:
      "scan_type_specific:{instance_scanning:{"
      "      check_alternatives:{"
      "        file_checks:{"
      "          files_to_check:{single_file:{path:\"/proc/self/mountinfo\"}}"
      "          content_entry:{"
      "            match_type: ALL_MATCH_ANY_ORDER"
      "            match_criteria: {"
      "              filter_regex: \".* /home .* - .*\""
      "              expected_regex: \".* /home .* - .*\""
      "            }"
      "          }"
      "        }"
      "      }"
      "    }}"
  }
}
benchmark_configs: {
  id: "usb-storage-disabled-rocky"
  compliance_note: {
    version: { cpe_uri: "cpe:/o:rockylinux:rockylinux:8.5" version: "2.0.0" benchmark_document: "CIS Rocky Linux 8" }
    title: "Disable USB Storage"
    description:
      "USB storage provides a means to transfer and store files insuring persistence and "
      "availability of the files independent of network connection status. Its popularity and utility "
      "has led to USB-based malware being a simple and common means for network infiltration "
      "and a first step to establishing a persistent threat within a networked environment."
    rationale:
      "Restricting USB access on the system will decrease the physical attack surface for a device "
      "and diminish the possible vectors to introduce malware."
    remediation:
      "Edit or create a file in the /etc/modprobe.d/ directory ending in .conf\n"
      "Example: vim /etc/modprobe.d/usb_storage.conf\n"
      "and add the following line:\n"
      "\n```\n"
      "install usb-storage /bin/true\n"
      "```\n\n"
      "Run the following command to unload the usb-storage module:\n"
      "\n```\n"
      "rmmod usb-storage\n"
      "```\n\n"
    cis_benchmark: {
      profile_level: 2
      severity: LOW
    }
    scan_instructions:
      "scan_type_specific:{instance_scanning:{"
      "  check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{single_file:{path:\"/proc/modules\"}}"
      "      content_entry:{"
      "        match_type: NONE_MATCH"
      "        match_criteria: {"
      "          filter_regex: \"usb-storage .*\""
      "          expected_regex: \"usb-storage .*\""
      "        }"
      "      }"
      "    }"
      "    file_checks:{"
      "      files_to_check:{files_in_dir:{"
      "        dir_path:\"/etc/modprobe.d\""
      "        filename_regex: \".*\\\\.conf\""
      "        recursive: true"
      "      }}"
      "      content_entry:{"
      "        match_type: ALL_MATCH_ANY_ORDER"
      "        match_criteria: {"
      "          filter_regex: \"install usb-storage .*\""
      "          expected_regex: \"install usb-storage /bin/(true|false)\""
      "        }"
      "      }"
      "    }"
      "  }"
      "}"
      "image_scanning:{"
      "  check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{files_in_dir:{"
      "        dir_path:\"/etc/modprobe.d\""
      "        filename_regex: \".*\\\\.conf\""
      "        recursive: true"
      "      }}"
      "      content_entry:{"
      "        match_type: ALL_MATCH_ANY_ORDER"
      "        match_criteria: {"
      "          filter_regex: \"install usb-storage .*\""
      "          expected_regex: \"install usb-storage /bin/(true|false)\""
      "        }"
      "      }"
      "    }"
      "  }"
      "}}"
  }
}
benchmark_configs: {
  id: "selinux-mode-enforcing"
  compliance_note: {
    version: { cpe_uri: "cpe:/o:rockylinux:rockylinux:8.5" version: "2.0.0" benchmark_document: "CIS Rocky Linux 8" }
    title: "Ensure the SELinux mode is enforcing"
    description:
      "SELinux can run in one of three modes: disabled, permissive, or enforcing:\n"
      "Enforcing - Is the default, and recommended, mode of operation; in enforcing mode "
      "SELinux operates normally, enforcing the loaded security policy on the entire "
      "system.\n"
      "Permissive - The system acts as if SELinux is enforcing the loaded security policy, "
      "including labeling objects and emitting access denial entries in the logs, but it does "
      "not actually deny any operations. While not recommended for production systems, "
      "permissive mode can be helpful for SELinux policy development.\n"
      "Disabled - Is strongly discouraged; not only does the system avoid enforcing the "
      "SELinux policy, it also avoids labeling any persistent objects such as files, making it "
      "difficult to enable SELinux in the future\n"
      "Note: you can set individual domains to permissive mode while the system runs in enforcing "
      "mode. For example, to make the httpd_t domain permissive:\n"
      "\n```\n"
      "# semanage permissive -a httpd_t\n"
      "```\n\n"
    rationale:
      "Running SELinux in disabled mode the system not only avoids enforcing the SELinux poli cy,"
      "it also avoids labeling any persistent objects such as files, making it difficult to enable"
      "SELinux in the future."
      "Running SELinux in Permissive mode, though helpful for developing SELinux policy, only"
      "logs access denial entries, but does not deny any operations."
    remediation:
      "Run one of the following commands to set SELinux's running mode:\n"
      "\n```\n"
      "# setenforce 1\n"
      "```\n\n"
      "Edit the /etc/selinux/config file to set the SELINUX parameter:\n"
      "\n```\n"
      "SELINUX=enforcing\n"
      "```\n\n"
      "References:\n"
      "https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/7/html/selinux_users_and_administrators_guide/sect-security-enhanced_linux-introduction-selinux_modes"
    cis_benchmark: {
      profile_level: 2
      severity: LOW
    }
    scan_instructions:
      "scan_type_specific:{instance_scanning:{"
      "      check_alternatives:{"
      "          file_checks:{"
      "              files_to_check:{single_file{path:\"/sys/fs/selinux/enforce\"}}"
      "              content:{content:\"1\"}"
      "          }"
      "          file_checks:{"
      "            files_to_check:{single_file:{path:\"/etc/selinux/config\"}}"
      "            content_entry:{"
      "                match_type: ALL_MATCH_ANY_ORDER"
      "                match_criteria: {"
      "                filter_regex: \"SELINUX=[a-zA-Z0-9]+\""
      "                expected_regex: \"SELINUX=enforcing\""
      "                }"
      "          }"
      "      }"
      "   }"
      "  }image_scanning:{"
      "      check_alternatives:{"
      "          file_checks:{"
      "            files_to_check:{single_file:{path:\"/etc/selinux/config\"}}"
      "            content_entry:{"
      "              match_type: ALL_MATCH_ANY_ORDER"
      "              match_criteria: {"
      "                filter_regex: \"SELINUX=[a-zA-Z0-9]+\""
      "                expected_regex: \"SELINUX=enforcing\""
      "              }"
      "            }"
      "          }"
      "       }"
      "  }"
      "  }"
  }
}
benchmark_configs: {
  id: "automount-removable-media-disabled"
  compliance_note: {
    version: { cpe_uri: "cpe:/o:rockylinux:rockylinux:8.5" version: "2.0.0" benchmark_document: "CIS Rocky Linux 8" }
    title: "Ensure automatic mounting of removable media is disabled"
    description:
      "By default GNOME automatically mounts removable media when inserted as a convenience "
      "to the user."
    rationale:
      "With automounting enabled anyone with physical access could attach a USB drive or disc "
      "and have its contents available in system even if they lacked permissions to mount it "
      "themselves."
    remediation:
      "Ensure that automatic mounting of media is disabled for all GNOME users:\n"
      "\n```\n"
      "# cat << EOF >> /etc/dconf/db/local.d/00-media-automount\n"
      "[org/gnome/desktop/media-handling]\n"
      "automount=false\n"
      "automount-open=false\n"
      "EOF\n"
      "```\n\n"
      "Apply the changes with:\n"
      "\n```\n"
      "# dconf update\n"
      "```\n\n"
    cis_benchmark: {
      profile_level: 2
      severity: LOW
    }
    scan_instructions:
      "generic:{check_alternatives:{"
      "    file_checks:{"
      "        files_to_check:{single_file:{path:\"/etc/glib-2.0/settings/defaults\"}}"
      "        content_entry:{"
      "        match_type: ALL_MATCH_ANY_ORDER"
      "        delimiter: \"\\0\""
      "        match_criteria: {"
      "            filter_regex: \"\\\\[org/gnome/desktop/media-handling\\\\].*(\\\\n\\\\[|$)\""
      "            expected_regex: \".*\\\\nautomount=false.*\""
      "        }"
      "        match_criteria: {"
      "            filter_regex: \"\\\\[org/gnome/desktop/media-handling\\\\].*(\\\\n\\\\[|$)\""
      "            expected_regex: \".*\\\\nautomount-open=false.*\""
      "        }"
      "        }"
      "        } "
      "    }"
      "}"
  }
}
benchmark_configs: {
  id: "avahi-disabled-not-installed"
  compliance_note: {
    version: { cpe_uri: "cpe:/o:rockylinux:rockylinux:8.5" version: "2.0.0" benchmark_document: "CIS Rocky Linux 8" }
    title: "Ensure Avahi Server is not installed"
    description:
      "Avahi is a free zeroconf implementation, including a system for multicast DNS/DNS-SD "
      "service discovery. Avahi allows programs to publish and discover services and hosts "
      "running on a local network with no specific configuration. For example, a user can plug a "
      "computer into a network and Avahi automatically finds printers to print to, files to look at "
      "and people to talk to, as well as network services running on the machine."
    rationale:
      "Automatic discovery of network services is not normally required for system functionality. "
      "It is recommended to remove this package to reduce the potential attack surface."
    remediation:
      "Run the following commands to stop, mask and remove avahi-autoipd and avahi:"
      "\n```\n"
      "# systemctl stop avahi-daemon.socket avahi-daemon.service\n"
      "# dnf remove avahi-autoipd avahi\n"
      "```\n\n"
    cis_benchmark: {
      profile_level: 2
      severity: LOW
    }
    scan_instructions:
      "generic:{check_alternatives:{"
      "    file_checks:{"
      "        files_to_check:{"
      "            files_in_dir:{"
      "                dir_path:\"/etc/systemd/system\""
      "                recursive: true"
      "                filename_regex: \"avahi-daemon.(service|socket)\""
      "        }}"
      "        existence:{should_exist: false}"
      "        non_compliance_msg: \"a config file in /etc/systemd/system enables avahi-daemon\""
      "        file_display_command: \"find /etc/systemd/system -name avahi-daemon.*\""
      "    }"
      "    file_checks: {"
      "        files_to_check:{"
      "            files_in_dir:{"
      "                dir_path: \"/usr/lib/systemd/system\""
      "                recursive: true"
      "                filename_regex: \"avahi-daemon.(service|socket)\""
      "        }}"
      "        existence:{should_exist: false}"
      "        non_compliance_msg: \"a config file in /usr/lib/systemd/system enables avahi-daemon\""
      "        file_display_command: \"find /usr/lib/systemd/system -name avahi-daemon.*\""
      "    }"
      "    file_checks: {"
      "        files_to_check:{single_file:{path:\"/usr/sbin/avahi-autoipd\"}}"
      "        existence:{should_exist: false}"
      "        non_compliance_msg: \"Executable file /usr/sbin/avahi-autoipd is available\""
      "        file_display_command: \"find /usr/sbin -name avahi-autoipd\""
      "    }"
      "    file_checks: {"
      "        files_to_check:{single_file:{path:\"/etc/avahi/avahi-autoipd.action\"}}"
      "        existence:{should_exist: false}"
      "        non_compliance_msg: \"Executable file /etc/avahi/avahi-autoipd.action is available\""
      "        file_display_command: \"find /etc/avahi -name avahi-autoipd.action\""
      "      }"
      "    }}"
  }
}
benchmark_configs: {
  id: "sctp-disabled"
  compliance_note: {
    version: { cpe_uri: "cpe:/o:rockylinux:rockylinux:8.5" version: "2.0.0" benchmark_document: "CIS Rocky Linux 8" }
    title: "Ensure SCTP is disabled"
    description:
      "The Stream Control Transmission Protocol (SCTP) is a transport layer protocol used to "
      "support message oriented communication, with several streams of messages in one "
      "connection. It serves a similar function as TCP and UDP, incorporating features of both. It is "
      "message-oriented like UDP, and ensures reliable in-sequence transport of messages with "
      "congestion control like TCP."
    rationale:
      "If the protocol is not being used, it is recommended that kernel module not be loaded, "
      "disabling the service to reduce the potential attack surface."
    remediation:
      "Edit or create a file in the /etc/modprobe.d/ directory ending in .conf "
      "Example: \n"
      "\n```\n"
      "printf \"\n"
      "install sctp /bin/true\n"
      "\" >> /etc/modprobe.d/sctp.conf\n"
      "```\n\n"
      "Run the following command to unload the sctp module:\n"
      "\n```\n"
      "# rmmod stcp\n"
      "```\n\n"
    cis_benchmark: {
      profile_level: 2
      severity: LOW
    }
    scan_instructions:
      "scan_type_specific:{instance_scanning:{"
      "  check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{single_file:{path:\"/proc/modules\"}}"
      "      content_entry:{"
      "        match_type: NONE_MATCH"
      "        match_criteria: {"
      "          filter_regex: \"sctp\\\\s+.*\""
      "          expected_regex: \"sctp .*\""
      "        }"
      "      }"
      "    }"
      "    file_checks:{"
      "      files_to_check:{files_in_dir:{"
      "        dir_path:\"/etc/modprobe.d\""
      "        filename_regex: \".*\\\\.conf\""
      "        recursive: true"
      "      }}"
      "      content_entry:{"
      "        match_type: ALL_MATCH_ANY_ORDER"
      "        match_criteria: {"
      "          filter_regex: \"install sctp .*\""
      "          expected_regex: \"install sctp /bin/(true|false)\""
      "        }"
      "      }"
      "    }"
      "  }"
      "}"
      "image_scanning:{"
      "  check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{files_in_dir:{"
      "        dir_path:\"/etc/modprobe.d\""
      "        filename_regex: \".*\\\\.conf\""
      "        recursive: true"
      "      }}"
      "      content_entry:{"
      "        match_type: ALL_MATCH_ANY_ORDER"
      "        match_criteria: {"
      "          filter_regex: \"install sctp .*\""
      "          expected_regex: \"install sctp /bin/(true|false)\""
      "        }"
      "      }"
      "    }"
      "  }"
      "}}"
  }
}
benchmark_configs: {
  id: "dccp-disabled"
  compliance_note: {
    version: { cpe_uri: "cpe:/o:rockylinux:rockylinux:8.5" version: "2.0.0" benchmark_document: "CIS Rocky Linux 8" }
    title: "Ensure DCCP is disabled"
    description:
      "The Datagram Congestion Control Protocol (DCCP) is a transport layer protocol that "
      "supports streaming media and telephony. DCCP provides a way to gain access to "
      "congestion control, without having to do it at the application layer, but does not provide in-"
      "sequence delivery."
    rationale:
      "If the protocol is not required, it is recommended that the drivers not be installed to reduce"
      "the potential attack surface."
    remediation:
      "Edit or create a file in the /etc/modprobe.d/ directory ending in .conf "
      "Example: \n"
      "\n```\n"
      "printf \"\n"
      "install dccp /bin/true\n"
      "\" >> /etc/modprobe.d/dccp.conf\n"
      "```\n\n"
      "Run the following command to unload the sctp module:\n"
      "\n```\n"
      "# rmmod dccp\n"
      "```\n\n"
    cis_benchmark: {
      profile_level: 2
      severity: LOW
    }
    scan_instructions:
      "scan_type_specific:{instance_scanning:{"
      "    check_alternatives:{"
      "      file_checks:{"
      "        files_to_check:{single_file:{path:\"/proc/modules\"}}"
      "        content_entry:{"
      "          match_type: NONE_MATCH"
      "          match_criteria: {"
      "            filter_regex: \"dccp\\\\s+.*\""
      "            expected_regex: \"dccp .*\""
      "          }"
      "        }"
      "      }"
      "      file_checks:{"
      "        files_to_check:{files_in_dir:{"
      "          dir_path:\"/etc/modprobe.d\""
      "          filename_regex: \".*\\\\.conf\""
      "          recursive: true"
      "        }}"
      "        content_entry:{"
      "          match_type: ALL_MATCH_ANY_ORDER"
      "          match_criteria: {"
      "            filter_regex: \"install dccp .*\""
      "            expected_regex: \"install dccp /bin/(true|false)\""
      "          }"
      "        }"
      "      }"
      "    }"
      "    check_alternatives:{"
      "        file_checks:{"
      "            files_to_check:{"
      "                files_in_dir:{"
      "                    dir_path:\"/boot\""
      "                    filename_regex: \"config-.*\""
      "                    recursive: true"
      "                }"
      "            }"
      "            content_entry:{"
      "                match_type: NONE_MATCH"
      "                match_criteria:{"
      "                    filter_regex: \".*(DCCP).*\""
      "                    expected_regex: \"[^#]*CONFIG_IP_DCCP.*\""
      "                }"
      "            }"
      "        }"
      "    }"
      "  }"
      "  image_scanning:{"
      "    check_alternatives:{"
      "      file_checks:{"
      "        files_to_check:{files_in_dir:{"
      "          dir_path:\"/etc/modprobe.d\""
      "          filename_regex: \".*\\\\.conf\""
      "          recursive: true"
      "        }}"
      "        content_entry:{"
      "          match_type: ALL_MATCH_ANY_ORDER"
      "          match_criteria: {"
      "            filter_regex: \"install sctp .*\""
      "            expected_regex: \"install sctp /bin/(true|false)\""
      "          }"
      "        }"
      "      }"
      "    }"
      "    check_alternatives:{"
      "        file_checks:{"
      "            files_to_check:{"
      "                files_in_dir:{"
      "                    dir_path:\"/boot\""
      "                    filename_regex: \"config-.*\""
      "                    recursive: true"
      "                }"
      "            }"
      "            content_entry:{"
      "                match_type: NONE_MATCH"
      "                match_criteria:{"
      "                    filter_regex: \".*(DCCP).*\""
      "                    expected_regex: \"[^#]*CONFIG_IP_DCCP.*\""
      "                }"
      "            }"
      "        }"
      "    }"
      "  }}"
  }
}
benchmark_configs: {
  id: "auditd-installed"
  compliance_note: {
    version: { cpe_uri: "cpe:/o:rockylinux:rockylinux:8.5" version: "2.0.0" benchmark_document: "CIS Rocky Linux 8" }
    title: "Ensure auditd is installed"
    description:
      "auditd is the userspace component to the Linux Auditing System. It's responsible for"
      "writing audit records to the disk"
    rationale:
      "The capturing of system events provides system administrators with information to allow"
      "them to determine if unauthorized access to their system is occurring."
    remediation:
      "Run the following command to Install auditd\n"
      "\n```\n"
      "# dnf install audit\n"
      "```\n\n"
    cis_benchmark: {
      profile_level: 2
      severity: LOW
    }
    scan_instructions:
      "generic:{check_alternatives:{"
      "  file_checks:{"
      "    files_to_check:{single_file:{path:\"/usr/bin/auditd\"}}"
      "    existence:{should_exist: true}"
      "  }"
      "}"
      "check_alternatives:{"
      "  file_checks:{"
      "    files_to_check:{single_file:{path:\"/usr/sbin/auditd\"}}"
      "    existence:{should_exist: true}"
      "  }"
      "}"
      "check_alternatives:{"
      "  file_checks:{"
      "    files_to_check:{single_file:{path:\"/bin/auditd\"}}"
      "    existence:{should_exist: true}"
      "  }"
      "}"
      "check_alternatives:{"
      "  file_checks:{"
      "    files_to_check:{single_file:{path:\"/sbin/auditd\"}}"
      "    existence:{should_exist: true}"
      "  }"
      "}"
      "}"
  }
}
benchmark_configs: {
  id: "auditing-prior-to-auditd-enabled"
  compliance_note: {
    version: { cpe_uri: "cpe:/o:rockylinux:rockylinux:8.5" version: "2.0.0" benchmark_document: "CIS Rocky Linux 8" }
    title: "Ensure auditing for processes that start prior to auditd is enabled"
    description:
      "Configure grub2 so that processes that are capable of being audited can be audited even if "
      "they start up prior to auditd startup."
    rationale:
      "Audit events need to be captured on processes that start up prior to auditd , so that "
      "potential malicious activity cannot go undetected."
    remediation:
      "Run the following command to add audit=1 to GRUB_CMDLINE_LINUX:\n"
      "\n```\n"
      "# grubby --update-kernel ALL --args 'audit=1'\n"
      "```\n\n"
    cis_benchmark: {
      profile_level: 2
      severity: LOW
    }
    scan_instructions:
      "generic:{"
      "check_alternatives:{"
      "    file_checks:{"
      "    files_to_check:{files_in_dir:{"
      "        dir_path:\"/boot\""
      "        recursive: true"
      "        filename_regex: \"grubenv\""
      "        }"
      "    }"
      "    content_entry:{"
      "        match_type: ALL_MATCH_ANY_ORDER"
      "        match_criteria: {"
      "        filter_regex: \"kernelopts=.*\""
      "        expected_regex: \"kernelopts=([^#]+\\\\s+)?(audit=1)\""
      "        }"
      "    }"
      "    }"
      "}}"
  }
}
benchmark_configs: {
  id: "audit-backlog-limit-sufficient"
  compliance_note: {
    version: { cpe_uri: "cpe:/o:rockylinux:rockylinux:8.5" version: "2.0.0" benchmark_document: "CIS Rocky Linux 8" }
    title: "Ensure audit_backlog_limit is sufficient"
    description: "The backlog limit has a default setting of 64"
    rationale:
      "During boot if audit=1, then the backlog will hold 64 records. If more that 64 records are "
      "created during boot, auditd records will be lost and potential malicious activity could go "
      "undetected."
    remediation:
      "Run the following command to add audit_backlog_limit=<BACKLOG SIZE> to "
      "GRUB_CMDLINE_LINUX:\n"
      "\n```\n"
      "# grubby --update-kernel ALL --args 'audit_backlog_limit=<BACKLOG SIZE>'\n"
      "```\n\n"
      "Example:\n"
      "\n```\n"
      "# grubby --update-kernel ALL --args 'audit_backlog_limit=8192'\n"
      "```\n\n"
    cis_benchmark: {
      profile_level: 2
      severity: LOW
    }
    scan_instructions:
      "generic:{"
      "check_alternatives:{"
      "    file_checks:{"
      "    files_to_check:{files_in_dir:{"
      "        dir_path:\"/boot\""
      "        recursive: true"
      "        filename_regex: \"grubenv\""
      "        }"
      "    }"
      "    content_entry:{"
      "        match_type: ALL_MATCH_ANY_ORDER"
      "        match_criteria: {"
      "        filter_regex: \"kernelopts=.*\""
      "        expected_regex: \"kernelopts=([^#]+\\\\s+)?audit_backlog_limit=(\\\\d+)\""
      "          group_criteria: {"
      "            group_index: 2"
      "            type: GREATER_THAN"
      "            const: 8191"
      "          }"
      "        }"
      "    }"
      "    }"
      "}}"
  }
}
benchmark_configs: {
  id: "audit-log-storage-size-configured"
  compliance_note: {
    version: { cpe_uri: "cpe:/o:rockylinux:rockylinux:8.5" version: "2.0.0" benchmark_document: "CIS Rocky Linux 8" }
    title: "Ensure audit log storage size is configured"
    description:
      "Configure the maximum size of the audit log file. Once the log reaches the maximum size, it "
      "will be rotated and a new log file will be started."
    rationale:
      "It is important that an appropriate size is determined for log files so that they do not impact "
      "the system and audit data is not lost."
    remediation:
      "Set the following parameter in /etc/audit/auditd.conf in accordance with site policy:\n"
      "\n```\n"
      "max_log_file = <MB>\n"
      "```\n\n"
    cis_benchmark: {
      profile_level: 2
      severity: LOW
    }
    scan_instructions:
      "generic:{"
      "      check_alternatives:{"
      "        file_checks:{"
      "          files_to_check:{single_file:{path:\"/etc/audit/auditd.conf\"}}"
      "              content_entry:{"
      "                match_type: ALL_MATCH_ANY_ORDER"
      "                match_criteria: {"
      "                  filter_regex: \"\\\\s*max_log_file(\\\\s|=).*\""
      "                  expected_regex: \"max_log_file\\\\s*=\\\\s*(\\\\d+)\""
      "                }"
      "              }"
      "        }"
      "    }"
      "}"
  }
}
benchmark_configs: {
  id: "audit-log-not-auto-deleted"
  compliance_note: {
    version: { cpe_uri: "cpe:/o:rockylinux:rockylinux:8.5" version: "2.0.0" benchmark_document: "CIS Rocky Linux 8" }
    title: "Ensure audit logs are not automatically deleted"
    description:
      "The max_log_file_action setting determines how to handle the audit log file reaching the "
      "max file size. A value of keep_logs will rotate the logs but never delete old logs."
    rationale:
      "In high security contexts, the benefits of maintaining a long audit history exceed the cost of "
      "storing the audit history."
    remediation:
      "Set the following parameter in /etc/audit/auditd.conf:\n"
      "\n```\n"
      "max_log_file_action = keep_logs\n"
      "```\n\n"
    cis_benchmark: {
      profile_level: 2
      severity: LOW
    }
    scan_instructions:
      "generic:{"
      "      check_alternatives:{"
      "        file_checks:{"
      "          files_to_check:{single_file:{path:\"/etc/audit/auditd.conf\"}}"
      "              content_entry:{"
      "                match_type: ALL_MATCH_ANY_ORDER"
      "                match_criteria: {"
      "                  filter_regex: \"\\\\s*max_log_file_action(\\\\s|=).*\""
      "                  expected_regex: \"max_log_file_action\\\\s*=\\\\s*keep_logs\""
      "                }"
      "              }"
      "        }"
      "    }"
      "}"
  }
}
benchmark_configs: {
  id: "system-disabled-when-audit-logs-full"
  compliance_note: {
    version: { cpe_uri: "cpe:/o:rockylinux:rockylinux:8.5" version: "2.0.0" benchmark_document: "CIS Rocky Linux 8" }
    title: "Ensure system is disabled when audit logs are full"
    description:
      "The auditd daemon can be configured to halt the system when the audit logs are full.\n"
      "The admin_space_left_action parameter tells the system what action to take when the "
      "system has detected that it is low on disk space. Valid values are ignore, syslog, suspend, "
      "single, and halt.\n"
      "ignore, the audit daemon does nothing\n"
      "Syslog, the audit daemon will issue a warning to syslog\n"
      "Suspend, the audit daemon will stop writing records to the disk\n"
      "single, the audit daemon will put the computer system in single user mode\n"
      "halt, the audit daemon will shutdown the system"
    rationale:
      "In high security contexts, the risk of detecting unauthorized access or nonrepudiation "
      "exceeds the benefit of the system's availability."
    remediation:
      "Set the following parameters in /etc/audit/auditd.conf:\n"
      "\n```\n"
      "space_left_action = email\n"
      "action_mail_acct = root\n"
      "```\n\n"
      "Set admin_space_left_action to either halt or single in /etc/audit/auditd.conf.\n"
      "Example:\n"
      "\n```\n"
      "admin_space_left_action = halt\n"
      "```\n\n"
    cis_benchmark: {
      profile_level: 2
      severity: LOW
    }
    scan_instructions:
      "generic:{"
      "          check_alternatives:{"
      "            file_checks:{"
      "              files_to_check:{single_file:{path:\"/etc/audit/auditd.conf\"}}"
      "                  content_entry:{"
      "                    match_type: ALL_MATCH_ANY_ORDER"
      "                    match_criteria: {"
      "                      filter_regex: \"\\\\s*space_left_action(\\\\s|=).*\""
      "                      expected_regex: \"space_left_action\\\\s*=\\\\s*email\""
      "                    }"
      "                  }"
      "            }"
      "            file_checks:{"
      "                files_to_check:{single_file:{path:\"/etc/audit/auditd.conf\"}}"
      "                    content_entry:{"
      "                      match_type: ALL_MATCH_ANY_ORDER"
      "                      match_criteria: {"
      "                        filter_regex: \"\\\\s*action_mail_acct(\\\\s|=).*\""
      "                        expected_regex: \"action_mail_acct\\\\s*=\\\\s*root\""
      "                      }"
      "                    }"
      "            }"
      "            file_checks:{"
      "                files_to_check:{single_file:{path:\"/etc/audit/auditd.conf\"}}"
      "                    content_entry:{"
      "                      match_type: ALL_MATCH_ANY_ORDER"
      "                      match_criteria: {"
      "                        filter_regex: \"\\\\s*admin_space_left_action(\\\\s|=).*\""
      "                        expected_regex: \"admin_space_left_action\\\\s*=\\\\s*(halt|single)\""
      "                      }"
      "                    }"
      "            }"
      "        }"
      "    }"
  }
}
benchmark_configs: {
  id: "actions-as-another-user-logged"
  compliance_note: {
    version: { cpe_uri: "cpe:/o:rockylinux:rockylinux:8.5" version: "2.0.0" benchmark_document: "CIS Rocky Linux 8" }
    title: "Ensure actions as another user are always logged"
    description:
      "sudo provides users with temporary elevated privileges to perform operations, either as "
      "the superuser or another user. "
    rationale:
      "Creating an audit log of users with temporary elevated privileges and the operation(s) they "
      "performed is essential to reporting. Administrators will want to correlate the events "
      "written to the audit trail with the records written to sudo's logfile to verify if unauthorized "
      "commands have been executed."
    remediation:
      "Create audit rules\n"
      "Edit or create a file in the /etc/audit/rules.d/ directory, ending in .rules extension, with "
      "the relevant rules to monitor elevated privileges.\n"
      "64 Bit systems\n"
      "Example:\n"
      "\n```\n"
      "# printf \"\n"
      "-a always,exit -F arch=b64 -C euid!=uid -F auid!=unset -S execve -k "
      "user_emulation\n"
      "-a always,exit -F arch=b32 -C euid!=uid -F auid!=unset -S execve -k "
      "user_emulation\n"
      "\" >> /etc/audit/rules.d/50-user_emulation.rules\n"
      "```\n\n"
      "Load audit rules\n"
      "Merge and load the rules into active configuration:\n"
      "\n```\n"
      "# augenrules --load\n"
      "```\n\n"
      "Check if reboot is required.\n"
      "\n```\n"
      "# if [[ $(auditctl -s | grep \"enabled\") =~ \"2\" ]]; then printf \"Reboot "
      "required to load rules\\\\n\"; fi\n"
      "```\n\n"
      "32 Bit systems\n"
      "Follow the same procedures as for 64 bit systems and ignore any entries with b64."
    cis_benchmark: {
      profile_level: 2
      severity: LOW
    }
    scan_instructions:
      "scan_type_specific:{"
      "    instance_scanning:{"
      "        check_alternatives:{"
      "            file_checks:{"
      "                files_to_check:{single_file:{path: \"/etc/audit/audit.rules\"}}"
      "                content_entry:{"
      "                    match_type: ALL_MATCH_ANY_ORDER"
      "                    match_criteria:{"
      "                        filter_regex: \".*(e)?uid\\\\!=(e?)uid.*\""
      "                        expected_regex: \"\\\\s*-a\\\\s*always,exit\\\\s*-F\\\\s*arch=b[2346]{2}\\\\s*-F\\\\s*auid\\\\!=(unset|-1|4294967295)\\\\s*-C\\\\s*(euid\\\\!=uid|uid\\\\!=euid)\\\\s*-S\\\\s*execve\\\\s*(-F\\\\s*key=|-k)\\\\s*[!-~]*\\\\s*\""
      "                    }"
      "                }"
      "            }"
      "        }"
      "    }"
      "    image_scanning:{"
      "        check_alternatives:{"
      "            file_checks:{"
      "                files_to_check:{"
      "                    files_in_dir:{"
      "                        dir_path:\"/etc/audit/rules.d\""
      "                        recursive: true"
      "                        files_only: true"
      "                        filename_regex: \".*\\\\.rules\""
      "                    }"
      "                }"
      "                content_entry:{"
      "                    match_type: ALL_MATCH_ANY_ORDER"
      "                    match_criteria:{"
      "                        filter_regex: \".*(e)?uid\\\\!=(e?)uid.*\""
      "                        expected_regex: \"\\\\s*-a\\\\s*always,exit\\\\s*-F\\\\s*arch=b[2346]{2}\\\\s*-F\\\\s*auid\\\\!=(unset|-1|4294967295)\\\\s*-C\\\\s*(euid\\\\!=uid|uid\\\\!=euid)\\\\s*-S\\\\s*execve\\\\s*(-F\\\\s*key=|-k)\\\\s*[!-~]*\\\\s*\""
      "                    }"
      "                }"
      "            }"
      "        }"
      "    }"
      "}"
  }
}
benchmark_configs: {
  id: "events-modifying-sudo-log-file-collected"
  compliance_note: {
    version: { cpe_uri: "cpe:/o:rockylinux:rockylinux:8.5" version: "2.0.0" benchmark_document: "CIS Rocky Linux 8" }
    title: "Ensure events that modify the sudo log file are collected"
    description:
      "Monitor the sudo log file. If the system has been properly configured to disable the use of "
      "the su command and force all administrators to have to log in first and then use sudo to "
      "execute privileged commands, then all administrator commands will be logged to "
      "/var/log/sudo.log . Any time a command is executed, an audit event will be triggered as "
      "the /var/log/sudo.log file will be opened for write and the executed administration "
      "command will be written to the log."
    rationale:
      "Changes in /var/log/sudo.log indicate that an administrator has executed a command or "
      "the log file itself has been tampered with. Administrators will want to correlate the events "
      "written to the audit trail with the records written to /var/log/sudo.log to verify if "
      "unauthorized commands have been executed."
    remediation:
      "Edit or create a file in the /etc/audit/rules.d/ directory, ending in .rules extension, with "
      "the relevant rules to monitor events that modify the sudo log file.\n"
      "Example:\n"
      "\n```\n"
      "# {\n"
      "SUDO_LOG_FILE=$(grep -r logfile /etc/sudoers* | sed -e 's/.*logfile=//;s/,?"
      ".*//' -e 's/\"//g')\n"
      "[ -n \"${SUDO_LOG_FILE}\" ] && printf \""
      "-w ${SUDO_LOG_FILE} -p wa -k sudo_log_file"
      "\" >> /etc/audit/rules.d/50-sudo.rules \\"
      "|| printf \"ERROR: Variable 'SUDO_LOG_FILE_ESCAPED' is unset.\\\\n\""
      "}\n"
      "```\n\n"
      "Merge and load the rules into active configuration:\n"
      "\n```\n"
      "# augenrules --load\n"
      "```\n\n"
      "Check if reboot is required.\n"
      "\n```\n"
      "# if [[ $(auditctl -s | grep \"enabled\") =~ \"2\" ]]; then printf \"Reboot "
      "required to load rules\\\\n\"; fi\n"
      "```\n\n"
    cis_benchmark: {
      profile_level: 2
      severity: LOW
    }
    scan_instructions:
      "scan_type_specific:{"
      "    instance_scanning:{"
      "        check_alternatives:{"
      "            file_checks:{"
      "                files_to_check:{single_file:{path: \"/etc/audit/audit.rules\"}}"
      "                content_entry:{"
      "                    match_type: ALL_MATCH_ANY_ORDER"
      "                    match_criteria:{"
      "                        filter_regex: \".*/var/log/sudo.log.*\""
      "                        expected_regex: \"^\\\\s*-w\\\\s*/var/log/sudo.log\\\\s*-p\\\\s*wa\\\\s*(-F\\\\s*key=|-k)\\\\s*[!-~]*\\\\s*$\""
      "                    }"
      "                }"
      "            }"
      "        }"
      "    }"
      "    image_scanning:{"
      "        check_alternatives:{"
      "            file_checks:{"
      "                files_to_check:{"
      "                    files_in_dir:{"
      "                        dir_path:\"/etc/audit/rules.d\""
      "                        recursive: true"
      "                        files_only: true"
      "                        filename_regex: \".*\\\\.rules\""
      "                    }"
      "                }"
      "                content_entry:{"
      "                    match_type: ALL_MATCH_ANY_ORDER"
      "                    match_criteria:{"
      "                        filter_regex: \".*/var/log/sudo.log.*\""
      "                        expected_regex: \"^\\\\s*-w\\\\s*/var/log/sudo.log\\\\s*-p\\\\s*wa\\\\s*(-F\\\\s*key=|-k)\\\\s*[!-~]*\\\\s*$\""
      "                    }"
      "                }"
      "            }"
      "        }"
      "    }"
      "}"
  }
}
benchmark_configs: {
  id: "events-modifying-date-time-info-collected"
  compliance_note: {
    version: { cpe_uri: "cpe:/o:rockylinux:rockylinux:8.5" version: "2.0.0" benchmark_document: "CIS Rocky Linux 8" }
    title: "Ensure events that modify date and time information are collected"
    description:
      "Capture events where the system date and/or time has been modified. The parameters in "
      "this section are set to determine if thesystem calls have been executed.\n"
      "adjtimex - tune kernel clock\n"
      "settimeofday - set time using timeval and timezone structures\n"
      "stime - using seconds since 1/1/1970\n"
      "clock_settime - allows for the setting of several internal clocks and timers\n"
      "Further, ensure to write an audit record to the configured audit log file upon exit, "
      "tagging the records with a unique identifier such as \"time-change\"."
    rationale:
      "Unexpected changes in system date and/or time could be a sign of malicious activity on the "
      "system."
    remediation:
      "Create audit rules\n"
      "Edit or create a file in the /etc/audit/rules.d/ directory, ending in .rules extension, with "
      "the relevant rules to monitor events that modify date and time information.\n"
      "64 Bit systems\n"
      "Example:\n"
      "\n```\n"
      "# printf \"\n"
      "-a always,exit -F arch=b64 -S adjtimex,settimeofday,clock_settime -k time-"
      "change\n"
      "-a always,exit -F arch=b32 -S adjtimex,settimeofday,clock_settime -k time-"
      "change\n"
      "-w /etc/localtime -p wa -k time-change\n"
      "\" >> /etc/audit/rules.d/50-time-change.rules\n"
      "```\n\n"
      "Load audit rules\n"
      "Merge and load the rules into active configuration:\n"
      "\n```\n"
      "# augenrules --load\n"
      "```\n\n"
      "Check if reboot is required.\n"
      "\n```\n"
      "# if [[ $(auditctl -s | grep \"enabled\") =~ \"2\" ]]; then printf \"Reboot "
      "required to load rules\\\\n\"; fi\n"
      "```\n\n"
      "32 Bit systems\n"
      "Follow the same procedures as for 64 bit systems and ignore any entries with b64. In "
      "addition, add stime to the system call audit. Example:\n"
      "\n```\n"
      "-a always,exit -F arch=b32 -S adjtimex,settimeofday,clock_settime,stime -k "
      "time-change\n"
      "```\n\n"
    cis_benchmark: {
      profile_level: 2
      severity: LOW
    }
    scan_instructions:
      "scan_type_specific:{"
      "    instance_scanning:{"
      "        check_alternatives:{"
      "            file_checks:{"
      "                files_to_check:{single_file:{path: \"/etc/audit/audit.rules\"}}"
      "                content_entry:{"
      "                    match_type: ALL_MATCH_ANY_ORDER"
      "                    match_criteria:{"
      "                        filter_regex: \".*adjtimex.*\""
      "                        expected_regex: \"\\\\s*-a\\\\s*always,exit\\\\s*-F\\\\s*arch=b[2346]{2}\\\\s*-S\\\\s*([a-zA-Z_]+,)*adjtimex(,[a-zA-Z_]+)*\\\\s*(-F\\\\s*key=|-k)\\\\s*[!-~]*\\\\s*\""
      "                    }"
      "                    match_criteria:{"
      "                        filter_regex: \".*settimeofday.*\""
      "                        expected_regex: \"\\\\s*-a\\\\s*always,exit\\\\s*-F\\\\s*arch=b[2346]{2}\\\\s*-S\\\\s*([a-zA-Z_]+,)*settimeofday(,[a-zA-Z_]+)*\\\\s*(-F\\\\s*key=|-k)\\\\s*[!-~]*\\\\s*\""
      "                    }"
      "                    match_criteria:{"
      "                        filter_regex: \".*clock_settime.*\""
      "                        expected_regex: \"\\\\s*-a\\\\s*always,exit\\\\s*-F\\\\s*arch=b[2346]{2}\\\\s*-S\\\\s*([a-zA-Z_]+,)*clock_settime(,[a-zA-Z_]+)*\\\\s*(-F\\\\s*key=|-k)\\\\s*[!-~]*\\\\s*\""
      "                    }"
      "                    match_criteria:{"
      "                        filter_regex: \".*/etc/localtime.*\""
      "                        expected_regex: \"\\\\s*-w\\\\s*/etc/localtime\\\\s*-p\\\\s*wa\\\\s*(-F\\\\s*key=|-k)\\\\s*[!-~]*\\\\s*\""
      "                    }"
      "                }"
      "            }"
      "        }"
      "        check_alternatives:{"
      "            file_checks:{"
      "                files_to_check:{single_file:{path: \"/etc/audit/audit.rules\"}}"
      "                content_entry:{"
      "                    match_type: ALL_MATCH_ANY_ORDER"
      "                    match_criteria:{"
      "                        filter_regex: \".*b32.*adjtimex.*\""
      "                        expected_regex: \"\\\\s*-a\\\\s*always,exit\\\\s*-F\\\\s*arch=b32\\\\s*-S\\\\s*([a-zA-Z_]+,)*adjtimex(,[a-zA-Z_]+)*\\\\s*(-F\\\\s*key=|-k)\\\\s*[!-~]*\\\\s*\""
      "                    }"
      "                    match_criteria:{"
      "                        filter_regex: \".*b32.*settimeofday.*\""
      "                        expected_regex: \"\\\\s*-a\\\\s*always,exit\\\\s*-F\\\\s*arch=b32\\\\s*-S\\\\s*([a-zA-Z_]+,)*settimeofday(,[a-zA-Z_]+)*\\\\s*(-F\\\\s*key=|-k)\\\\s*[!-~]*\\\\s*\""
      "                    }"
      "                    match_criteria:{"
      "                        filter_regex: \".*b32.*clock_settime.*\""
      "                        expected_regex: \"\\\\s*-a\\\\s*always,exit\\\\s*-F\\\\s*arch=b32\\\\s*-S\\\\s*([a-zA-Z_]+,)*clock_settime(,[a-zA-Z_]+)*\\\\s*(-F\\\\s*key=|-k)\\\\s*[!-~]*\\\\s*\""
      "                    }"
      "                    match_criteria:{"
      "                        filter_regex: \".*b32.*stime.*\""
      "                        expected_regex: \"\\\\s*-a\\\\s*always,exit\\\\s*-F\\\\s*arch=b32\\\\s*-S\\\\s*([a-zA-Z_]+,)*stime(,[a-zA-Z_]+)*\\\\s*(-F\\\\s*key=|-k)\\\\s*[!-~]*\\\\s*\""
      "                    }"
      "                    match_criteria:{"
      "                        filter_regex: \".*/etc/localtime.*\""
      "                        expected_regex: \"\\\\s*-w\\\\s*/etc/localtime\\\\s*-p\\\\s*wa\\\\s*(-F\\\\s*key=|-k)\\\\s*[!-~]*\\\\s*\""
      "                    }"
      "                }"
      "            }"
      "        }"
      "    }"
      "    image_scanning:{"
      "        check_alternatives:{"
      "            file_checks:{"
      "                files_to_check:{files_in_dir:{"
      "                    dir_path:\"/etc/audit/rules.d\""
      "                    recursive: true"
      "                    files_only: true"
      "                    filename_regex: \".*\\\\.rules\""
      "                }}"
      "                content_entry:{"
      "                    match_type: ALL_MATCH_ANY_ORDER"
      "                    match_criteria:{"
      "                        filter_regex: \".*adjtimex.*\""
      "                        expected_regex: \"\\\\s*-a\\\\s*always,exit\\\\s*-F\\\\s*arch=b[2346]{2}\\\\s*-S\\\\s*([a-zA-Z_]+,)*adjtimex(,[a-zA-Z_]+)*\\\\s*(-F\\\\s*key=|-k)\\\\s*[!-~]*\\\\s*\""
      "                    }"
      "                    match_criteria:{"
      "                        filter_regex: \".*settimeofday.*\""
      "                        expected_regex: \"\\\\s*-a\\\\s*always,exit\\\\s*-F\\\\s*arch=b[2346]{2}\\\\s*-S\\\\s*([a-zA-Z_]+,)*settimeofday(,[a-zA-Z_]+)*\\\\s*(-F\\\\s*key=|-k)\\\\s*[!-~]*\\\\s*\""
      "                    }"
      "                    match_criteria:{"
      "                        filter_regex: \".*clock_settime.*\""
      "                        expected_regex: \"\\\\s*-a\\\\s*always,exit\\\\s*-F\\\\s*arch=b[2346]{2}\\\\s*-S\\\\s*([a-zA-Z_]+,)*clock_settime(,[a-zA-Z_]+)*\\\\s*(-F\\\\s*key=|-k)\\\\s*[!-~]*\\\\s*\""
      "                    }"
      "                    match_criteria:{"
      "                        filter_regex: \".*/etc/localtime.*\""
      "                        expected_regex: \"\\\\s*-w\\\\s*/etc/localtime\\\\s*-p\\\\s*wa\\\\s*(-F\\\\s*key=|-k)\\\\s*[!-~]*\\\\s*\""
      "                    }"
      "                }"
      "            }"
      "        }"
      "        check_alternatives:{"
      "            file_checks:{"
      "                files_to_check:{files_in_dir:{"
      "                    dir_path:\"/etc/audit/rules.d\""
      "                    recursive: true"
      "                    files_only: true"
      "                    filename_regex: \".*\\\\.rules\""
      "                }}"
      "                content_entry:{"
      "                    match_type: ALL_MATCH_ANY_ORDER"
      "                    match_criteria:{"
      "                        filter_regex: \".*b32.*adjtimex.*\""
      "                        expected_regex: \"\\\\s*-a\\\\s*always,exit\\\\s*-F\\\\s*arch=b32\\\\s*-S\\\\s*([a-zA-Z_]+,)*adjtimex(,[a-zA-Z_]+)*\\\\s*(-F\\\\s*key=|-k)\\\\s*[!-~]*\\\\s*\""
      "                    }"
      "                    match_criteria:{"
      "                        filter_regex: \".*b32.*settimeofday.*\""
      "                        expected_regex: \"\\\\s*-a\\\\s*always,exit\\\\s*-F\\\\s*arch=b32\\\\s*-S\\\\s*([a-zA-Z_]+,)*settimeofday(,[a-zA-Z_]+)*\\\\s*(-F\\\\s*key=|-k)\\\\s*[!-~]*\\\\s*\""
      "                    }"
      "                    match_criteria:{"
      "                        filter_regex: \".*b32.*clock_settime.*\""
      "                        expected_regex: \"\\\\s*-a\\\\s*always,exit\\\\s*-F\\\\s*arch=b32\\\\s*-S\\\\s*([a-zA-Z_]+,)*clock_settime(,[a-zA-Z_]+)*\\\\s*(-F\\\\s*key=|-k)\\\\s*[!-~]*\\\\s*\""
      "                    }"
      "                    match_criteria:{"
      "                        filter_regex: \".*b32.*stime.*\""
      "                        expected_regex: \"\\\\s*-a\\\\s*always,exit\\\\s*-F\\\\s*arch=b32\\\\s*-S\\\\s*([a-zA-Z_]+,)*stime(,[a-zA-Z_]+)*\\\\s*(-F\\\\s*key=|-k)\\\\s*[!-~]*\\\\s*\""
      "                    }"
      "                    match_criteria:{"
      "                        filter_regex: \".*/etc/localtime.*\""
      "                        expected_regex: \"\\\\s*-w\\\\s*/etc/localtime\\\\s*-p\\\\s*wa\\\\s*(-F\\\\s*key=|-k)\\\\s*[!-~]*\\\\s*\""
      "                    }"
      "                }"
      "            }"
      "        }"
      "    }"
      "}"
  }
}
benchmark_configs: {
  id: "events-modifying-system-net-env-collected"
  compliance_note: {
    version: { cpe_uri: "cpe:/o:rockylinux:rockylinux:8.5" version: "2.0.0" benchmark_document: "CIS Rocky Linux 8" }
    title: "Ensure events that modify the system's network environment are collected"
    description:
      "Record changes to network environment files or system calls. The below parameters "
      "monitors the following system calls, and write an audit event on system call exit:\n"
      "sethostname - set the systems host name\n"
      "setdomainname - set the systems domain name\n"
      "The files being monitored are:\n"
      "/etc/issue and /etc/issue.net - messages displayed pre-login\n"
      "/etc/hosts - file containing host names and associated IP addresses\n"
      "/etc/sysconfig/network - additional information that is valid to all network "
      "interfaces\n"
      "/etc/sysconfig/network-scripts/ - directory containing network interface scripts "
      "and configurations files\n"
    rationale:
      "Monitoring sethostname and setdomainname will identify potential unauthorized changes "
      "to host and domainname of a system. The changing of these names could potentially break "
      "security parameters that are set based on those names. The /etc/hosts file is monitored "
      "for changes that can indicate an unauthorized intruder is trying to change machine "
      "associations with IP addresses and trick users and processes into connecting to unintended "
      "machines. Monitoring /etc/issue and /etc/issue.net is important, as intruders could put "
      "disinformation into those files and trick users into providing information to the intruder. "
      "Monitoring /etc/sysconfig/network is important as it can show if network interfaces or "
      "scripts are being modified in a way that can lead to the machine becoming unavailable or "
      "compromised. All audit records should have a relevant tag associated with them."
    remediation:
      "Create audit rules\n"
      "Edit or create a file in the /etc/audit/rules.d/ directory, ending in .rules extension, with "
      "the relevant rules to monitor events that modify the system's network environment.\n"
      "64 Bit systems\n"
      "Example:\n"
      "\n```\n"
      "# printf \"\n"
      "-a always,exit -F arch=b64 -S sethostname,setdomainname -k system-locale\n"
      "-a always,exit -F arch=b32 -S sethostname,setdomainname -k system-locale\n"
      "-w /etc/issue -p wa -k system-locale\n"
      "-w /etc/issue.net -p wa -k system-locale\n"
      "-w /etc/hosts -p wa -k system-locale\n"
      "-w /etc/sysconfig/network -p wa -k system-locale\n"
      "-w /etc/sysconfig/network-scripts/ -p wa -k system-locale\n"
      "\" >> /etc/audit/rules.d/50-system_local.rules\n"
      "```\n\n"
      "Load audit rules\n"
      "Merge and load the rules into active configuration:\n"
      "\n```\n"
      "# augenrules --load\n"
      "```\n\n"
      "Check if reboot is required.\n"
      "\n```\n"
      "# if [[ $(auditctl -s | grep \"enabled\") =~ \"2\" ]]; then printf \"Reboot "
      "required to load rules\\\\n\"; fi\n"
      "```\n\n"
      "32 Bit systems\n"
      "Follow the same procedures as for 64 bit systems and ignore any entries with b64."
    cis_benchmark: {
      profile_level: 2
      severity: LOW
    }
    scan_instructions:
      "scan_type_specific:{"
      "    instance_scanning:{"
      "        check_alternatives:{"
      "            file_checks:{"
      "                files_to_check:{single_file:{path: \"/etc/audit/audit.rules\"}}"
      "                content_entry:{"
      "                    match_type: ALL_MATCH_ANY_ORDER"
      "                    match_criteria:{"
      "                        filter_regex: \".*sethostname.*\""
      "                        expected_regex: \"\\\\s*-a\\\\s*always,exit\\\\s*-F\\\\s*arch=b[2346]{2}\\\\s*-S\\\\s*([a-zA-Z_]+,)*sethostname(,[a-zA-Z_]+)*\\\\s*(-F\\\\s*key=|-k)\\\\s*[!-~]*\\\\s*\""
      "                    }"
      "                    match_criteria:{"
      "                        filter_regex: \".*setdomainname.*\""
      "                        expected_regex: \"\\\\s*-a\\\\s*always,exit\\\\s*-F\\\\s*arch=b[2346]{2}\\\\s*-S\\\\s*([a-zA-Z_]+,)*setdomainname(,[a-zA-Z_]+)*\\\\s*(-F\\\\s*key=|-k)\\\\s*[!-~]*\\\\s*\""
      "                    }"
      "                    match_criteria:{"
      "                        filter_regex: \".*/etc/issue[^\\\\.].*\""
      "                        expected_regex: \"\\\\s*-w\\\\s*/etc/issue\\\\s*-p\\\\s*wa\\\\s*(-F\\\\s*key=|-k)\\\\s*[!-~]*\\\\s*\""
      "                    }"
      "                    match_criteria:{"
      "                        filter_regex: \".*/etc/issue\\\\.net.*\""
      "                        expected_regex: \"\\\\s*-w\\\\s*/etc/issue\\\\.net\\\\s*-p\\\\s*wa\\\\s*(-F\\\\s*key=|-k)\\\\s*[!-~]*\\\\s*\""
      "                    }"
      "                    match_criteria:{"
      "                        filter_regex: \".*/etc/hosts.*\""
      "                        expected_regex: \"\\\\s*-w\\\\s*/etc/hosts\\\\s*-p\\\\s*wa\\\\s*(-F\\\\s*key=|-k)\\\\s*[!-~]*\\\\s*\""
      "                    }"
      "                    match_criteria:{"
      "                        filter_regex: \".*/etc/sysconfig/network\\\\s.*\""
      "                        expected_regex: \"\\\\s*-w\\\\s*/etc/sysconfig/network\\\\s+-p\\\\s*wa\\\\s*(-F\\\\s*key=|-k)\\\\s*[!-~]*\\\\s*\""
      "                    }"
      "                    match_criteria:{"
      "                        filter_regex: \".*/etc/sysconfig/network-scripts.*\""
      "                        expected_regex: \"\\\\s*-w\\\\s*/etc/sysconfig/network-scripts/\\\\s*-p\\\\s*wa\\\\s*(-F\\\\s*key=|-k)\\\\s*[!-~]*\\\\s*\""
      "                    }"
      "                }"
      "            }"
      "        }"
      "    }"
      "    image_scanning:{"
      "        check_alternatives:{"
      "            file_checks:{"
      "                files_to_check:{files_in_dir:{"
      "                    dir_path:\"/etc/audit/rules.d\""
      "                    recursive: true"
      "                    files_only: true"
      "                    filename_regex: \".*\\\\.rules\""
      "                }}"
      "                content_entry:{"
      "                    match_type: ALL_MATCH_ANY_ORDER"
      "                    match_criteria:{"
      "                        filter_regex: \".*sethostname.*\""
      "                        expected_regex: \"\\\\s*-a\\\\s*always,exit\\\\s*-F\\\\s*arch=b[2346]{2}\\\\s*-S\\\\s*([a-zA-Z_]+,)*sethostname(,[a-zA-Z_]+)*\\\\s*(-F\\\\s*key=|-k)\\\\s*[!-~]*\\\\s*\""
      "                    }"
      "                    match_criteria:{"
      "                        filter_regex: \".*setdomainname.*\""
      "                        expected_regex: \"\\\\s*-a\\\\s*always,exit\\\\s*-F\\\\s*arch=b[2346]{2}\\\\s*-S\\\\s*([a-zA-Z_]+,)*setdomainname(,[a-zA-Z_]+)*\\\\s*(-F\\\\s*key=|-k)\\\\s*[!-~]*\\\\s*\""
      "                    }"
      "                    match_criteria:{"
      "                        filter_regex: \".*/etc/issue[^\\\\.].*\""
      "                        expected_regex: \"\\\\s*-w\\\\s*/etc/issue\\\\s*-p\\\\s*wa\\\\s*(-F\\\\s*key=|-k)\\\\s*[!-~]*\\\\s*\""
      "                    }"
      "                    match_criteria:{"
      "                        filter_regex: \".*/etc/issue\\\\.net.*\""
      "                        expected_regex: \"\\\\s*-w\\\\s*/etc/issue\\\\.net\\\\s*-p\\\\s*wa\\\\s*(-F\\\\s*key=|-k)\\\\s*[!-~]*\\\\s*\""
      "                    }"
      "                    match_criteria:{"
      "                        filter_regex: \".*/etc/hosts.*\""
      "                        expected_regex: \"\\\\s*-w\\\\s*/etc/hosts\\\\s*-p\\\\s*wa\\\\s*(-F\\\\s*key=|-k)\\\\s*[!-~]*\\\\s*\""
      "                    }"
      "                    match_criteria:{"
      "                        filter_regex: \".*/etc/sysconfig/network\\\\s.*\""
      "                        expected_regex: \"\\\\s*-w\\\\s*/etc/sysconfig/network\\\\s+-p\\\\s*wa\\\\s*(-F\\\\s*key=|-k)\\\\s*[!-~]*\\\\s*\""
      "                    }"
      "                    match_criteria:{"
      "                        filter_regex: \".*/etc/sysconfig/network-scripts.*\""
      "                        expected_regex: \"\\\\s*-w\\\\s*/etc/sysconfig/network-scripts/\\\\s*-p\\\\s*wa\\\\s*(-F\\\\s*key=|-k)\\\\s*[!-~]*\\\\s*\""
      "                    }"
      "                }"
      "            }"
      "        }"
      "    }"
      "}"
  }
}
benchmark_configs: {
  id: "unsuccessful-file-access-attempts-collected"
  compliance_note: {
    version: { cpe_uri: "cpe:/o:rockylinux:rockylinux:8.5" version: "2.0.0" benchmark_document: "CIS Rocky Linux 8" }
    title: "Ensure unsuccessful file access attempts are collected"
    description:
      "Monitor for unsuccessful attempts to access files. The following parameters are associated "
      "with system calls that control files:\n"
      "creation - creat\n"
      "opening - open , openat\n"
      "truncation - truncate , ftruncate\n"
      "An audit log record will only be written if all of the following criteria is met for the user "
      "when trying to access a file:\n"
      "a non-privileged user (auid>=UID_MIN)\n"
      "is not a Daemon event (auid=4294967295/unset/-1)\n"
      "if the system call returned EACCES (permission denied) or EPERM (some other "
      "permanent error associated with the specific system call)"
    rationale:
      "Failed attempts to open, create or truncate files could be an indication that an individual or "
      "process is trying to gain unauthorized access to the system."
    remediation:
      "Create audit rules\n"
      "Edit or create a file in the /etc/audit/rules.d/ directory, ending in .rules extension, with "
      "the relevant rules to monitor unsuccessful file access attempts.\n"
      "64 Bit systems\n"
      "Example:\n"
      "\n```\n"
      "# {\n"
      "UID_MIN=$(awk '/^\\\\s*UID_MIN/{print $2}' /etc/login.defs)\n"
      "[ -n \"${UID_MIN}\" ] && printf \"\n"
      "-a always,exit -F arch=b64 -S creat,open,openat,truncate,ftruncate -F exit=-"
      "EACCES -F auid>=${UID_MIN} -F auid!=unset -k access\n"
      "-a always,exit -F arch=b64 -S creat,open,openat,truncate,ftruncate -F exit=-"
      "EPERM -F auid>=${UID_MIN} -F auid!=unset -k access\n"
      "-a always,exit -F arch=b32 -S creat,open,openat,truncate,ftruncate -F exit=-"
      "EACCES -F auid>=${UID_MIN} -F auid!=unset -k access\n"
      "-a always,exit -F arch=b32 -S creat,open,openat,truncate,ftruncate -F exit=-"
      "EPERM -F auid>=${UID_MIN} -F auid!=unset -k access\n"
      "\" >> /etc/audit/rules.d/50-access.rules \\\n"
      "|| printf \"ERROR: Variable 'UID_MIN' is unset.\\\\n\"\n"
      "}\n"
      "```\n\n"
      "Load audit rules\n"
      "Merge and load the rules into active configuration:\n"
      "\n```\n"
      "# augenrules --load\n"
      "```\n\n"
      "Check if reboot is required.\n"
      "\n```\n"
      "# if [[ $(auditctl -s | grep \"enabled\") =~ \"2\" ]]; then printf \"Reboot "
      "required to load rules\n\"; fi\n"
      "```\n\n"
      "32 Bit systems\n"
      "Follow the same procedures as for 64 bit systems and ignore any entries with b64."
    cis_benchmark: {
      profile_level: 2
      severity: LOW
    }
    scan_instructions:
      "scan_type_specific:{"
      "    instance_scanning:{"
      "        check_alternatives:{"
      "            file_checks:{"
      "                files_to_check:{single_file:{path:\"/etc/login.defs\"}}"
      "                content_entry:{"
      "                    match_type: ALL_MATCH_ANY_ORDER"
      "                    match_criteria:{"
      "                        filter_regex: \"UID_MIN.*\""
      "                        expected_regex: \"UID_MIN\\\\s*1000\\\\s*\""
      "                    }"
      "                }"
      "                non_compliance_msg: \"If UID_MIN is set to a value different from 1000 in /etc/login.defs, this check will fail.\""
      "                file_display_command: \"grep '^UID_MIN' /etc/login.defs\""
      "            }"
      "            file_checks:{"
      "                files_to_check:{single_file:{path: \"/etc/audit/audit.rules\"}}"
      "                content_entry:{"
      "                    match_type: ALL_MATCH_ANY_ORDER"
      "                    match_criteria:{"
      "                        filter_regex: \".*b32.*creat.*\""
      "                        expected_regex: \"\\\\s*-a\\\\s*always,exit\\\\s*-F\\\\s*arch=b32\\\\s*-S\\\\s*([a-zA-Z_]+,)*creat(,[a-zA-Z_]+)*\\\\s*-F\\\\s*exit=-(EACCES|EPERM)\\\\s*-F\\\\s*auid>=1000\\\\s*-F\\\\s*auid!=(unset|-1|4294967295)\\\\s*(-F\\\\s*key=|-k)\\\\s*[!-~]*\\\\s*\""
      "                    }"
      "                    match_criteria:{"
      "                        filter_regex: \".*b32.*open.*\""
      "                        expected_regex: \"\\\\s*-a\\\\s*always,exit\\\\s*-F\\\\s*arch=b32\\\\s*-S\\\\s*([a-zA-Z_]+,)*open(,[a-zA-Z_]+)*\\\\s*-F\\\\s*exit=-(EACCES|EPERM)\\\\s*-F\\\\s*auid>=1000\\\\s*-F\\\\s*auid!=(unset|-1|4294967295)\\\\s*(-F\\\\s*key=|-k)\\\\s*[!-~]*\\\\s*\""
      "                    }"
      "                    match_criteria:{"
      "                        filter_regex: \".*b32.*openat.*\""
      "                        expected_regex: \"\\\\s*-a\\\\s*always,exit\\\\s*-F\\\\s*arch=b32\\\\s*-S\\\\s*([a-zA-Z_]+,)*openat(,[a-zA-Z_]+)*\\\\s*-F\\\\s*exit=-(EACCES|EPERM)\\\\s*-F\\\\s*auid>=1000\\\\s*-F\\\\s*auid!=(unset|-1|4294967295)\\\\s*(-F\\\\s*key=|-k)\\\\s*[!-~]*\\\\s*\""
      "                    }"
      "                    match_criteria:{"
      "                        filter_regex: \".*b32.*truncate.*\""
      "                        expected_regex: \"\\\\s*-a\\\\s*always,exit\\\\s*-F\\\\s*arch=b32\\\\s*-S\\\\s*([a-zA-Z_]+,)*truncate(,[a-zA-Z_]+)*\\\\s*-F\\\\s*exit=-(EACCES|EPERM)\\\\s*-F\\\\s*auid>=1000\\\\s*-F\\\\s*auid!=(unset|-1|4294967295)\\\\s*(-F\\\\s*key=|-k)\\\\s*[!-~]*\\\\s*\""
      "                    }"
      "                    match_criteria:{"
      "                        filter_regex: \".*b32.*ftruncate.*\""
      "                        expected_regex: \"\\\\s*-a\\\\s*always,exit\\\\s*-F\\\\s*arch=b32\\\\s*-S\\\\s*([a-zA-Z_]+,)*ftruncate(,[a-zA-Z_]+)*\\\\s*-F\\\\s*exit=-(EACCES|EPERM)\\\\s*-F\\\\s*auid>=1000\\\\s*-F\\\\s*auid!=(unset|-1|4294967295)\\\\s*(-F\\\\s*key=|-k)\\\\s*[!-~]*\\\\s*\""
      "                    }"
      "                }"
      "            }"
      "        }"
      "        check_alternatives:{"
      "            file_checks:{"
      "                files_to_check:{single_file:{path:\"/etc/login.defs\"}}"
      "                content_entry:{"
      "                    match_type: ALL_MATCH_ANY_ORDER"
      "                    match_criteria:{"
      "                        filter_regex: \"UID_MIN.*\""
      "                        expected_regex: \"UID_MIN\\\\s*1000\\\\s*\""
      "                    }"
      "                }"
      "                non_compliance_msg: \"If UID_MIN is set to a value different from 1000 in /etc/login.defs, this check will fail.\""
      "                file_display_command: \"grep '^UID_MIN' /etc/login.defs\""
      "            }"
      "            file_checks:{"
      "                files_to_check:{single_file:{path:\"/proc/cpuinfo\"}}"
      "                content_entry:{"
      "                    match_type: ALL_MATCH_ANY_ORDER"
      "                    match_criteria:{"
      "                        filter_regex: \"flags\\\\s*:.*\""
      "                        expected_regex: \".*\\\\slm\\\\s.*\""
      "                    }"
      "                }"
      "            }"
      "            file_checks:{"
      "                files_to_check:{single_file:{path: \"/etc/audit/audit.rules\"}}"
      "                content_entry:{"
      "                    match_type: ALL_MATCH_ANY_ORDER"
      "                    match_criteria:{"
      "                        filter_regex: \".*b32.*creat.*\""
      "                        expected_regex: \"\\\\s*-a\\\\s*always,exit\\\\s*-F\\\\s*arch=b32\\\\s*-S\\\\s*([a-zA-Z_]+,)*creat(,[a-zA-Z_]+)*\\\\s*-F\\\\s*exit=-(EACCES|EPERM)\\\\s*-F\\\\s*auid>=1000\\\\s*-F\\\\s*auid!=(unset|-1|4294967295)\\\\s*(-F\\\\s*key=|-k)\\\\s*[!-~]*\\\\s*\""
      "                    }"
      "                    match_criteria:{"
      "                        filter_regex: \".*b32.*open.*\""
      "                        expected_regex: \"\\\\s*-a\\\\s*always,exit\\\\s*-F\\\\s*arch=b32\\\\s*-S\\\\s*([a-zA-Z_]+,)*open(,[a-zA-Z_]+)*\\\\s*-F\\\\s*exit=-(EACCES|EPERM)\\\\s*-F\\\\s*auid>=1000\\\\s*-F\\\\s*auid!=(unset|-1|4294967295)\\\\s*(-F\\\\s*key=|-k)\\\\s*[!-~]*\\\\s*\""
      "                    }"
      "                    match_criteria:{"
      "                        filter_regex: \".*b32.*openat.*\""
      "                        expected_regex: \"\\\\s*-a\\\\s*always,exit\\\\s*-F\\\\s*arch=b32\\\\s*-S\\\\s*([a-zA-Z_]+,)*openat(,[a-zA-Z_]+)*\\\\s*-F\\\\s*exit=-(EACCES|EPERM)\\\\s*-F\\\\s*auid>=1000\\\\s*-F\\\\s*auid!=(unset|-1|4294967295)\\\\s*(-F\\\\s*key=|-k)\\\\s*[!-~]*\\\\s*\""
      "                    }"
      "                    match_criteria:{"
      "                        filter_regex: \".*b32.*truncate.*\""
      "                        expected_regex: \"\\\\s*-a\\\\s*always,exit\\\\s*-F\\\\s*arch=b32\\\\s*-S\\\\s*([a-zA-Z_]+,)*truncate(,[a-zA-Z_]+)*\\\\s*-F\\\\s*exit=-(EACCES|EPERM)\\\\s*-F\\\\s*auid>=1000\\\\s*-F\\\\s*auid!=(unset|-1|4294967295)\\\\s*(-F\\\\s*key=|-k)\\\\s*[!-~]*\\\\s*\""
      "                    }"
      "                    match_criteria:{"
      "                        filter_regex: \".*b32.*ftruncate.*\""
      "                        expected_regex: \"\\\\s*-a\\\\s*always,exit\\\\s*-F\\\\s*arch=b32\\\\s*-S\\\\s*([a-zA-Z_]+,)*ftruncate(,[a-zA-Z_]+)*\\\\s*-F\\\\s*exit=-(EACCES|EPERM)\\\\s*-F\\\\s*auid>=1000\\\\s*-F\\\\s*auid!=(unset|-1|4294967295)\\\\s*(-F\\\\s*key=|-k)\\\\s*[!-~]*\\\\s*\""
      "                    }"
      "                    match_criteria:{"
      "                        filter_regex: \".*b64.*creat.*\""
      "                        expected_regex: \"\\\\s*-a\\\\s*always,exit\\\\s*-F\\\\s*arch=b64\\\\s*-S\\\\s*([a-zA-Z_]+,)*creat(,[a-zA-Z_]+)*\\\\s*-F\\\\s*exit=-(EACCES|EPERM)\\\\s*-F\\\\s*auid>=1000\\\\s*-F\\\\s*auid!=(unset|-1|4294967295)\\\\s*(-F\\\\s*key=|-k)\\\\s*[!-~]*\\\\s*\""
      "                    }"
      "                    match_criteria:{"
      "                        filter_regex: \".*b64.*open.*\""
      "                        expected_regex: \"\\\\s*-a\\\\s*always,exit\\\\s*-F\\\\s*arch=b64\\\\s*-S\\\\s*([a-zA-Z_]+,)*open(,[a-zA-Z_]+)*\\\\s*-F\\\\s*exit=-(EACCES|EPERM)\\\\s*-F\\\\s*auid>=1000\\\\s*-F\\\\s*auid!=(unset|-1|4294967295)\\\\s*(-F\\\\s*key=|-k)\\\\s*[!-~]*\\\\s*\""
      "                    }"
      "                    match_criteria:{"
      "                        filter_regex: \".*b64.*openat.*\""
      "                        expected_regex: \"\\\\s*-a\\\\s*always,exit\\\\s*-F\\\\s*arch=b64\\\\s*-S\\\\s*([a-zA-Z_]+,)*openat(,[a-zA-Z_]+)*\\\\s*-F\\\\s*exit=-(EACCES|EPERM)\\\\s*-F\\\\s*auid>=1000\\\\s*-F\\\\s*auid!=(unset|-1|4294967295)\\\\s*(-F\\\\s*key=|-k)\\\\s*[!-~]*\\\\s*\""
      "                    }"
      "                    match_criteria:{"
      "                        filter_regex: \".*b64.*truncate.*\""
      "                        expected_regex: \"\\\\s*-a\\\\s*always,exit\\\\s*-F\\\\s*arch=b64\\\\s*-S\\\\s*([a-zA-Z_]+,)*truncate(,[a-zA-Z_]+)*\\\\s*-F\\\\s*exit=-(EACCES|EPERM)\\\\s*-F\\\\s*auid>=1000\\\\s*-F\\\\s*auid!=(unset|-1|4294967295)\\\\s*(-F\\\\s*key=|-k)\\\\s*[!-~]*\\\\s*\""
      "                    }"
      "                    match_criteria:{"
      "                        filter_regex: \".*b64.*ftruncate.*\""
      "                        expected_regex: \"\\\\s*-a\\\\s*always,exit\\\\s*-F\\\\s*arch=b64\\\\s*-S\\\\s*([a-zA-Z_]+,)*ftruncate(,[a-zA-Z_]+)*\\\\s*-F\\\\s*exit=-(EACCES|EPERM)\\\\s*-F\\\\s*auid>=1000\\\\s*-F\\\\s*auid!=(unset|-1|4294967295)\\\\s*(-F\\\\s*key=|-k)\\\\s*[!-~]*\\\\s*\""
      "                    }"
      "                }"
      "            }"
      "        }"
      "    }"
      "    image_scanning:{"
      "        check_alternatives:{"
      "            file_checks:{"
      "                files_to_check:{single_file:{path:\"/etc/login.defs\"}}"
      "                content_entry:{"
      "                    match_type: ALL_MATCH_ANY_ORDER"
      "                    match_criteria:{"
      "                        filter_regex: \"UID_MIN.*\""
      "                        expected_regex: \"UID_MIN\\\\s*1000\\\\s*\""
      "                    }"
      "                }"
      "                non_compliance_msg: \"If UID_MIN is set to a value different from 1000 in /etc/login.defs, this check will fail.\""
      "                file_display_command: \"grep '^UID_MIN' /etc/login.defs\""
      "            }"
      "            file_checks:{"
      "                files_to_check:{files_in_dir:{"
      "                    dir_path:\"/etc/audit/rules.d\""
      "                    recursive: true"
      "                    files_only: true"
      "                    filename_regex: \".*\\\\.rules\""
      "                }}"
      "                content_entry:{"
      "                    match_type: ALL_MATCH_ANY_ORDER"
      "                    match_criteria:{"
      "                        filter_regex: \".*creat.*\""
      "                        expected_regex: \"\\\\s*-a\\\\s*always,exit\\\\s*-F\\\\s*arch=b[2346]{2}\\\\s*-S\\\\s*([a-zA-Z_]+,)*creat(,[a-zA-Z_]+)*\\\\s*-F\\\\s*exit=-(EACCES|EPERM)\\\\s*-F\\\\s*auid>=1000\\\\s*-F\\\\s*auid!=(unset|-1|4294967295)\\\\s*(-F\\\\s*key=|-k)\\\\s*[!-~]*\\\\s*\""
      "                    }"
      "                    match_criteria:{"
      "                        filter_regex: \".*open.*\""
      "                        expected_regex: \"\\\\s*-a\\\\s*always,exit\\\\s*-F\\\\s*arch=b[2346]{2}\\\\s*-S\\\\s*([a-zA-Z_]+,)*open(,[a-zA-Z_]+)*\\\\s*-F\\\\s*exit=-(EACCES|EPERM)\\\\s*-F\\\\s*auid>=1000\\\\s*-F\\\\s*auid!=(unset|-1|4294967295)\\\\s*(-F\\\\s*key=|-k)\\\\s*[!-~]*\\\\s*\""
      "                    }"
      "                    match_criteria:{"
      "                        filter_regex: \".*openat.*\""
      "                        expected_regex: \"\\\\s*-a\\\\s*always,exit\\\\s*-F\\\\s*arch=b[2346]{2}\\\\s*-S\\\\s*([a-zA-Z_]+,)*openat(,[a-zA-Z_]+)*\\\\s*-F\\\\s*exit=-(EACCES|EPERM)\\\\s*-F\\\\s*auid>=1000\\\\s*-F\\\\s*auid!=(unset|-1|4294967295)\\\\s*(-F\\\\s*key=|-k)\\\\s*[!-~]*\\\\s*\""
      "                    }"
      "                    match_criteria:{"
      "                        filter_regex: \".*truncate.*\""
      "                        expected_regex: \"\\\\s*-a\\\\s*always,exit\\\\s*-F\\\\s*arch=b[2346]{2}\\\\s*-S\\\\s*([a-zA-Z_]+,)*truncate(,[a-zA-Z_]+)*\\\\s*-F\\\\s*exit=-(EACCES|EPERM)\\\\s*-F\\\\s*auid>=1000\\\\s*-F\\\\s*auid!=(unset|-1|4294967295)\\\\s*(-F\\\\s*key=|-k)\\\\s*[!-~]*\\\\s*\""
      "                    }"
      "                    match_criteria:{"
      "                        filter_regex: \".*ftruncate.*\""
      "                        expected_regex: \"\\\\s*-a\\\\s*always,exit\\\\s*-F\\\\s*arch=b[2346]{2}\\\\s*-S\\\\s*([a-zA-Z_]+,)*ftruncate(,[a-zA-Z_]+)*\\\\s*-F\\\\s*exit=-(EACCES|EPERM)\\\\s*-F\\\\s*auid>=1000\\\\s*-F\\\\s*auid!=(unset|-1|4294967295)\\\\s*(-F\\\\s*key=|-k)\\\\s*[!-~]*\\\\s*\""
      "                    }"
      "                }"
      "            }"
      "        }"
      "    }"
      "}"
  }
}
benchmark_configs: {
  id: "events-modifying-user-group-info-collected"
  compliance_note: {
    version: { cpe_uri: "cpe:/o:rockylinux:rockylinux:8.5" version: "2.0.0" benchmark_document: "CIS Rocky Linux 8" }
    title: "Ensure events that modify user/group information are collected"
    description:
      "Record events affecting the modification of user or group information, including that of "
      "passwords and old passwords if in use.\n"
      "/etc/group - system groups\n"
      "/etc/passwd - system users\n"
      "/etc/gshadow - encrypted password for each group\n"
      "/etc/shadow - system user passwords\n"
      "/etc/security/opasswd - storage of old passwords if the relevant PAM module is in "
      "use\n"
      "The parameters in this section will watch the files to see if they have been opened for write "
      "or have had attribute changes (e.g. permissions) and tag them with the identifier \"identity\" "
      "in the audit log file."
    rationale:
      "Unexpected changes to these files could be an indication that the system has been "
      "compromised and that an unauthorized user is attempting to hide their activities or "
      "compromise additional accounts."
    remediation:
      "Create audit rules\n"
      "Edit or create a file in the /etc/audit/rules.d/ directory, ending in .rules extension, with "
      "the relevant rules to monitor events that modify user/group information.\n"
      "Example:\n"
      "\n```\n"
      "# printf \"\n"
      "-w /etc/group -p wa -k identity\n"
      "-w /etc/passwd -p wa -k identity\n"
      "-w /etc/gshadow -p wa -k identity\n"
      "-w /etc/shadow -p wa -k identity\n"
      "-w /etc/security/opasswd -p wa -k identity\n"
      "\" >> /etc/audit/rules.d/50-identity.rules\n"
      "```\n\n"
      "Merge and load the rules into active configuration:\n"
      "\n```\n"
      "# augenrules --load\n"
      "```\n\n"
      "Check if reboot is required.\n"
      "\n```\n"
      "# if [[ $(auditctl -s | grep \"enabled\") =~ \"2\" ]]; then printf \"Reboot "
      "required to load rules\\\\n\"; fi\n"
      "```\n\n"
    cis_benchmark: {
      profile_level: 2
      severity: LOW
    }
    scan_instructions:
      "scan_type_specific:{"
      "    instance_scanning:{"
      "        check_alternatives:{"
      "            file_checks:{"
      "                files_to_check:{single_file:{path: \"/etc/audit/audit.rules\"}}"
      "                content_entry:{"
      "                    match_type: ALL_MATCH_ANY_ORDER"
      "                    match_criteria:{"
      "                        filter_regex: \".*/etc/group.*\""
      "                        expected_regex: \"\\\\s*-w\\\\s*/etc/group\\\\s*-p\\\\s*wa\\\\s*(-F\\\\s*key=|-k)\\\\s*[!-~]*\\\\s*\""
      "                    }"
      "                    match_criteria:{"
      "                        filter_regex: \".*/etc/passwd.*\""
      "                        expected_regex: \"\\\\s*-w\\\\s*/etc/passwd\\\\s*-p\\\\s*wa\\\\s*(-F\\\\s*key=|-k)\\\\s*[!-~]*\\\\s*\""
      "                    }"
      "                    match_criteria:{"
      "                        filter_regex: \".*/etc/gshadow.*\""
      "                        expected_regex: \"\\\\s*-w\\\\s*/etc/gshadow\\\\s*-p\\\\s*wa\\\\s*(-F\\\\s*key=|-k)\\\\s*[!-~]*\\\\s*\""
      "                    }"
      "                    match_criteria:{"
      "                        filter_regex: \".*/etc/shadow.*\""
      "                        expected_regex: \"\\\\s*-w\\\\s*/etc/shadow\\\\s*-p\\\\s*wa\\\\s*(-F\\\\s*key=|-k)\\\\s*[!-~]*\\\\s*\""
      "                    }"
      "                    match_criteria:{"
      "                        filter_regex: \".*/etc/security/opasswd.*\""
      "                        expected_regex: \"\\\\s*-w\\\\s*/etc/security/opasswd\\\\s*-p\\\\s*wa\\\\s*(-F\\\\s*key=|-k)\\\\s*[!-~]*\\\\s*\""
      "                    }"
      "                }"
      "            }"
      "        }"
      "    }"
      "    image_scanning:{"
      "        check_alternatives:{"
      "            file_checks:{"
      "                files_to_check:{files_in_dir:{"
      "                    dir_path:\"/etc/audit/rules.d\""
      "                    recursive: true"
      "                    files_only: true"
      "                    filename_regex: \".*\\\\.rules\""
      "                }}"
      "                content_entry:{"
      "                    match_type: ALL_MATCH_ANY_ORDER"
      "                    match_criteria:{"
      "                        filter_regex: \".*/etc/group.*\""
      "                        expected_regex: \"\\\\s*-w\\\\s*/etc/group\\\\s*-p\\\\s*wa\\\\s*(-F\\\\s*key=|-k)\\\\s*[!-~]*\\\\s*\""
      "                    }"
      "                    match_criteria:{"
      "                        filter_regex: \".*/etc/passwd.*\""
      "                        expected_regex: \"\\\\s*-w\\\\s*/etc/passwd\\\\s*-p\\\\s*wa\\\\s*(-F\\\\s*key=|-k)\\\\s*[!-~]*\\\\s*\""
      "                    }"
      "                    match_criteria:{"
      "                        filter_regex: \".*/etc/gshadow.*\""
      "                        expected_regex: \"\\\\s*-w\\\\s*/etc/gshadow\\\\s*-p\\\\s*wa\\\\s*(-F\\\\s*key=|-k)\\\\s*[!-~]*\\\\s*\""
      "                    }"
      "                    match_criteria:{"
      "                        filter_regex: \".*/etc/shadow.*\""
      "                        expected_regex: \"\\\\s*-w\\\\s*/etc/shadow\\\\s*-p\\\\s*wa\\\\s*(-F\\\\s*key=|-k)\\\\s*[!-~]*\\\\s*\""
      "                    }"
      "                    match_criteria:{"
      "                        filter_regex: \".*/etc/security/opasswd.*\""
      "                        expected_regex: \"\\\\s*-w\\\\s*/etc/security/opasswd\\\\s*-p\\\\s*wa\\\\s*(-F\\\\s*key=|-k)\\\\s*[!-~]*\\\\s*\""
      "                    }"
      "                }"
      "            }"
      "        }"
      "    }"
      "}"
  }
}
benchmark_configs: {
  id: "access-control-permission-modification-events-collected"
  compliance_note: {
    version: { cpe_uri: "cpe:/o:rockylinux:rockylinux:8.5" version: "2.0.0" benchmark_document: "CIS Rocky Linux 8" }
    title: "Ensure discretionary access control permission modification events are collected"
    description:
      "Monitor changes to file permissions, attributes, ownership and group. The parameters in "
      "this section track changes for system calls that affect file permissions and attributes. The "
      "following commands and system calls effect the permissions, ownership and various "
      "attributes of files.\n"
      "chmod\n"
      "fchmod\n"
      "fchmodat\n"
      "chown\n"
      "fchown\n"
      "fchownat\n"
      "lchown\n"
      "setxattr\n"
      "lsetxattr\n"
      "fsetxattr\n"
      "removexattr\n"
      "lremovexattr\n"
      "fremovexattr\n"
      "In all cases, an audit record will only be written for non-system user ids and will ignore "
      "Daemon events. All audit records will be tagged with the identifier \"perm_mod\"."
    rationale:
      "Monitoring for changes in file attributes could alert a system administrator to activity that "
      "could indicate intruder activity or policy violation."
    remediation:
      "Create audit rules\n"
      "Edit or create a file in the /etc/audit/rules.d/ directory, ending in .rules extension, with "
      "the relevant rules to monitor discretionary access control permission modification events.\n"
      "64 Bit systems\n"
      "Example:\n"
      "\n```\n"
      "# {\n"
      "UID_MIN=$(awk '/^\\\\s*UID_MIN/{print $2}' /etc/login.defs)"
      "[ -n \"${UID_MIN}\" ] && printf \"\n"
      "-a always,exit -F arch=b64 -S chmod,fchmod,fchmodat -F auid>=${UID_MIN} -F"
      "auid!=unset -F key=perm_mod\n"
      "-a always,exit -F arch=b64 -S chown,fchown,lchown,fchownat -F"
      "auid>=${UID_MIN} -F auid!=unset -F key=perm_mod\n"
      "-a always,exit -F arch=b32 -S chmod,fchmod,fchmodat -F auid>=${UID_MIN} -F"
      "auid!=unset -F key=perm_mod\n"
      "-a always,exit -F arch=b32 -S lchown,fchown,chown,fchownat -F"
      "auid>=${UID_MIN} -F auid!=unset -F key=perm_mod\n"
      "-a always,exit -F arch=b64 -S"
      "setxattr,lsetxattr,fsetxattr,removexattr,lremovexattr,fremovexattr -F"
      "auid>=${UID_MIN} -F auid!=unset -F key=perm_mod\n"
      "-a always,exit -F arch=b32 -S"
      "setxattr,lsetxattr,fsetxattr,removexattr,lremovexattr,fremovexattr -F"
      "auid>=${UID_MIN} -F auid!=unset -F key=perm_mod\n"
      "\" >> /etc/audit/rules.d/50-perm_mod.rules \\n"
      "|| printf \"ERROR: Variable 'UID_MIN' is unset.\\\\n\"\n"
      "}\n"
      "```\n\n"
      "Load audit rules\n"
      "Merge and load the rules into active configuration:\n"
      "\n```\n"
      "# augenrules --load\n"
      "```\n\n"
      "Check if reboot is required.\n"
      "\n```\n"
      "# if [[ $(auditctl -s | grep \"enabled\") =~ \"2\" ]]; then printf \"Reboot "
      "required to load rules\\\\n\"; fi\n"
      "```\n\n"
      "32 Bit systems\n"
      "Follow the same procedures as for 64 bit systems and ignore any entries with b64.\n"
    cis_benchmark: {
      profile_level: 2
      severity: LOW
    }
    scan_instructions:
      "scan_type_specific:{"
      "    instance_scanning:{"
      "        check_alternatives:{"
      "            file_checks:{"
      "                files_to_check:{single_file:{path:\"/etc/login.defs\"}}"
      "                content_entry:{"
      "                    match_type: ALL_MATCH_ANY_ORDER"
      "                    match_criteria:{"
      "                        filter_regex: \"UID_MIN.*\""
      "                        expected_regex: \"UID_MIN\\\\s*1000\""
      "                    }"
      "                }"
      "                non_compliance_msg: \"If UID_MIN is set to a value different from 1000 in /etc/login.defs, this check will fail.\""
      "                file_display_command: \"grep '^UID_MIN' /etc/login.defs\""
      "            }"
      "            file_checks:{"
      "                files_to_check:{single_file:{path:\"/proc/cpuinfo\"}}"
      "                content_entry:{"
      "                    match_type: ALL_MATCH_ANY_ORDER"
      "                    match_criteria:{"
      "                        filter_regex: \"flags\\\\s*:.*\""
      "                        expected_regex: \".*\\\\slm\\\\s.*\""
      "                    }"
      "                }"
      "            }"
      "            file_checks:{"
      "                files_to_check:{single_file:{path: \"/etc/audit/audit.rules\"}}"
      "                content_entry:{"
      "                    match_type: ALL_MATCH_ANY_ORDER"
      "                    match_criteria:{"
      "                        filter_regex: \".*b32.*chmod.*\""
      "                        expected_regex: \"\\\\s*-a\\\\s*always,exit\\\\s*-F\\\\s*arch=b32\\\\s*-S\\\\s*([a-zA-Z_]+,)*chmod(,[a-zA-Z_]+)*\\\\s*-F\\\\s*auid>=1000\\\\s*-F\\\\s*auid!=(unset|-1|4294967295)\\\\s*(-F\\\\s*key=|-k)\\\\s*[!-~]*\\\\s*\""
      "                    }"
      "                    match_criteria:{"
      "                        filter_regex: \".*b32.*fchmod.*\""
      "                        expected_regex: \"\\\\s*-a\\\\s*always,exit\\\\s*-F\\\\s*arch=b32\\\\s*-S\\\\s*([a-zA-Z_]+,)*fchmod(,[a-zA-Z_]+)*\\\\s*-F\\\\s*auid>=1000\\\\s*-F\\\\s*auid!=(unset|-1|4294967295)\\\\s*(-F\\\\s*key=|-k)\\\\s*[!-~]*\\\\s*\""
      "                    }"
      "                    match_criteria:{"
      "                        filter_regex: \".*b32.*fchmodat.*\""
      "                        expected_regex: \"\\\\s*-a\\\\s*always,exit\\\\s*-F\\\\s*arch=b32\\\\s*-S\\\\s*([a-zA-Z_]+,)*fchmodat(,[a-zA-Z_]+)*\\\\s*-F\\\\s*auid>=1000\\\\s*-F\\\\s*auid!=(unset|-1|4294967295)\\\\s*(-F\\\\s*key=|-k)\\\\s*[!-~]*\\\\s*\""
      "                    }"
      "                    match_criteria:{"
      "                        filter_regex: \".*b32.*chown.*\""
      "                        expected_regex: \"\\\\s*-a\\\\s*always,exit\\\\s*-F\\\\s*arch=b32\\\\s*-S\\\\s*([a-zA-Z_]+,)*chown(,[a-zA-Z_]+)*\\\\s*-F\\\\s*auid>=1000\\\\s*-F\\\\s*auid!=(unset|-1|4294967295)\\\\s*(-F\\\\s*key=|-k)\\\\s*[!-~]*\\\\s*\""
      "                    }"
      "                    match_criteria:{"
      "                        filter_regex: \".*b32.*fchown.*\""
      "                        expected_regex: \"\\\\s*-a\\\\s*always,exit\\\\s*-F\\\\s*arch=b32\\\\s*-S\\\\s*([a-zA-Z_]+,)*fchown(,[a-zA-Z_]+)*\\\\s*-F\\\\s*auid>=1000\\\\s*-F\\\\s*auid!=(unset|-1|4294967295)\\\\s*(-F\\\\s*key=|-k)\\\\s*[!-~]*\\\\s*\""
      "                    }"
      "                    match_criteria:{"
      "                        filter_regex: \".*b32.*lchown.*\""
      "                        expected_regex: \"\\\\s*-a\\\\s*always,exit\\\\s*-F\\\\s*arch=b32\\\\s*-S\\\\s*([a-zA-Z_]+,)*lchown(,[a-zA-Z_]+)*\\\\s*-F\\\\s*auid>=1000\\\\s*-F\\\\s*auid!=(unset|-1|4294967295)\\\\s*(-F\\\\s*key=|-k)\\\\s*[!-~]*\\\\s*\""
      "                    }"
      "                    match_criteria:{"
      "                        filter_regex: \".*b32.*fchownat.*\""
      "                        expected_regex: \"\\\\s*-a\\\\s*always,exit\\\\s*-F\\\\s*arch=b32\\\\s*-S\\\\s*([a-zA-Z_]+,)*fchownat(,[a-zA-Z_]+)*\\\\s*-F\\\\s*auid>=1000\\\\s*-F\\\\s*auid!=(unset|-1|4294967295)\\\\s*(-F\\\\s*key=|-k)\\\\s*[!-~]*\\\\s*\""
      "                    }"
      "                    match_criteria:{"
      "                        filter_regex: \".*b32.*setxattr.*\""
      "                        expected_regex: \"\\\\s*-a\\\\s*always,exit\\\\s*-F\\\\s*arch=b32\\\\s*-S\\\\s*([a-zA-Z_]+,)*setxattr(,[a-zA-Z_]+)*\\\\s*-F\\\\s*auid>=1000\\\\s*-F\\\\s*auid!=(unset|-1|4294967295)\\\\s*(-F\\\\s*key=|-k)\\\\s*[!-~]*\\\\s*\""
      "                    }"
      "                    match_criteria:{"
      "                        filter_regex: \".*b32.*fsetxattr.*\""
      "                        expected_regex: \"\\\\s*-a\\\\s*always,exit\\\\s*-F\\\\s*arch=b32\\\\s*-S\\\\s*([a-zA-Z_]+,)*fsetxattr(,[a-zA-Z_]+)*\\\\s*-F\\\\s*auid>=1000\\\\s*-F\\\\s*auid!=(unset|-1|4294967295)\\\\s*(-F\\\\s*key=|-k)\\\\s*[!-~]*\\\\s*\""
      "                    }"
      "                    match_criteria:{"
      "                        filter_regex: \".*b32.*lsetxattr.*\""
      "                        expected_regex: \"\\\\s*-a\\\\s*always,exit\\\\s*-F\\\\s*arch=b32\\\\s*-S\\\\s*([a-zA-Z_]+,)*lsetxattr(,[a-zA-Z_]+)*\\\\s*-F\\\\s*auid>=1000\\\\s*-F\\\\s*auid!=(unset|-1|4294967295)\\\\s*(-F\\\\s*key=|-k)\\\\s*[!-~]*\\\\s*\""
      "                    }"
      "                    match_criteria:{"
      "                        filter_regex: \".*b32.*removexattr.*\""
      "                        expected_regex: \"\\\\s*-a\\\\s*always,exit\\\\s*-F\\\\s*arch=b32\\\\s*-S\\\\s*([a-zA-Z_]+,)*removexattr(,[a-zA-Z_]+)*\\\\s*-F\\\\s*auid>=1000\\\\s*-F\\\\s*auid!=(unset|-1|4294967295)\\\\s*(-F\\\\s*key=|-k)\\\\s*[!-~]*\\\\s*\""
      "                    }"
      "                    match_criteria:{"
      "                        filter_regex: \".*b32.*fremovexattr.*\""
      "                        expected_regex: \"\\\\s*-a\\\\s*always,exit\\\\s*-F\\\\s*arch=b32\\\\s*-S\\\\s*([a-zA-Z_]+,)*fremovexattr(,[a-zA-Z_]+)*\\\\s*-F\\\\s*auid>=1000\\\\s*-F\\\\s*auid!=(unset|-1|4294967295)\\\\s*(-F\\\\s*key=|-k)\\\\s*[!-~]*\\\\s*\""
      "                    }"
      "                    match_criteria:{"
      "                        filter_regex: \".*b32.*lremovexattr.*\""
      "                        expected_regex: \"\\\\s*-a\\\\s*always,exit\\\\s*-F\\\\s*arch=b32\\\\s*-S\\\\s*([a-zA-Z_]+,)*lremovexattr(,[a-zA-Z_]+)*\\\\s*-F\\\\s*auid>=1000\\\\s*-F\\\\s*auid!=(unset|-1|4294967295)\\\\s*(-F\\\\s*key=|-k)\\\\s*[!-~]*\\\\s*\""
      "                    }"
      "                    match_criteria:{"
      "                        filter_regex: \".*b64.*chmod.*\""
      "                        expected_regex: \"\\\\s*-a\\\\s*always,exit\\\\s*-F\\\\s*arch=b64\\\\s*-S\\\\s*([a-zA-Z_]+,)*chmod(,[a-zA-Z_]+)*\\\\s*-F\\\\s*auid>=1000\\\\s*-F\\\\s*auid!=(unset|-1|4294967295)\\\\s*(-F\\\\s*key=|-k)\\\\s*[!-~]*\\\\s*\""
      "                    }"
      "                    match_criteria:{"
      "                        filter_regex: \".*b64.*fchmod.*\""
      "                        expected_regex: \"\\\\s*-a\\\\s*always,exit\\\\s*-F\\\\s*arch=b64\\\\s*-S\\\\s*([a-zA-Z_]+,)*fchmod(,[a-zA-Z_]+)*\\\\s*-F\\\\s*auid>=1000\\\\s*-F\\\\s*auid!=(unset|-1|4294967295)\\\\s*(-F\\\\s*key=|-k)\\\\s*[!-~]*\\\\s*\""
      "                    }"
      "                    match_criteria:{"
      "                        filter_regex: \".*b64.*fchmodat.*\""
      "                        expected_regex: \"\\\\s*-a\\\\s*always,exit\\\\s*-F\\\\s*arch=b64\\\\s*-S\\\\s*([a-zA-Z_]+,)*fchmodat(,[a-zA-Z_]+)*\\\\s*-F\\\\s*auid>=1000\\\\s*-F\\\\s*auid!=(unset|-1|4294967295)\\\\s*(-F\\\\s*key=|-k)\\\\s*[!-~]*\\\\s*\""
      "                    }"
      "                    match_criteria:{"
      "                        filter_regex: \".*b64.*chown.*\""
      "                        expected_regex: \"\\\\s*-a\\\\s*always,exit\\\\s*-F\\\\s*arch=b64\\\\s*-S\\\\s*([a-zA-Z_]+,)*chown(,[a-zA-Z_]+)*\\\\s*-F\\\\s*auid>=1000\\\\s*-F\\\\s*auid!=(unset|-1|4294967295)\\\\s*(-F\\\\s*key=|-k)\\\\s*[!-~]*\\\\s*\""
      "                    }"
      "                    match_criteria:{"
      "                        filter_regex: \".*b64.*fchown.*\""
      "                        expected_regex: \"\\\\s*-a\\\\s*always,exit\\\\s*-F\\\\s*arch=b64\\\\s*-S\\\\s*([a-zA-Z_]+,)*fchown(,[a-zA-Z_]+)*\\\\s*-F\\\\s*auid>=1000\\\\s*-F\\\\s*auid!=(unset|-1|4294967295)\\\\s*(-F\\\\s*key=|-k)\\\\s*[!-~]*\\\\s*\""
      "                    }"
      "                    match_criteria:{"
      "                        filter_regex: \".*b64.*lchown.*\""
      "                        expected_regex: \"\\\\s*-a\\\\s*always,exit\\\\s*-F\\\\s*arch=b64\\\\s*-S\\\\s*([a-zA-Z_]+,)*lchown(,[a-zA-Z_]+)*\\\\s*-F\\\\s*auid>=1000\\\\s*-F\\\\s*auid!=(unset|-1|4294967295)\\\\s*(-F\\\\s*key=|-k)\\\\s*[!-~]*\\\\s*\""
      "                    }"
      "                    match_criteria:{"
      "                        filter_regex: \".*b64.*fchownat.*\""
      "                        expected_regex: \"\\\\s*-a\\\\s*always,exit\\\\s*-F\\\\s*arch=b64\\\\s*-S\\\\s*([a-zA-Z_]+,)*fchownat(,[a-zA-Z_]+)*\\\\s*-F\\\\s*auid>=1000\\\\s*-F\\\\s*auid!=(unset|-1|4294967295)\\\\s*(-F\\\\s*key=|-k)\\\\s*[!-~]*\\\\s*\""
      "                    }"
      "                    match_criteria:{"
      "                        filter_regex: \".*b64.*setxattr.*\""
      "                        expected_regex: \"\\\\s*-a\\\\s*always,exit\\\\s*-F\\\\s*arch=b64\\\\s*-S\\\\s*([a-zA-Z_]+,)*setxattr(,[a-zA-Z_]+)*\\\\s*-F\\\\s*auid>=1000\\\\s*-F\\\\s*auid!=(unset|-1|4294967295)\\\\s*(-F\\\\s*key=|-k)\\\\s*[!-~]*\\\\s*\""
      "                    }"
      "                    match_criteria:{"
      "                        filter_regex: \".*b64.*fsetxattr.*\""
      "                        expected_regex: \"\\\\s*-a\\\\s*always,exit\\\\s*-F\\\\s*arch=b64\\\\s*-S\\\\s*([a-zA-Z_]+,)*fsetxattr(,[a-zA-Z_]+)*\\\\s*-F\\\\s*auid>=1000\\\\s*-F\\\\s*auid!=(unset|-1|4294967295)\\\\s*(-F\\\\s*key=|-k)\\\\s*[!-~]*\\\\s*\""
      "                    }"
      "                    match_criteria:{"
      "                        filter_regex: \".*b64.*lsetxattr.*\""
      "                        expected_regex: \"\\\\s*-a\\\\s*always,exit\\\\s*-F\\\\s*arch=b64\\\\s*-S\\\\s*([a-zA-Z_]+,)*lsetxattr(,[a-zA-Z_]+)*\\\\s*-F\\\\s*auid>=1000\\\\s*-F\\\\s*auid!=(unset|-1|4294967295)\\\\s*(-F\\\\s*key=|-k)\\\\s*[!-~]*\\\\s*\""
      "                    }"
      "                    match_criteria:{"
      "                        filter_regex: \".*b64.*removexattr.*\""
      "                        expected_regex: \"\\\\s*-a\\\\s*always,exit\\\\s*-F\\\\s*arch=b64\\\\s*-S\\\\s*([a-zA-Z_]+,)*removexattr(,[a-zA-Z_]+)*\\\\s*-F\\\\s*auid>=1000\\\\s*-F\\\\s*auid!=(unset|-1|4294967295)\\\\s*(-F\\\\s*key=|-k)\\\\s*[!-~]*\\\\s*\""
      "                    }"
      "                    match_criteria:{"
      "                        filter_regex: \".*b64.*fremovexattr.*\""
      "                        expected_regex: \"\\\\s*-a\\\\s*always,exit\\\\s*-F\\\\s*arch=b64\\\\s*-S\\\\s*([a-zA-Z_]+,)*fremovexattr(,[a-zA-Z_]+)*\\\\s*-F\\\\s*auid>=1000\\\\s*-F\\\\s*auid!=(unset|-1|4294967295)\\\\s*(-F\\\\s*key=|-k)\\\\s*[!-~]*\\\\s*\""
      "                    }"
      "                    match_criteria:{"
      "                        filter_regex: \".*b64.*lremovexattr.*\""
      "                        expected_regex: \"\\\\s*-a\\\\s*always,exit\\\\s*-F\\\\s*arch=b64\\\\s*-S\\\\s*([a-zA-Z_]+,)*lremovexattr(,[a-zA-Z_]+)*\\\\s*-F\\\\s*auid>=1000\\\\s*-F\\\\s*auid!=(unset|-1|4294967295)\\\\s*(-F\\\\s*key=|-k)\\\\s*[!-~]*\\\\s*\""
      "                    }"
      "                }"
      "            }"
      "        }"
      "        check_alternatives:{"
      "            file_checks:{"
      "                files_to_check:{single_file:{path:\"/etc/login.defs\"}}"
      "                content_entry:{"
      "                    match_type: ALL_MATCH_ANY_ORDER"
      "                    match_criteria:{"
      "                        filter_regex: \"UID_MIN.*\""
      "                        expected_regex: \"UID_MIN\\\\s*1000\""
      "                    }"
      "                }"
      "                non_compliance_msg: \"If UID_MIN is set to a value different from 1000 in /etc/login.defs, this check will fail.\""
      "                file_display_command: \"grep '^UID_MIN' /etc/login.defs\""
      "            }"
      "            file_checks:{"
      "                files_to_check:{single_file:{path: \"/etc/audit/audit.rules\"}}"
      "                content_entry:{"
      "                    match_type: ALL_MATCH_ANY_ORDER"
      "                    match_criteria:{"
      "                        filter_regex: \".*b32.*chmod.*\""
      "                        expected_regex: \"\\\\s*-a\\\\s*always,exit\\\\s*-F\\\\s*arch=b32\\\\s*-S\\\\s*([a-zA-Z_]+,)*chmod(,[a-zA-Z_]+)*\\\\s*-F\\\\s*auid>=1000\\\\s*-F\\\\s*auid!=(unset|-1|4294967295)\\\\s*(-F\\\\s*key=|-k)\\\\s*[!-~]*\\\\s*\""
      "                    }"
      "                    match_criteria:{"
      "                        filter_regex: \".*b32.*fchmod.*\""
      "                        expected_regex: \"\\\\s*-a\\\\s*always,exit\\\\s*-F\\\\s*arch=b32\\\\s*-S\\\\s*([a-zA-Z_]+,)*fchmod(,[a-zA-Z_]+)*\\\\s*-F\\\\s*auid>=1000\\\\s*-F\\\\s*auid!=(unset|-1|4294967295)\\\\s*(-F\\\\s*key=|-k)\\\\s*[!-~]*\\\\s*\""
      "                    }"
      "                    match_criteria:{"
      "                        filter_regex: \".*b32.*fchmodat.*\""
      "                        expected_regex: \"\\\\s*-a\\\\s*always,exit\\\\s*-F\\\\s*arch=b32\\\\s*-S\\\\s*([a-zA-Z_]+,)*fchmodat(,[a-zA-Z_]+)*\\\\s*-F\\\\s*auid>=1000\\\\s*-F\\\\s*auid!=(unset|-1|4294967295)\\\\s*(-F\\\\s*key=|-k)\\\\s*[!-~]*\\\\s*\""
      "                    }"
      "                    match_criteria:{"
      "                        filter_regex: \".*b32.*chown.*\""
      "                        expected_regex: \"\\\\s*-a\\\\s*always,exit\\\\s*-F\\\\s*arch=b32\\\\s*-S\\\\s*([a-zA-Z_]+,)*chown(,[a-zA-Z_]+)*\\\\s*-F\\\\s*auid>=1000\\\\s*-F\\\\s*auid!=(unset|-1|4294967295)\\\\s*(-F\\\\s*key=|-k)\\\\s*[!-~]*\\\\s*\""
      "                    }"
      "                    match_criteria:{"
      "                        filter_regex: \".*b32.*fchown.*\""
      "                        expected_regex: \"\\\\s*-a\\\\s*always,exit\\\\s*-F\\\\s*arch=b32\\\\s*-S\\\\s*([a-zA-Z_]+,)*fchown(,[a-zA-Z_]+)*\\\\s*-F\\\\s*auid>=1000\\\\s*-F\\\\s*auid!=(unset|-1|4294967295)\\\\s*(-F\\\\s*key=|-k)\\\\s*[!-~]*\\\\s*\""
      "                    }"
      "                    match_criteria:{"
      "                        filter_regex: \".*b32.*lchown.*\""
      "                        expected_regex: \"\\\\s*-a\\\\s*always,exit\\\\s*-F\\\\s*arch=b32\\\\s*-S\\\\s*([a-zA-Z_]+,)*lchown(,[a-zA-Z_]+)*\\\\s*-F\\\\s*auid>=1000\\\\s*-F\\\\s*auid!=(unset|-1|4294967295)\\\\s*(-F\\\\s*key=|-k)\\\\s*[!-~]*\\\\s*\""
      "                    }"
      "                    match_criteria:{"
      "                        filter_regex: \".*b32.*fchownat.*\""
      "                        expected_regex: \"\\\\s*-a\\\\s*always,exit\\\\s*-F\\\\s*arch=b32\\\\s*-S\\\\s*([a-zA-Z_]+,)*fchownat(,[a-zA-Z_]+)*\\\\s*-F\\\\s*auid>=1000\\\\s*-F\\\\s*auid!=(unset|-1|4294967295)\\\\s*(-F\\\\s*key=|-k)\\\\s*[!-~]*\\\\s*\""
      "                    }"
      "                    match_criteria:{"
      "                        filter_regex: \".*b32.*setxattr.*\""
      "                        expected_regex: \"\\\\s*-a\\\\s*always,exit\\\\s*-F\\\\s*arch=b32\\\\s*-S\\\\s*([a-zA-Z_]+,)*setxattr(,[a-zA-Z_]+)*\\\\s*-F\\\\s*auid>=1000\\\\s*-F\\\\s*auid!=(unset|-1|4294967295)\\\\s*(-F\\\\s*key=|-k)\\\\s*[!-~]*\\\\s*\""
      "                    }"
      "                    match_criteria:{"
      "                        filter_regex: \".*b32.*fsetxattr.*\""
      "                        expected_regex: \"\\\\s*-a\\\\s*always,exit\\\\s*-F\\\\s*arch=b32\\\\s*-S\\\\s*([a-zA-Z_]+,)*fsetxattr(,[a-zA-Z_]+)*\\\\s*-F\\\\s*auid>=1000\\\\s*-F\\\\s*auid!=(unset|-1|4294967295)\\\\s*(-F\\\\s*key=|-k)\\\\s*[!-~]*\\\\s*\""
      "                    }"
      "                    match_criteria:{"
      "                        filter_regex: \".*b32.*lsetxattr.*\""
      "                        expected_regex: \"\\\\s*-a\\\\s*always,exit\\\\s*-F\\\\s*arch=b32\\\\s*-S\\\\s*([a-zA-Z_]+,)*lsetxattr(,[a-zA-Z_]+)*\\\\s*-F\\\\s*auid>=1000\\\\s*-F\\\\s*auid!=(unset|-1|4294967295)\\\\s*(-F\\\\s*key=|-k)\\\\s*[!-~]*\\\\s*\""
      "                    }"
      "                    match_criteria:{"
      "                        filter_regex: \".*b32.*removexattr.*\""
      "                        expected_regex: \"\\\\s*-a\\\\s*always,exit\\\\s*-F\\\\s*arch=b32\\\\s*-S\\\\s*([a-zA-Z_]+,)*removexattr(,[a-zA-Z_]+)*\\\\s*-F\\\\s*auid>=1000\\\\s*-F\\\\s*auid!=(unset|-1|4294967295)\\\\s*(-F\\\\s*key=|-k)\\\\s*[!-~]*\\\\s*\""
      "                    }"
      "                    match_criteria:{"
      "                        filter_regex: \".*b32.*fremovexattr.*\""
      "                        expected_regex: \"\\\\s*-a\\\\s*always,exit\\\\s*-F\\\\s*arch=b32\\\\s*-S\\\\s*([a-zA-Z_]+,)*fremovexattr(,[a-zA-Z_]+)*\\\\s*-F\\\\s*auid>=1000\\\\s*-F\\\\s*auid!=(unset|-1|4294967295)\\\\s*(-F\\\\s*key=|-k)\\\\s*[!-~]*\\\\s*\""
      "                    }"
      "                    match_criteria:{"
      "                        filter_regex: \".*b32.*lremovexattr.*\""
      "                        expected_regex: \"\\\\s*-a\\\\s*always,exit\\\\s*-F\\\\s*arch=b32\\\\s*-S\\\\s*([a-zA-Z_]+,)*lremovexattr(,[a-zA-Z_]+)*\\\\s*-F\\\\s*auid>=1000\\\\s*-F\\\\s*auid!=(unset|-1|4294967295)\\\\s*(-F\\\\s*key=|-k)\\\\s*[!-~]*\\\\s*\""
      "                    }"
      "                }"
      "            }"
      "        }"
      "    }"
      "    image_scanning:{"
      "        check_alternatives:{"
      "            file_checks:{"
      "                files_to_check:{single_file:{path:\"/etc/login.defs\"}}"
      "                content_entry:{"
      "                    match_type: ALL_MATCH_ANY_ORDER"
      "                    match_criteria:{"
      "                        filter_regex: \"UID_MIN.*\""
      "                        expected_regex: \"UID_MIN\\\\s*1000\""
      "                    }"
      "                }"
      "                non_compliance_msg: \"If UID_MIN is set to a value different from 1000 in /etc/login.defs, this check will fail.\""
      "                file_display_command: \"grep '^UID_MIN' /etc/login.defs\""
      "            }"
      "            file_checks:{"
      "                files_to_check:{files_in_dir:{"
      "                    dir_path:\"/etc/audit/rules.d\""
      "                    recursive: true"
      "                    files_only: true"
      "                    filename_regex: \".*\\\\.rules\""
      "                }}"
      "                content_entry:{"
      "                    match_type: ALL_MATCH_ANY_ORDER"
      "                    match_criteria:{"
      "                        filter_regex: \".*chmod.*\""
      "                        expected_regex: \"\\\\s*-a\\\\s*always,exit\\\\s*-F\\\\s*arch=b[2346]{2}\\\\s*-S\\\\s*([a-zA-Z_]+,)*chmod(,[a-zA-Z_]+)*\\\\s*-F\\\\s*auid>=1000\\\\s*-F\\\\s*auid!=(unset|-1|4294967295)\\\\s*(-F\\\\s*key=|-k)\\\\s*[!-~]*\\\\s*\""
      "                    }"
      "                    match_criteria:{"
      "                        filter_regex: \".*fchmod.*\""
      "                        expected_regex: \"\\\\s*-a\\\\s*always,exit\\\\s*-F\\\\s*arch=b[2346]{2}\\\\s*-S\\\\s*([a-zA-Z_]+,)*fchmod(,[a-zA-Z_]+)*\\\\s*-F\\\\s*auid>=1000\\\\s*-F\\\\s*auid!=(unset|-1|4294967295)\\\\s*(-F\\\\s*key=|-k)\\\\s*[!-~]*\\\\s*\""
      "                    }"
      "                    match_criteria:{"
      "                        filter_regex: \".*fchmodat.*\""
      "                        expected_regex: \"\\\\s*-a\\\\s*always,exit\\\\s*-F\\\\s*arch=b[2346]{2}\\\\s*-S\\\\s*([a-zA-Z_]+,)*fchmodat(,[a-zA-Z_]+)*\\\\s*-F\\\\s*auid>=1000\\\\s*-F\\\\s*auid!=(unset|-1|4294967295)\\\\s*(-F\\\\s*key=|-k)\\\\s*[!-~]*\\\\s*\""
      "                    }"
      "                    match_criteria:{"
      "                        filter_regex: \".*chown.*\""
      "                        expected_regex: \"\\\\s*-a\\\\s*always,exit\\\\s*-F\\\\s*arch=b[2346]{2}\\\\s*-S\\\\s*([a-zA-Z_]+,)*chown(,[a-zA-Z_]+)*\\\\s*-F\\\\s*auid>=1000\\\\s*-F\\\\s*auid!=(unset|-1|4294967295)\\\\s*(-F\\\\s*key=|-k)\\\\s*[!-~]*\\\\s*\""
      "                    }"
      "                    match_criteria:{"
      "                        filter_regex: \".*fchown.*\""
      "                        expected_regex: \"\\\\s*-a\\\\s*always,exit\\\\s*-F\\\\s*arch=b[2346]{2}\\\\s*-S\\\\s*([a-zA-Z_]+,)*fchown(,[a-zA-Z_]+)*\\\\s*-F\\\\s*auid>=1000\\\\s*-F\\\\s*auid!=(unset|-1|4294967295)\\\\s*(-F\\\\s*key=|-k)\\\\s*[!-~]*\\\\s*\""
      "                    }"
      "                    match_criteria:{"
      "                        filter_regex: \".*lchown.*\""
      "                        expected_regex: \"\\\\s*-a\\\\s*always,exit\\\\s*-F\\\\s*arch=b[2346]{2}\\\\s*-S\\\\s*([a-zA-Z_]+,)*lchown(,[a-zA-Z_]+)*\\\\s*-F\\\\s*auid>=1000\\\\s*-F\\\\s*auid!=(unset|-1|4294967295)\\\\s*(-F\\\\s*key=|-k)\\\\s*[!-~]*\\\\s*\""
      "                    }"
      "                    match_criteria:{"
      "                        filter_regex: \".*fchownat.*\""
      "                        expected_regex: \"\\\\s*-a\\\\s*always,exit\\\\s*-F\\\\s*arch=b[2346]{2}\\\\s*-S\\\\s*([a-zA-Z_]+,)*fchownat(,[a-zA-Z_]+)*\\\\s*-F\\\\s*auid>=1000\\\\s*-F\\\\s*auid!=(unset|-1|4294967295)\\\\s*(-F\\\\s*key=|-k)\\\\s*[!-~]*\\\\s*\""
      "                    }"
      "                    match_criteria:{"
      "                        filter_regex: \".*setxattr.*\""
      "                        expected_regex: \"\\\\s*-a\\\\s*always,exit\\\\s*-F\\\\s*arch=b[2346]{2}\\\\s*-S\\\\s*([a-zA-Z_]+,)*setxattr(,[a-zA-Z_]+)*\\\\s*-F\\\\s*auid>=1000\\\\s*-F\\\\s*auid!=(unset|-1|4294967295)\\\\s*(-F\\\\s*key=|-k)\\\\s*[!-~]*\\\\s*\""
      "                    }"
      "                    match_criteria:{"
      "                        filter_regex: \".*fsetxattr.*\""
      "                        expected_regex: \"\\\\s*-a\\\\s*always,exit\\\\s*-F\\\\s*arch=b[2346]{2}\\\\s*-S\\\\s*([a-zA-Z_]+,)*fsetxattr(,[a-zA-Z_]+)*\\\\s*-F\\\\s*auid>=1000\\\\s*-F\\\\s*auid!=(unset|-1|4294967295)\\\\s*(-F\\\\s*key=|-k)\\\\s*[!-~]*\\\\s*\""
      "                    }"
      "                    match_criteria:{"
      "                        filter_regex: \".*lsetxattr.*\""
      "                        expected_regex: \"\\\\s*-a\\\\s*always,exit\\\\s*-F\\\\s*arch=b[2346]{2}\\\\s*-S\\\\s*([a-zA-Z_]+,)*lsetxattr(,[a-zA-Z_]+)*\\\\s*-F\\\\s*auid>=1000\\\\s*-F\\\\s*auid!=(unset|-1|4294967295)\\\\s*(-F\\\\s*key=|-k)\\\\s*[!-~]*\\\\s*\""
      "                    }"
      "                    match_criteria:{"
      "                        filter_regex: \".*removexattr.*\""
      "                        expected_regex: \"\\\\s*-a\\\\s*always,exit\\\\s*-F\\\\s*arch=b[2346]{2}\\\\s*-S\\\\s*([a-zA-Z_]+,)*removexattr(,[a-zA-Z_]+)*\\\\s*-F\\\\s*auid>=1000\\\\s*-F\\\\s*auid!=(unset|-1|4294967295)\\\\s*(-F\\\\s*key=|-k)\\\\s*[!-~]*\\\\s*\""
      "                    }"
      "                    match_criteria:{"
      "                        filter_regex: \".*fremovexattr.*\""
      "                        expected_regex: \"\\\\s*-a\\\\s*always,exit\\\\s*-F\\\\s*arch=b[2346]{2}\\\\s*-S\\\\s*([a-zA-Z_]+,)*fremovexattr(,[a-zA-Z_]+)*\\\\s*-F\\\\s*auid>=1000\\\\s*-F\\\\s*auid!=(unset|-1|4294967295)\\\\s*(-F\\\\s*key=|-k)\\\\s*[!-~]*\\\\s*\""
      "                    }"
      "                    match_criteria:{"
      "                        filter_regex: \".*lremovexattr.*\""
      "                        expected_regex: \"\\\\s*-a\\\\s*always,exit\\\\s*-F\\\\s*arch=b[2346]{2}\\\\s*-S\\\\s*([a-zA-Z_]+,)*lremovexattr(,[a-zA-Z_]+)*\\\\s*-F\\\\s*auid>=1000\\\\s*-F\\\\s*auid!=(unset|-1|4294967295)\\\\s*(-F\\\\s*key=|-k)\\\\s*[!-~]*\\\\s*\""
      "                    }"
      "                }"
      "            }"
      "        }"
      "    }"
      "}"

  }
}
benchmark_configs: {
  id: "successful-file-system-mounts-collected"
  compliance_note: {
    version: { cpe_uri: "cpe:/o:rockylinux:rockylinux:8.5" version: "2.0.0" benchmark_document: "CIS Rocky Linux 8" }
    title: "Ensure successful file system mounts are collected"
    description:
      "Monitor the use of the mount system call. The mount (and umount ) system call controls the "
      "mounting and unmounting of file systems. The parameters below configure the system to "
      "create an audit record when the mount system call is used by a non-privileged user"
    rationale:
      "It is highly unusual for a non privileged user to mount file systems to the system. While "
      "tracking mount commands gives the system administrator evidence that external media "
      "may have been mounted (based on a review of the source of the mount and confirming it's "
      "an external media type), it does not conclusively indicate that data was exported to the "
      "media. System administrators who wish to determine if data were exported, would also "
      "have to track successful open, creat and truncate system calls requiring write access to a "
      "file under the mount point of the external media file system. This could give a fair "
      "indication that a write occurred. The only way to truly prove it, would be to track "
      "successful writes to the external media. Tracking write system calls could quickly fill up the "
      "audit log and is not recommended. Recommendations on configuration options to track "
      "data export to media is beyond the scope of this document."
    remediation:
      "Create audit rules\n"
      "Edit or create a file in the /etc/audit/rules.d/ directory, ending in .rules extension, with "
      "the relevant rules to monitor successful file system mounts.\n"
      "64 Bit systems\n"
      "Example:\n"
      "\n```\n"
      "# {\n"
      "UID_MIN=$(awk '/^\\\\s*UID_MIN/{print $2}' /etc/login.defs)"
      "[ -n \"${UID_MIN}\" ] && printf \"\n"
      "-a always,exit -F arch=b32 -S mount -F auid>=1000 -F auid!=unset -k mounts\n"
      "-a always,exit -F arch=b64 -S mount -F auid>=1000 -F auid!=unset -k mounts\n"
      "\" >> /etc/audit/rules.d/50-perm_mod.rules \\\n"
      "|| printf \"ERROR: Variable 'UID_MIN' is unset.\\\\n\"\n"
      "}\n"
      "```\n\n"
      "Load audit rules\n"
      "Merge and load the rules into active configuration:\n"
      "\n```\n"
      "# augenrules --load\n"
      "```\n\n"
      "Check if reboot is required.\n"
      "\n```\n"
      "# if [[ $(auditctl -s | grep \"enabled\") =~ \"2\" ]]; then printf \"Reboot "
      "required to load rules\\\\n\"; fi\n"
      "```\n\n"
      "32 Bit systems\n"
      "Follow the same procedures as for 64 bit systems and ignore any entries with b64.\n"
    cis_benchmark: {
      profile_level: 2
      severity: LOW
    }
    scan_instructions:
      "scan_type_specific:{"
      "    instance_scanning:{"
      "        check_alternatives:{"
      "            file_checks:{"
      "                files_to_check:{single_file:{path:\"/etc/login.defs\"}}"
      "                content_entry:{"
      "                    match_type: ALL_MATCH_ANY_ORDER"
      "                    match_criteria:{"
      "                        filter_regex: \"UID_MIN.*\""
      "                        expected_regex: \"UID_MIN\\\\s*1000\""
      "                    }"
      "                }"
      "                non_compliance_msg: \"If UID_MIN is set to a value different from 1000 in /etc/login.defs, this check will fail.\""
      "                file_display_command: \"grep '^UID_MIN' /etc/login.defs\""
      "            }"
      "            file_checks:{"
      "                files_to_check:{single_file:{path:\"/proc/cpuinfo\"}}"
      "                content_entry:{"
      "                    match_type: ALL_MATCH_ANY_ORDER"
      "                    match_criteria:{"
      "                        filter_regex: \"flags\\\\s*:.*\""
      "                        expected_regex: \".*\\\\slm\\\\s.*\""
      "                    }"
      "                }"
      "            }"
      "            file_checks:{"
      "                files_to_check:{single_file:{path: \"/etc/audit/audit.rules\"}}"
      "                content_entry:{"
      "                    match_type: ALL_MATCH_ANY_ORDER"
      "                    match_criteria:{"
      "                        filter_regex: \".*b32.*mount.*\""
      "                        expected_regex: \"\\\\s*-a\\\\s*always,exit\\\\s*-F\\\\s*arch=b32\\\\s*-S\\\\s*([a-zA-Z_]+,)*mount(,[a-zA-Z_]+)*\\\\s*-F\\\\s*auid>=1000\\\\s*-F\\\\s*auid!=(unset|-1|4294967295)\\\\s*(-F\\\\s*key=|-k)\\\\s*[!-~]*\\\\s*\""
      "                    }"
      "                    match_criteria:{"
      "                        filter_regex: \".*b64.*mount.*\""
      "                        expected_regex: \"\\\\s*-a\\\\s*always,exit\\\\s*-F\\\\s*arch=b64\\\\s*-S\\\\s*([a-zA-Z_]+,)*mount(,[a-zA-Z_]+)*\\\\s*-F\\\\s*auid>=1000\\\\s*-F\\\\s*auid!=(unset|-1|4294967295)\\\\s*(-F\\\\s*key=|-k)\\\\s*[!-~]*\\\\s*\""
      "                    }"
      "                }"
      "            }"
      "        }"
      "        check_alternatives:{"
      "            file_checks:{"
      "                files_to_check:{single_file:{path:\"/etc/login.defs\"}}"
      "                content_entry:{"
      "                    match_type: ALL_MATCH_ANY_ORDER"
      "                    match_criteria:{"
      "                        filter_regex: \"UID_MIN.*\""
      "                        expected_regex: \"UID_MIN\\\\s*1000\""
      "                    }"
      "                }"
      "                non_compliance_msg: \"If UID_MIN is set to a value different from 1000 in /etc/login.defs, this check will fail.\""
      "                file_display_command: \"grep '^UID_MIN' /etc/login.defs\""
      "            }"
      "            file_checks:{"
      "                files_to_check:{single_file:{path: \"/etc/audit/audit.rules\"}}"
      "                content_entry:{"
      "                    match_type: ALL_MATCH_ANY_ORDER"
      "                    match_criteria:{"
      "                        filter_regex: \".*b32.*mount.*\""
      "                        expected_regex: \"\\\\s*-a\\\\s*always,exit\\\\s*-F\\\\s*arch=b32\\\\s*-S\\\\s*([a-zA-Z_]+,)*mount(,[a-zA-Z_]+)*\\\\s*-F\\\\s*auid>=1000\\\\s*-F\\\\s*auid!=(unset|-1|4294967295)\\\\s*(-F\\\\s*key=|-k)\\\\s*[!-~]*\\\\s*\""
      "                    }"
      "                }"
      "            }"
      "        }"
      "    }"
      "    image_scanning:{"
      "        check_alternatives:{"
      "            file_checks:{"
      "                files_to_check:{single_file:{path:\"/etc/login.defs\"}}"
      "                content_entry:{"
      "                    match_type: ALL_MATCH_ANY_ORDER"
      "                    match_criteria:{"
      "                        filter_regex: \"UID_MIN.*\""
      "                        expected_regex: \"UID_MIN\\\\s*1000\""
      "                    }"
      "                }"
      "                non_compliance_msg: \"If UID_MIN is set to a value different from 1000 in /etc/login.defs, this check will fail.\""
      "                file_display_command: \"grep '^UID_MIN' /etc/login.defs\""
      "            }"
      "            file_checks:{"
      "                files_to_check:{files_in_dir:{"
      "                    dir_path:\"/etc/audit/rules.d\""
      "                    recursive: true"
      "                    files_only: true"
      "                    filename_regex: \".*\\\\.rules\""
      "                }}"
      "                content_entry:{"
      "                    match_type: ALL_MATCH_ANY_ORDER"
      "                    match_criteria:{"
      "                        filter_regex: \".*mount.*\""
      "                        expected_regex: \"\\\\s*-a\\\\s*always,exit\\\\s*-F\\\\s*arch=b[2346]{2}\\\\s*-S\\\\s*([a-zA-Z_]+,)*mount(,[a-zA-Z_]+)*\\\\s*-F\\\\s*auid>=1000\\\\s*-F\\\\s*auid!=(unset|-1|4294967295)\\\\s*(-F\\\\s*key=|-k)\\\\s*[!-~]*\\\\s*\""
      "                    }"
      "                }"
      "            }"
      "        }"
      "    }"
      "}"
  }
}
benchmark_configs: {
  id: "session-initiation-info-collected"
  compliance_note: {
    version: { cpe_uri: "cpe:/o:rockylinux:rockylinux:8.5" version: "2.0.0" benchmark_document: "CIS Rocky Linux 8" }
    title: "Ensure session initiation information is collected"
    description:
      "Monitor session initiation events. The parameters in this section track changes to the files "
      "associated with session events.\n"
      "/var/run/utmp - tracks all currently logged in users.\n"
      "/var/log/wtmp - file tracks logins, logouts, shutdown, and reboot events.\n"
      "/var/log/btmp - keeps track of failed login attempts and can be read by entering the "
      "command /usr/bin/last -f /var/log/btmp.\n"
      "All audit records will be tagged with the identifier \"session\"."
    rationale:
      "Monitoring these files for changes could alert a system administrator to logins occurring at "
      "unusual hours, which could indicate intruder activity (i.e. a user logging in at a time when "
      "they do not normally log in)."
    remediation:
      "Edit or create a file in the /etc/audit/rules.d/ directory, ending in .rules extension, with "
      "the relevant rules to monitor events that modify user/group information.\n"
      "Example:\n"
      "\n```\n"
      "# printf \"\n"
      "-w /var/run/utmp -p wa -k session\n"
      "-w /var/log/wtmp -p wa -k session\n"
      "-w /var/log/btmp -p wa -k session\n"
      "\" >> /etc/audit/rules.d/50-session.rules\n"
      "```\n\n"
      "Merge and load the rules into active configuration:\n"
      "\n```\n"
      "# augenrules --load\n"
      "```\n\n"
      "Check if reboot is required.\n"
      "\n```\n"
      "# if [[ $(auditctl -s | grep \"enabled\") =~ \"2\" ]]; then printf \"Reboot "
      "required to load rules\\\\n\"; fi\n"
      "```\n\n"
    cis_benchmark: {
      profile_level: 2
      severity: LOW
    }
    scan_instructions:
      "scan_type_specific:{"
      "    instance_scanning:{"
      "        check_alternatives:{"
      "            file_checks:{"
      "                files_to_check:{single_file:{path: \"/etc/audit/audit.rules\"}}"
      "                content_entry:{"
      "                    match_type: ALL_MATCH_ANY_ORDER"
      "                    match_criteria:{"
      "                        filter_regex: \".*/var/run/utmp.*\""
      "                        expected_regex: \"\\\\s*-w\\\\s*/var/run/utmp\\\\s*-p\\\\s*wa\\\\s*(-F\\\\s*key=|-k)\\\\s*[!-~]*\\\\s*\""
      "                    }"
      "                    match_criteria:{"
      "                        filter_regex: \".*/var/log/wtmp.*\""
      "                        expected_regex: \"\\\\s*-w\\\\s*/var/log/wtmp\\\\s*-p\\\\s*wa\\\\s*(-F\\\\s*key=|-k)\\\\s*[!-~]*\\\\s*\""
      "                    }"
      "                    match_criteria:{"
      "                        filter_regex: \".*/var/log/btmp.*\""
      "                        expected_regex: \"\\\\s*-w\\\\s*/var/log/btmp\\\\s*-p\\\\s*wa\\\\s*(-F\\\\s*key=|-k)\\\\s*[!-~]*\\\\s*\""
      "                    }"
      "                }"
      "            }"
      "        }"
      "    }"
      "    image_scanning:{"
      "        check_alternatives:{"
      "            file_checks:{"
      "                files_to_check:{files_in_dir:{"
      "                    dir_path:\"/etc/audit/rules.d\""
      "                    recursive: true"
      "                    files_only: true"
      "                    filename_regex: \".*\\\\.rules\""
      "                }}"
      "                content_entry:{"
      "                    match_type: ALL_MATCH_ANY_ORDER"
      "                    match_criteria:{"
      "                        filter_regex: \".*/var/run/utmp.*\""
      "                        expected_regex: \"\\\\s*-w\\\\s*/var/run/utmp\\\\s*-p\\\\s*wa\\\\s*(-F\\\\s*key=|-k)\\\\s*[!-~]*\\\\s*\""
      "                    }"
      "                    match_criteria:{"
      "                        filter_regex: \".*/var/log/wtmp.*\""
      "                        expected_regex: \"\\\\s*-w\\\\s*/var/log/wtmp\\\\s*-p\\\\s*wa\\\\s*(-F\\\\s*key=|-k)\\\\s*[!-~]*\\\\s*\""
      "                    }"
      "                    match_criteria:{"
      "                        filter_regex: \".*/var/log/btmp.*\""
      "                        expected_regex: \"\\\\s*-w\\\\s*/var/log/btmp\\\\s*-p\\\\s*wa\\\\s*(-F\\\\s*key=|-k)\\\\s*[!-~]*\\\\s*\""
      "                    }"
      "                }"
      "            }"
      "        }"
      "    }"
      "}"
  }
}
benchmark_configs: {
  id: "login-logout-events-collected"
  compliance_note: {
    version: { cpe_uri: "cpe:/o:rockylinux:rockylinux:8.5" version: "2.0.0" benchmark_document: "CIS Rocky Linux 8" }
    title: "Ensure login and logout events are collected"
    description:
      "Monitor login and logout events. The parameters below track changes to files associated "
      "with login/logout events.\n"
      "/var/log/lastlog - maintain records of the last time a user successfully logged in.\n"
      "/var/run/faillock - directory maintains records of login failures via the"
      "pam_faillock module.\n"
    rationale:
      "Monitoring login/logout events could provide a system administrator with information "
      "associated with brute force attacks against user logins."
    remediation:
      "Edit or create a file in the /etc/audit/rules.d/ directory, ending in .rules extension, with "
      "the relevant rules to monitor events that modify user/group information.\n"
      "Example:\n"
      "\n```\n"
      "# printf \"\n"
      "-w /var/log/lastlog -p wa -k logins\n"
      "-w /var/run/faillock -p wa -k logins\n"
      "\" >> /etc/audit/rules.d/50-login.rules\n"
      "```\n\n"
      "Merge and load the rules into active configuration:\n"
      "\n```\n"
      "# augenrules --load\n"
      "```\n\n"
      "Check if reboot is required.\n"
      "\n```\n"
      "# if [[ $(auditctl -s | grep \"enabled\") =~ \"2\" ]]; then printf \"Reboot "
      "required to load rules\\\\n\"; fi\n"
      "```\n\n"
    cis_benchmark: {
      profile_level: 2
      severity: LOW
    }
    scan_instructions:
      "scan_type_specific:{"
      "    instance_scanning:{"
      "        check_alternatives:{"
      "            file_checks:{"
      "                files_to_check:{single_file:{path: \"/etc/audit/audit.rules\"}}"
      "                content_entry:{"
      "                    match_type: ALL_MATCH_ANY_ORDER"
      "                    match_criteria:{"
      "                        filter_regex: \".*/var/log/lastlog.*\""
      "                        expected_regex: \"\\\\s*-w\\\\s*/var/log/lastlog\\\\s*-p\\\\s*wa\\\\s*(-F\\\\s*key=|-k)\\\\s*[!-~]*\\\\s*\""
      "                    }"
      "                    match_criteria:{"
      "                        filter_regex: \".*/var/run/faillock.*\""
      "                        expected_regex: \"\\\\s*-w\\\\s*/var/run/faillock\\\\s*-p\\\\s*wa\\\\s*(-F\\\\s*key=|-k)\\\\s*[!-~]*\\\\s*\""
      "                    }"
      "                }"
      "            }"
      "        }"
      "    }"
      "    image_scanning:{"
      "        check_alternatives:{"
      "            file_checks:{"
      "                files_to_check:{files_in_dir:{"
      "                    dir_path:\"/etc/audit/rules.d\""
      "                    recursive: true"
      "                    files_only: true"
      "                    filename_regex: \".*\\\\.rules\""
      "                }}"
      "                content_entry:{"
      "                    match_type: ALL_MATCH_ANY_ORDER"
      "                    match_criteria:{"
      "                        filter_regex: \".*/var/log/lastlog.*\""
      "                        expected_regex: \"\\\\s*-w\\\\s*/var/log/lastlog\\\\s*-p\\\\s*wa\\\\s*(-F\\\\s*key=|-k)\\\\s*[!-~]*\\\\s*\""
      "                    }"
      "                    match_criteria:{"
      "                        filter_regex: \".*/var/run/faillock.*\""
      "                        expected_regex: \"\\\\s*-w\\\\s*/var/run/faillock\\\\s*-p\\\\s*wa\\\\s*(-F\\\\s*key=|-k)\\\\s*[!-~]*\\\\s*\""
      "                    }"
      "                }"
      "            }"
      "        }"
      "    }"
      "}"
  }
}
benchmark_configs: {
  id: "file-deletion-events-by-users-collected"
  compliance_note: {
    version: { cpe_uri: "cpe:/o:rockylinux:rockylinux:8.5" version: "2.0.0" benchmark_document: "CIS Rocky Linux 8" }
    title: "Ensure file deletion events by users are collected"
    description:
      "Monitor the use of system calls associated with the deletion or renaming of files and file "
      "attributes. This configuration statement sets up monitoring for:\n"
      "unlink - remove a file\n"
      "unlinkat - remove a file attribute\n"
      "rename - rename a file\n"
      "renameat rename a file attribute system calls and tags them with the identifier"
      "\"delete\"."
    rationale:
      "Monitoring these calls from non-privileged users could provide a system administrator "
      "with evidence that inappropriate removal of files and file attributes associated with "
      "protected files is occurring. While this audit option will look at all events, system "
      "administrators will want to look for specific privileged files that are being deleted or "
      "altered."
    remediation:
      "Create audit rules\n"
      "Edit or create a file in the /etc/audit/rules.d/ directory, ending in .rules extension, with "
      "the relevant rules to monitor successful file system mounts.\n"
      "64 Bit systems\n"
      "Example:\n"
      "\n```\n"
      "# {\n"
      "UID_MIN=$(awk '/^\\\\s*UID_MIN/{print $2}' /etc/login.defs)"
      "[ -n \"${UID_MIN}\" ] && printf \"\n"
      "-a always,exit -F arch=b64 -S rename,unlink,unlinkat,renameat -F "
      "auid>=${UID_MIN} -F auid!=unset -F key=delete\n"
      "-a always,exit -F arch=b32 -S rename,unlink,unlinkat,renameat -F "
      "auid>=${UID_MIN} -F auid!=unset -F key=delete\n"
      " >> /etc/audit/rules.d/50-delete.rules \\\n"
      "|| printf \"ERROR: Variable 'UID_MIN' is unset.\\\\n\"\n"
      "}\n"
      "```\n\n"
      "Load audit rules\n"
      "Merge and load the rules into active configuration:\n"
      "\n```\n"
      "# augenrules --load\n"
      "```\n\n"
      "Check if reboot is required.\n"
      "\n```\n"
      "# if [[ $(auditctl -s | grep \"enabled\") =~ \"2\" ]]; then printf \"Reboot "
      "required to load rules\\\\n\"; fi\n"
      "```\n\n"
      "32 Bit systems\n"
      "Follow the same procedures as for 64 bit systems and ignore any entries with b64.\n"
    cis_benchmark: {
      profile_level: 2
      severity: LOW
    }
    scan_instructions:
      "scan_type_specific:{"
      "    instance_scanning:{"
      "        check_alternatives:{"
      "            file_checks:{"
      "                files_to_check:{single_file:{path:\"/etc/login.defs\"}}"
      "                content_entry:{"
      "                    match_type: ALL_MATCH_ANY_ORDER"
      "                    match_criteria:{"
      "                        filter_regex: \"UID_MIN.*\""
      "                        expected_regex: \"UID_MIN\\\\s*1000\""
      "                    }"
      "                }"
      "                non_compliance_msg: \"If UID_MIN is set to a value different from 1000 in /etc/login.defs, this check will fail.\""
      "                file_display_command: \"grep '^UID_MIN' /etc/login.defs\""
      "            }"
      "            file_checks:{"
      "                files_to_check:{single_file:{path:\"/proc/cpuinfo\"}}"
      "                content_entry:{"
      "                    match_type: ALL_MATCH_ANY_ORDER"
      "                    match_criteria:{"
      "                        filter_regex: \"flags\\\\s*:.*\""
      "                        expected_regex: \".*\\\\slm\\\\s.*\""
      "                    }"
      "                }"
      "            }"
      "            file_checks:{"
      "                files_to_check:{single_file:{path: \"/etc/audit/audit.rules\"}}"
      "                content_entry:{"
      "                    match_type: ALL_MATCH_ANY_ORDER"
      "                    match_criteria:{"
      "                        filter_regex: \".*b32.*rename.*\""
      "                        expected_regex: \"\\\\s*-a\\\\s*always,exit\\\\s*-F\\\\s*arch=b32\\\\s*-S\\\\s*([a-zA-Z_]+,)*rename(,[a-zA-Z_]+)*\\\\s*-F\\\\s*auid>=1000\\\\s*-F\\\\s*auid!=(unset|-1|4294967295)\\\\s*(-F\\\\s*key=|-k)\\\\s*[!-~]*\\\\s*\""
      "                    }"
      "                    match_criteria:{"
      "                        filter_regex: \".*b32.*renameat.*\""
      "                        expected_regex: \"\\\\s*-a\\\\s*always,exit\\\\s*-F\\\\s*arch=b32\\\\s*-S\\\\s*([a-zA-Z_]+,)*renameat(,[a-zA-Z_]+)*\\\\s*-F\\\\s*auid>=1000\\\\s*-F\\\\s*auid!=(unset|-1|4294967295)\\\\s*(-F\\\\s*key=|-k)\\\\s*[!-~]*\\\\s*\""
      "                    }"
      "                    match_criteria:{"
      "                        filter_regex: \".*b32.*unlink.*\""
      "                        expected_regex: \"\\\\s*-a\\\\s*always,exit\\\\s*-F\\\\s*arch=b32\\\\s*-S\\\\s*([a-zA-Z_]+,)*unlink(,[a-zA-Z_]+)*\\\\s*-F\\\\s*auid>=1000\\\\s*-F\\\\s*auid!=(unset|-1|4294967295)\\\\s*(-F\\\\s*key=|-k)\\\\s*[!-~]*\\\\s*\""
      "                    }"
      "                    match_criteria:{"
      "                        filter_regex: \".*b32.*unlinkat.*\""
      "                        expected_regex: \"\\\\s*-a\\\\s*always,exit\\\\s*-F\\\\s*arch=b32\\\\s*-S\\\\s*([a-zA-Z_]+,)*unlinkat(,[a-zA-Z_]+)*\\\\s*-F\\\\s*auid>=1000\\\\s*-F\\\\s*auid!=(unset|-1|4294967295)\\\\s*(-F\\\\s*key=|-k)\\\\s*[!-~]*\\\\s*\""
      "                    }"
      "                    match_criteria:{"
      "                        filter_regex: \".*b64.*rename.*\""
      "                        expected_regex: \"\\\\s*-a\\\\s*always,exit\\\\s*-F\\\\s*arch=b64\\\\s*-S\\\\s*([a-zA-Z_]+,)*rename(,[a-zA-Z_]+)*\\\\s*-F\\\\s*auid>=1000\\\\s*-F\\\\s*auid!=(unset|-1|4294967295)\\\\s*(-F\\\\s*key=|-k)\\\\s*[!-~]*\\\\s*\""
      "                    }"
      "                    match_criteria:{"
      "                        filter_regex: \".*b64.*renameat.*\""
      "                        expected_regex: \"\\\\s*-a\\\\s*always,exit\\\\s*-F\\\\s*arch=b64\\\\s*-S\\\\s*([a-zA-Z_]+,)*renameat(,[a-zA-Z_]+)*\\\\s*-F\\\\s*auid>=1000\\\\s*-F\\\\s*auid!=(unset|-1|4294967295)\\\\s*(-F\\\\s*key=|-k)\\\\s*[!-~]*\\\\s*\""
      "                    }"
      "                    match_criteria:{"
      "                        filter_regex: \".*b64.*unlink.*\""
      "                        expected_regex: \"\\\\s*-a\\\\s*always,exit\\\\s*-F\\\\s*arch=b64\\\\s*-S\\\\s*([a-zA-Z_]+,)*unlink(,[a-zA-Z_]+)*\\\\s*-F\\\\s*auid>=1000\\\\s*-F\\\\s*auid!=(unset|-1|4294967295)\\\\s*(-F\\\\s*key=|-k)\\\\s*[!-~]*\\\\s*\""
      "                    }"
      "                    match_criteria:{"
      "                        filter_regex: \".*b64.*unlinkat.*\""
      "                        expected_regex: \"\\\\s*-a\\\\s*always,exit\\\\s*-F\\\\s*arch=b64\\\\s*-S\\\\s*([a-zA-Z_]+,)*unlinkat(,[a-zA-Z_]+)*\\\\s*-F\\\\s*auid>=1000\\\\s*-F\\\\s*auid!=(unset|-1|4294967295)\\\\s*(-F\\\\s*key=|-k)\\\\s*[!-~]*\\\\s*\""
      "                    }"
      "                }"
      "            }"
      "        }"
      "        check_alternatives:{"
      "            file_checks:{"
      "                files_to_check:{single_file:{path:\"/etc/login.defs\"}}"
      "                content_entry:{"
      "                    match_type: ALL_MATCH_ANY_ORDER"
      "                    match_criteria:{"
      "                        filter_regex: \"UID_MIN.*\""
      "                        expected_regex: \"UID_MIN\\\\s*1000\""
      "                    }"
      "                }"
      "                non_compliance_msg: \"If UID_MIN is set to a value different from 1000 in /etc/login.defs, this check will fail.\""
      "                file_display_command: \"grep '^UID_MIN' /etc/login.defs\""
      "            }"
      "            file_checks:{"
      "                files_to_check:{single_file:{path: \"/etc/audit/audit.rules\"}}"
      "                content_entry:{"
      "                    match_type: ALL_MATCH_ANY_ORDER"
      "                    match_criteria:{"
      "                        filter_regex: \".*b32.*rename.*\""
      "                        expected_regex: \"\\\\s*-a\\\\s*always,exit\\\\s*-F\\\\s*arch=b32\\\\s*-S\\\\s*([a-zA-Z_]+,)*rename(,[a-zA-Z_]+)*\\\\s*-F\\\\s*auid>=1000\\\\s*-F\\\\s*auid!=(unset|-1|4294967295)\\\\s*(-F\\\\s*key=|-k)\\\\s*[!-~]*\\\\s*\""
      "                    }"
      "                    match_criteria:{"
      "                        filter_regex: \".*b32.*renameat.*\""
      "                        expected_regex: \"\\\\s*-a\\\\s*always,exit\\\\s*-F\\\\s*arch=b32\\\\s*-S\\\\s*([a-zA-Z_]+,)*renameat(,[a-zA-Z_]+)*\\\\s*-F\\\\s*auid>=1000\\\\s*-F\\\\s*auid!=(unset|-1|4294967295)\\\\s*(-F\\\\s*key=|-k)\\\\s*[!-~]*\\\\s*\""
      "                    }"
      "                    match_criteria:{"
      "                        filter_regex: \".*b32.*unlink.*\""
      "                        expected_regex: \"\\\\s*-a\\\\s*always,exit\\\\s*-F\\\\s*arch=b32\\\\s*-S\\\\s*([a-zA-Z_]+,)*unlink(,[a-zA-Z_]+)*\\\\s*-F\\\\s*auid>=1000\\\\s*-F\\\\s*auid!=(unset|-1|4294967295)\\\\s*(-F\\\\s*key=|-k)\\\\s*[!-~]*\\\\s*\""
      "                    }"
      "                    match_criteria:{"
      "                        filter_regex: \".*b32.*unlinkat.*\""
      "                        expected_regex: \"\\\\s*-a\\\\s*always,exit\\\\s*-F\\\\s*arch=b32\\\\s*-S\\\\s*([a-zA-Z_]+,)*unlinkat(,[a-zA-Z_]+)*\\\\s*-F\\\\s*auid>=1000\\\\s*-F\\\\s*auid!=(unset|-1|4294967295)\\\\s*(-F\\\\s*key=|-k)\\\\s*[!-~]*\\\\s*\""
      "                    }"
      "                }"
      "            }"
      "        }"
      "    }"
      "    image_scanning:{"
      "        check_alternatives:{"
      "            file_checks:{"
      "                files_to_check:{single_file:{path:\"/etc/login.defs\"}}"
      "                content_entry:{"
      "                    match_type: ALL_MATCH_ANY_ORDER"
      "                    match_criteria:{"
      "                        filter_regex: \"UID_MIN.*\""
      "                        expected_regex: \"UID_MIN\\\\s*1000\""
      "                    }"
      "                }"
      "                non_compliance_msg: \"If UID_MIN is set to a value different from 1000 in /etc/login.defs, this check will fail.\""
      "                file_display_command: \"grep '^UID_MIN' /etc/login.defs\""
      "            }"
      "            file_checks:{"
      "                files_to_check:{files_in_dir:{"
      "                    dir_path:\"/etc/audit/rules.d\""
      "                    recursive: true"
      "                    files_only: true"
      "                    filename_regex: \".*\\\\.rules\""
      "                }}"
      "                content_entry:{"
      "                    match_type: ALL_MATCH_ANY_ORDER"
      "                    match_criteria:{"
      "                        filter_regex: \".*rename.*\""
      "                        expected_regex: \"\\\\s*-a\\\\s*always,exit\\\\s*-F\\\\s*arch=b[2346]{2}\\\\s*-S\\\\s*([a-zA-Z_]+,)*rename(,[a-zA-Z_]+)*\\\\s*-F\\\\s*auid>=1000\\\\s*-F\\\\s*auid!=(unset|-1|4294967295)\\\\s*(-F\\\\s*key=|-k)\\\\s*[!-~]*\\\\s*\""
      "                    }"
      "                    match_criteria:{"
      "                        filter_regex: \".*renameat.*\""
      "                        expected_regex: \"\\\\s*-a\\\\s*always,exit\\\\s*-F\\\\s*arch=b[2346]{2}\\\\s*-S\\\\s*([a-zA-Z_]+,)*renameat(,[a-zA-Z_]+)*\\\\s*-F\\\\s*auid>=1000\\\\s*-F\\\\s*auid!=(unset|-1|4294967295)\\\\s*(-F\\\\s*key=|-k)\\\\s*[!-~]*\\\\s*\""
      "                    }"
      "                    match_criteria:{"
      "                        filter_regex: \".*unlink.*\""
      "                        expected_regex: \"\\\\s*-a\\\\s*always,exit\\\\s*-F\\\\s*arch=b[2346]{2}\\\\s*-S\\\\s*([a-zA-Z_]+,)*unlink(,[a-zA-Z_]+)*\\\\s*-F\\\\s*auid>=1000\\\\s*-F\\\\s*auid!=(unset|-1|4294967295)\\\\s*(-F\\\\s*key=|-k)\\\\s*[!-~]*\\\\s*\""
      "                    }"
      "                    match_criteria:{"
      "                        filter_regex: \".*unlinkat.*\""
      "                        expected_regex: \"\\\\s*-a\\\\s*always,exit\\\\s*-F\\\\s*arch=b[2346]{2}\\\\s*-S\\\\s*([a-zA-Z_]+,)*unlinkat(,[a-zA-Z_]+)*\\\\s*-F\\\\s*auid>=1000\\\\s*-F\\\\s*auid!=(unset|-1|4294967295)\\\\s*(-F\\\\s*key=|-k)\\\\s*[!-~]*\\\\s*\""
      "                    }"
      "                }"
      "            }"
      "        }"
      "    }"
      "}"
  }
}
benchmark_configs: {
  id: "events-modifying-system-mac-collected"
  compliance_note: {
    version: { cpe_uri: "cpe:/o:rockylinux:rockylinux:8.5" version: "2.0.0" benchmark_document: "CIS Rocky Linux 8" }
    title: "Ensure events that modify the system's Mandatory Access Controls are collected"
    description:
      "Monitor SELinux, an implementation of mandatory access controls. The parameters below "
      "monitor any write access (potential additional, deletion or modification of files in the "
      "directory) or attribute changes to the /etc/selinux/ and /usr/share/selinux/ "
      "directories.\n"
      "Note: If a different Mandatory Access Control method is used, changes to the "
      "corresponding directories should be audited. "
    rationale:
      "Changes to files in the /etc/selinux/ and /usr/share/selinux/ directories could indicate "
      "that an unauthorized user is attempting to modify access controls and change security "
      "contexts, leading to a compromise of the system."
    remediation:
      "Edit or create a file in the /etc/audit/rules.d/ directory, ending in .rules extension, with "
      "the relevant rules to monitor events that modify the system's Mandatory Access Controls.\n"
      "Example:\n"
      "\n```\n"
      "# printf \"\n"
      "-w /etc/selinux -p wa -k MAC-policy\n"
      "-w /usr/share/selinux -p wa -k MAC-policy\n"
      "\" >> /etc/audit/rules.d/50-login.rules\n"
      "```\n\n"
      "Merge and load the rules into active configuration:\n"
      "\n```\n"
      "# augenrules --load\n"
      "```\n\n"
      "Check if reboot is required.\n"
      "\n```\n"
      "# if [[ $(auditctl -s | grep \"enabled\") =~ \"2\" ]]; then printf \"Reboot "
      "required to load rules\\\\n\"; fi\n"
      "```\n\n"
    cis_benchmark: {
      profile_level: 2
      severity: LOW
    }
    scan_instructions:
      "scan_type_specific:{"
      "    instance_scanning:{"
      "        check_alternatives:{"
      "            file_checks:{"
      "                files_to_check:{single_file:{path: \"/etc/audit/audit.rules\"}}"
      "                content_entry:{"
      "                    match_type: ALL_MATCH_ANY_ORDER"
      "                    match_criteria:{"
      "                        filter_regex: \".*/etc/selinux.*\""
      "                        expected_regex: \"\\\\s*-w\\\\s*/etc/selinux\\\\s*-p\\\\s*wa\\\\s*(-F\\\\s*key=|-k)\\\\s*[!-~]*\\\\s*\""
      "                    }"
      "                    match_criteria:{"
      "                        filter_regex: \".*/usr/share/selinux.*\""
      "                        expected_regex: \"\\\\s*-w\\\\s*/usr/share/selinux\\\\s*-p\\\\s*wa\\\\s*(-F\\\\s*key=|-k)\\\\s*[!-~]*\\\\s*\""
      "                    }"
      "                }"
      "            }"
      "        }"
      "    }"
      "    image_scanning:{"
      "        check_alternatives:{"
      "            file_checks:{"
      "                files_to_check:{files_in_dir:{"
      "                    dir_path:\"/etc/audit/rules.d\""
      "                    recursive: true"
      "                    files_only: true"
      "                    filename_regex: \".*\\\\.rules\""
      "                }}"
      "                content_entry:{"
      "                    match_type: ALL_MATCH_ANY_ORDER"
      "                    match_criteria:{"
      "                        filter_regex: \".*/etc/selinux.*\""
      "                        expected_regex: \"\\\\s*-w\\\\s*/etc/selinux\\\\s*-p\\\\s*wa\\\\s*(-F\\\\s*key=|-k)\\\\s*[!-~]*\\\\s*\""
      "                    }"
      "                    match_criteria:{"
      "                        filter_regex: \".*/usr/share/selinux.*\""
      "                        expected_regex: \"\\\\s*-w\\\\s*/usr/share/selinux\\\\s*-p\\\\s*wa\\\\s*(-F\\\\s*key=|-k)\\\\s*[!-~]*\\\\s*\""
      "                    }"
      "                }"
      "            }"
      "        }"
      "    }"
      "}"
  }
}
benchmark_configs: {
  id: "attempts-to-use-chcon-recorded"
  compliance_note: {
    version: { cpe_uri: "cpe:/o:rockylinux:rockylinux:8.5" version: "2.0.0" benchmark_document: "CIS Rocky Linux 8" }
    title: "Ensure successful and unsuccessful attempts to use the chcon command are recorded"
    description:
      "The operating system must generate audit records for successful/unsuccessful uses of the "
      "chcon command."
    rationale:
      "Without generating audit records that are specific to the security and mission needs of the "
      "organization, it would be difficult to establish, correlate, and investigate the events relating "
      "to an incident or identify those responsible for one.\n"
      "Audit records can be generated from various components within the information system "
      "(e.g., module or policy filter)."
    remediation:
      "Create audit rules"
      "Edit or create a file in the /etc/audit/rules.d/ directory, ending in .rules extension, with "
      "the relevant rules to monitor successful and unsuccessful attempts to use the chcon "
      "command.\n"
      "64 Bit systems\n"
      "Example:\n"
      "\n```\n"
      "# {\n"
      "UID_MIN=$(awk '/^\\\\s*UID_MIN/{print $2}' /etc/login.defs)"
      "[ -n \"${UID_MIN}\" ] && printf \""
      "-a always,exit -F path=/usr/bin/chcon -F perm=x -F auid>=${UID_MIN} -F"
      "auid!=unset -k perm_chng"
      "\" >> /etc/audit/rules.d/50-perm_chng.rules \\"
      "|| printf \"ERROR: Variable 'UID_MIN' is unset.\\\n\"\n"
      "}\n"
      "```\n\n"
      "Load audit rules\n"
      "Merge and load the rules into active configuration:\n"
      "\n```\n"
      "# augenrules --load\n"
      "```\n\n"
      "Check if reboot is required.\n"
      "\n```\n"
      "# if [[ $(auditctl -s | grep \"enabled\") =~ \"2\" ]]; then printf \"Reboot\""
      "required to load rules\\\\n\"; fi\n"
      "```\n\n"
      "32 Bit systems\n"
      "Follow the same procedures as for 64 bit systems and ignore any entries with b64."
    cis_benchmark: {
      profile_level: 2
      severity: LOW
    }
    scan_instructions:
      "scan_type_specific:{"
      "    instance_scanning:{"
      "        check_alternatives:{"
      "            file_checks:{"
      "                files_to_check:{single_file:{path: \"/etc/audit/audit.rules\"}}"
      "                content_entry:{"
      "                    match_type: ALL_MATCH_ANY_ORDER"
      "                    match_criteria:{"
      "                        filter_regex: \".*/usr/bin/chcon.*\""
      "                        expected_regex: \"^\\\\s*-a\\\\s*always,exit\\\\s*-F\\\\s*path=/usr/bin/chcon\\\\s*-F\\\\s*perm=x\\\\s*-F\\\\s*auid>=1000\\\\s*-F\\\\s*auid!=(unset|-1|4294967295)\\\\s*(\\\\s*(-F\\\\s*key=|-k))\\\\s*[!-~]*\\\\s*$\""
      "                    }"
      "                }"
      "            }"
      "        }"
      "    }"
      "    image_scanning:{"
      "        check_alternatives:{"
      "            file_checks:{"
      "                files_to_check:{"
      "                    files_in_dir:{"
      "                        dir_path:\"/etc/audit/rules.d\""
      "                        recursive: true"
      "                        files_only: true"
      "                        filename_regex: \".*\\\\.rules\""
      "                    }"
      "                }"
      "                content_entry:{"
      "                    match_type: ALL_MATCH_ANY_ORDER"
      "                    match_criteria:{"
      "                        filter_regex: \".*/usr/bin/chcon.*\""
      "                        expected_regex: \"^\\\\s*-a\\\\s*always,exit\\\\s*-F\\\\s*path=/usr/bin/chcon\\\\s*-F\\\\s*perm=x\\\\s*-F\\\\s*auid>=1000\\\\s*-F\\\\s*auid!=(unset|-1|4294967295)\\\\s*(\\\\s*(-F\\\\s*key=|-k))\\\\s*[!-~]*\\\\s*$\""
      "                    }"
      "                }"
      "            }"
      "        }"
      "    }"
      "}"
  }
}
benchmark_configs: {
  id: "attempts-to-use-setfacl-recorded"
  compliance_note: {
    version: { cpe_uri: "cpe:/o:rockylinux:rockylinux:8.5" version: "2.0.0" benchmark_document: "CIS Rocky Linux 8" }
    title: "Ensure successful and unsuccessful attempts to use the setfacl command are recorded"
    description:
      "The operating system must generate audit records for successful/unsuccessful uses of the"
      "setfacl command"
    rationale:
      "Without generating audit records that are specific to the security and mission needs of the "
      "organization, it would be difficult to establish, correlate, and investigate the events relating "
      "to an incident or identify those responsible for one.\n"
      "Audit records can be generated from various components within the information system "
      "(e.g., module or policy filter)."
    remediation:
      "Create audit rules"
      "Edit or create a file in the /etc/audit/rules.d/ directory, ending in .rules extension, with "
      "the relevant rules to monitor successful and unsuccessful attempts to use the setfacl "
      "command.\n"
      "64 Bit systems\n"
      "Example:\n"
      "\n```\n"
      "# {\n"
      "UID_MIN=$(awk '/^\\\\s*UID_MIN/{print $2}' /etc/login.defs)"
      "[ -n \"${UID_MIN}\" ] && printf \""
      "-a always,exit -F path=/usr/bin/setfacl -F perm=x -F auid>=${UID_MIN} -F"
      "auid!=unset -k perm_chng"
      "\" >> /etc/audit/rules.d/50-priv_cmd.rules \\"
      "|| printf \"ERROR: Variable 'UID_MIN' is unset.\\\n\"\n"
      "}\n"
      "```\n\n"
      "Load audit rules\n"
      "Merge and load the rules into active configuration:\n"
      "\n```\n"
      "# augenrules --load\n"
      "```\n\n"
      "Check if reboot is required.\n"
      "\n```\n"
      "# if [[ $(auditctl -s | grep \"enabled\") =~ \"2\" ]]; then printf \"Reboot\""
      "required to load rules\\\\n\"; fi\n"
      "```\n\n"
      "32 Bit systems\n"
      "Follow the same procedures as for 64 bit systems and ignore any entries with b64."
    cis_benchmark: {
      profile_level: 2
      severity: LOW
    }
    scan_instructions:
      "scan_type_specific:{"
      "    instance_scanning:{"
      "        check_alternatives:{"
      "            file_checks:{"
      "                files_to_check:{single_file:{path: \"/etc/audit/audit.rules\"}}"
      "                content_entry:{"
      "                    match_type: ALL_MATCH_ANY_ORDER"
      "                    match_criteria:{"
      "                        filter_regex: \".*/usr/bin/setfacl.*\""
      "                        expected_regex: \"^\\\\s*-a\\\\s*always,exit\\\\s*-F\\\\s*path=/usr/bin/setfacl\\\\s*-F\\\\s*perm=x\\\\s*-F\\\\s*auid>=1000\\\\s*-F\\\\s*auid!=(unset|-1|4294967295)\\\\s*(\\\\s*(-F\\\\s*key=|-k))\\\\s*[!-~]*\\\\s*$\""
      "                    }"
      "                }"
      "            }"
      "        }"
      "    }"
      "    image_scanning:{"
      "        check_alternatives:{"
      "            file_checks:{"
      "                files_to_check:{"
      "                    files_in_dir:{"
      "                        dir_path:\"/etc/audit/rules.d\""
      "                        recursive: true"
      "                        files_only: true"
      "                        filename_regex: \".*\\\\.rules\""
      "                    }"
      "                }"
      "                content_entry:{"
      "                    match_type: ALL_MATCH_ANY_ORDER"
      "                    match_criteria:{"
      "                        filter_regex: \".*/usr/bin/setfacl.*\""
      "                        expected_regex: \"^\\\\s*-a\\\\s*always,exit\\\\s*-F\\\\s*path=/usr/bin/setfacl\\\\s*-F\\\\s*perm=x\\\\s*-F\\\\s*auid>=1000\\\\s*-F\\\\s*auid!=(unset|-1|4294967295)\\\\s*(\\\\s*(-F\\\\s*key=|-k))\\\\s*[!-~]*\\\\s*$\""
      "                    }"
      "                }"
      "            }"
      "        }"
      "    }"
      "}"
  }
}
benchmark_configs: {
  id: "attempts-to-use-chacl-recorded"
  compliance_note: {
    version: { cpe_uri: "cpe:/o:rockylinux:rockylinux:8.5" version: "2.0.0" benchmark_document: "CIS Rocky Linux 8" }
    title: "Ensure successful and unsuccessful attempts to use the chacl command are recorded"
    description:
      "The operating system must generate audit records for successful/unsuccessful uses of the"
      "chacl command"
    rationale:
      "Without generating audit records that are specific to the security and mission needs of the "
      "organization, it would be difficult to establish, correlate, and investigate the events relating "
      "to an incident or identify those responsible for one.\n"
      "Audit records can be generated from various components within the information system "
      "(e.g., module or policy filter)."
    remediation:
      "Create audit rules"
      "Edit or create a file in the /etc/audit/rules.d/ directory, ending in .rules extension, with "
      "the relevant rules to monitor successful and unsuccessful attempts to use the chacl "
      "command.\n"
      "64 Bit systems\n"
      "Example:\n"
      "\n```\n"
      "# {\n"
      "UID_MIN=$(awk '/^\\\\s*UID_MIN/{print $2}' /etc/login.defs)"
      "[ -n \"${UID_MIN}\" ] && printf \""
      "-a always,exit -F path=/usr/bin/chacl -F perm=x -F auid>=${UID_MIN} -F"
      "auid!=unset -k perm_chng"
      "\" >> /etc/audit/rules.d/50-perm_chng.rules \\"
      "|| printf \"ERROR: Variable 'UID_MIN' is unset.\\\n\"\n"
      "}\n"
      "```\n\n"
      "Load audit rules\n"
      "Merge and load the rules into active configuration:\n"
      "\n```\n"
      "# augenrules --load\n"
      "```\n\n"
      "Check if reboot is required.\n"
      "\n```\n"
      "# if [[ $(auditctl -s | grep \"enabled\") =~ \"2\" ]]; then printf \"Reboot\""
      "required to load rules\\\\n\"; fi\n"
      "```\n\n"
      "32 Bit systems\n"
      "Follow the same procedures as for 64 bit systems and ignore any entries with b64."
    cis_benchmark: {
      profile_level: 2
      severity: LOW
    }
    scan_instructions:
      "scan_type_specific:{"
      "    instance_scanning:{"
      "        check_alternatives:{"
      "            file_checks:{"
      "                files_to_check:{single_file:{path: \"/etc/audit/audit.rules\"}}"
      "                content_entry:{"
      "                    match_type: ALL_MATCH_ANY_ORDER"
      "                    match_criteria:{"
      "                        filter_regex: \".*/usr/bin/chacl.*\""
      "                        expected_regex: \"^\\\\s*-a\\\\s*always,exit\\\\s*-F\\\\s*path=/usr/bin/chacl\\\\s*-F\\\\s*perm=x\\\\s*-F\\\\s*auid>=1000\\\\s*-F\\\\s*auid!=(unset|-1|4294967295)\\\\s*(\\\\s*(-F\\\\s*key=|-k))\\\\s*[!-~]*\\\\s*$\""
      "                    }"
      "                }"
      "            }"
      "        }"
      "    }"
      "    image_scanning:{"
      "        check_alternatives:{"
      "            file_checks:{"
      "                files_to_check:{"
      "                    files_in_dir:{"
      "                        dir_path:\"/etc/audit/rules.d\""
      "                        recursive: true"
      "                        files_only: true"
      "                        filename_regex: \".*\\\\.rules\""
      "                    }"
      "                }"
      "                content_entry:{"
      "                    match_type: ALL_MATCH_ANY_ORDER"
      "                    match_criteria:{"
      "                        filter_regex: \".*/usr/bin/chacl.*\""
      "                        expected_regex: \"^\\\\s*-a\\\\s*always,exit\\\\s*-F\\\\s*path=/usr/bin/chacl\\\\s*-F\\\\s*perm=x\\\\s*-F\\\\s*auid>=1000\\\\s*-F\\\\s*auid!=(unset|-1|4294967295)\\\\s*(\\\\s*(-F\\\\s*key=|-k))\\\\s*[!-~]*\\\\s*$\""
      "                    }"
      "                }"
      "            }"
      "        }"
      "    }"
      "}"
  }
}
benchmark_configs: {
  id: "attempts-to-use-usermod-recorded"
  compliance_note: {
    version: { cpe_uri: "cpe:/o:rockylinux:rockylinux:8.5" version: "2.0.0" benchmark_document: "CIS Rocky Linux 8" }
    title: "Ensure successful and unsuccessful attempts to use the usermod command are recorded"
    description:
      "The operating system must generate audit records for successful/unsuccessful uses of the"
      "usermod command"
    rationale:
      "Without generating audit records that are specific to the security and mission needs of the "
      "organization, it would be difficult to establish, correlate, and investigate the events relating "
      "to an incident or identify those responsible for one.\n"
      "Audit records can be generated from various components within the information system "
      "(e.g., module or policy filter)."
    remediation:
      "Create audit rules"
      "Edit or create a file in the /etc/audit/rules.d/ directory, ending in .rules extension, with "
      "the relevant rules to monitor successful and unsuccessful attempts to use the chacl "
      "command.\n"
      "64 Bit systems\n"
      "Example:\n"
      "\n```\n"
      "# {\n"
      "UID_MIN=$(awk '/^\\\\s*UID_MIN/{print $2}' /etc/login.defs)"
      "[ -n \"${UID_MIN}\" ] && printf \""
      "-a always,exit -F path=/usr/sbin/usermod -F perm=x -F auid>=${UID_MIN} -F"
      "auid!=unset -k usermod"
      "\" >> /etc/audit/rules.d/50-usermod.rules \\"
      "|| printf \"ERROR: Variable 'UID_MIN' is unset.\\\n\"\n"
      "}\n"
      "```\n\n"
      "Load audit rules\n"
      "Merge and load the rules into active configuration:\n"
      "\n```\n"
      "# augenrules --load\n"
      "```\n\n"
      "Check if reboot is required.\n"
      "\n```\n"
      "# if [[ $(auditctl -s | grep \"enabled\") =~ \"2\" ]]; then printf \"Reboot\""
      "required to load rules\\\\n\"; fi\n"
      "```\n\n"
      "32 Bit systems\n"
      "Follow the same procedures as for 64 bit systems and ignore any entries with b64."
    cis_benchmark: {
      profile_level: 2
      severity: LOW
    }
    scan_instructions:
      "scan_type_specific:{"
      "    instance_scanning:{"
      "        check_alternatives:{"
      "            file_checks:{"
      "                files_to_check:{single_file:{path: \"/etc/audit/audit.rules\"}}"
      "                content_entry:{"
      "                    match_type: ALL_MATCH_ANY_ORDER"
      "                    match_criteria:{"
      "                        filter_regex: \".*/usr/sbin/usermod.*\""
      "                        expected_regex: \"^\\\\s*-a\\\\s*always,exit\\\\s*-F\\\\s*path=/usr/sbin/usermod\\\\s*-F\\\\s*perm=x\\\\s*-F\\\\s*auid>=1000\\\\s*-F\\\\s*auid!=(unset|-1|4294967295)\\\\s*(\\\\s*(-F\\\\s*key=|-k))\\\\s*[!-~]*\\\\s*$\""
      "                    }"
      "                }"
      "            }"
      "        }"
      "    }"
      "    image_scanning:{"
      "        check_alternatives:{"
      "            file_checks:{"
      "                files_to_check:{"
      "                    files_in_dir:{"
      "                        dir_path:\"/etc/audit/rules.d\""
      "                        recursive: true"
      "                        files_only: true"
      "                        filename_regex: \".*\\\\.rules\""
      "                    }"
      "                }"
      "                content_entry:{"
      "                    match_type: ALL_MATCH_ANY_ORDER"
      "                    match_criteria:{"
      "                        filter_regex: \".*/usr/sbin/usermod.*\""
      "                        expected_regex: \"^\\\\s*-a\\\\s*always,exit\\\\s*-F\\\\s*path=/usr/sbin/usermod\\\\s*-F\\\\s*perm=x\\\\s*-F\\\\s*auid>=1000\\\\s*-F\\\\s*auid!=(unset|-1|4294967295)\\\\s*(\\\\s*(-F\\\\s*key=|-k))\\\\s*[!-~]*\\\\s*$\""
      "                    }"
      "                }"
      "            }"
      "        }"
      "    }"
      "}"
  }
}
benchmark_configs: {
  id: "ensure-kernel-module-load-unload-edit-collected"
  compliance_note: {
    version: { cpe_uri: "cpe:/o:rockylinux:rockylinux:8.5" version: "2.0.0" benchmark_document: "CIS Rocky Linux 8" }
    title: "Ensure kernel module loading unloading and modification is collected"
    description:
      "Monitor the loading and unloading of kernel modules. All the loading / listing / dependency "
      "checking of modules is done by kmod via symbolic links.\n"
      "The following system calls control loading and unloading of modules: \n"
      "init_module - load a module\n"
      "finit_module - load a module (used when the overhead of using cryptographically "
      "signed modules to determine the authenticity of a module can be avoided)\n"
      "delete_module - delete a module\n"
      "create_module - create a loadable module entry\n"
      "query_module - query the kernel for various bits pertaining to modules\n"
      "Any execution of the loading and unloading module programs and system calls will trigger "
      "an audit record with an identifier of modules."
    rationale:
      "Monitoring the use of all the various ways to manipulate kernel modules could provide "
      "system administrators with evidence that an unauthorized change was made to a kernel "
      "module, possibly compromising the security of the system."
    remediation:
      "Create audit rules"
      "Edit or create a file in the /etc/audit/rules.d/ directory, ending in .rules extension, with "
      "the relevant rules to monitor kernel module modification.\n"
      "64 Bit systems\n"
      "Example:\n"
      "\n```\n"
      "# {\n"
      "UID_MIN=$(awk '/^\\\\s*UID_MIN/{print $2}' /etc/login.defs)\n"
      "[ -n \"${UID_MIN}\" ] && printf \"\n"
      "-a always,exit -F arch=b64 -S\n"
      "init_module,finit_module,delete_module,create_module,query_module -F\n"
      "auid>=${UID_MIN} -F auid!=unset -k kernel_modules\n"
      "-a always,exit -F path=/usr/bin/kmod -F perm=x -F auid>=${UID_MIN} -F\n"
      "auid!=unset -k kernel_modules\n"
      "\" >> /etc/audit/rules.d/50-kernel_modules.rules \\"
      "|| printf \"ERROR: Variable 'UID_MIN' is unset.\\\\n\"\n"
      "}\n"
      "```\n\n"
      "Load audit rules\n"
      "Merge and load the rules into active configuration:\n"
      "\n```\n"
      "# augenrules --load\n"
      "```\n\n"
      "Check if reboot is required.\n"
      "\n```\n"
      "# if [[ $(auditctl -s | grep \"enabled\") =~ \"2\" ]]; then printf \"Reboot\""
      "required to load rules\\\\n\"; fi\n"
      "```\n\n"
      "32 Bit systems\n"
      "Follow the same procedures as for 64 bit systems and ignore any entries with b64."
    cis_benchmark: {
      profile_level: 2
      severity: LOW
    }
    scan_instructions:
      "scan_type_specific:{"
      "    instance_scanning:{"
      "        check_alternatives:{"
      "            file_checks:{"
      "                files_to_check:{single_file:{path:\"/etc/login.defs\"}}"
      "                content_entry:{"
      "                    match_type: ALL_MATCH_ANY_ORDER"
      "                    match_criteria:{"
      "                        filter_regex: \"UID_MIN.*\""
      "                        expected_regex: \"UID_MIN\\\\s*1000\\\\s*\""
      "                    }"
      "                }"
      "                non_compliance_msg: \"If UID_MIN is set to a value different from 1000 in /etc/login.defs, this check will fail.\""
      "                file_display_command: \"grep '^UID_MIN' /etc/login.defs\""
      "            }"
      "            file_checks:{"
      "                files_to_check:{single_file:{path:\"/proc/cpuinfo\"}}"
      "                content_entry:{"
      "                    match_type: ALL_MATCH_ANY_ORDER"
      "                    match_criteria:{"
      "                        filter_regex: \"flags\\\\s*:.*\""
      "                        expected_regex: \".*\\\\slm\\\\s.*\""
      "                    }"
      "                }"
      "            }"
      "            file_checks:{"
      "                files_to_check:{single_file:{path: \"/etc/audit/audit.rules\"}}"
      "                content_entry:{"
      "                    match_type: ALL_MATCH_ANY_ORDER"
      "                    match_criteria:{"
      "                        filter_regex: \".*/usr/bin/kmod.*\""
      "                        expected_regex: \"\\\\s*-a\\\\s*always,exit\\\\s*-F\\\\s*path=/usr/bin/kmod\\\\s*-F\\\\s*perm=x\\\\s*-F\\\\s*auid>=1000\\\\s*-F\\\\s*auid!=(unset|-1|4294967295)\\\\s*(-F\\\\s*key=|-k)\\\\s*[!-~]*\\\\s*\""
      "                    }"
      "                    match_criteria:{"
      "                        filter_regex: \".*b32.*init_module.*\""
      "                        expected_regex: \"\\\\s*-a\\\\s*always,exit\\\\s*-F\\\\s*arch=b32\\\\s*-S\\\\s*([a-zA-Z_]+,)*init_module(,[a-zA-Z_]+)*\\\\s*-F\\\\s*auid>=1000\\\\s*-F\\\\s*auid!=(unset|-1|4294967295)\\\\s*(-F\\\\s*key=|-k)\\\\s*[!-~]*\\\\s*\""
      "                    }"
      "                    match_criteria:{"
      "                        filter_regex: \".*b32.*finit_module.*\""
      "                        expected_regex: \"\\\\s*-a\\\\s*always,exit\\\\s*-F\\\\s*arch=b32\\\\s*-S\\\\s*([a-zA-Z_]+,)*finit_module(,[a-zA-Z_]+)*\\\\s*-F\\\\s*auid>=1000\\\\s*-F\\\\s*auid!=(unset|-1|4294967295)\\\\s*(-F\\\\s*key=|-k)\\\\s*[!-~]*\\\\s*\""
      "                    }"
      "                    match_criteria:{"
      "                        filter_regex: \".*b32.*delete_module.*\""
      "                        expected_regex: \"\\\\s*-a\\\\s*always,exit\\\\s*-F\\\\s*arch=b32\\\\s*-S\\\\s*([a-zA-Z_]+,)*delete_module(,[a-zA-Z_]+)*\\\\s*-F\\\\s*auid>=1000\\\\s*-F\\\\s*auid!=(unset|-1|4294967295)\\\\s*(-F\\\\s*key=|-k)\\\\s*[!-~]*\\\\s*\""
      "                    }"
      "                    match_criteria:{"
      "                        filter_regex: \".*b32.*create_module.*\""
      "                        expected_regex: \"\\\\s*-a\\\\s*always,exit\\\\s*-F\\\\s*arch=b32\\\\s*-S\\\\s*([a-zA-Z_]+,)*create_module(,[a-zA-Z_]+)*\\\\s*-F\\\\s*auid>=1000\\\\s*-F\\\\s*auid!=(unset|-1|4294967295)\\\\s*(-F\\\\s*key=|-k)\\\\s*[!-~]*\\\\s*\""
      "                    }"
      "                    match_criteria:{"
      "                        filter_regex: \".*b32.*query_module.*\""
      "                        expected_regex: \"\\\\s*-a\\\\s*always,exit\\\\s*-F\\\\s*arch=b32\\\\s*-S\\\\s*([a-zA-Z_]+,)*query_module(,[a-zA-Z_]+)*\\\\s*-F\\\\s*auid>=1000\\\\s*-F\\\\s*auid!=(unset|-1|4294967295)\\\\s*(-F\\\\s*key=|-k)\\\\s*[!-~]*\\\\s*\""
      "                    }"
      "                    match_criteria:{"
      "                        filter_regex: \".*b64.*init_module.*\""
      "                        expected_regex: \"\\\\s*-a\\\\s*always,exit\\\\s*-F\\\\s*arch=b64\\\\s*-S\\\\s*([a-zA-Z_]+,)*init_module(,[a-zA-Z_]+)*\\\\s*-F\\\\s*auid>=1000\\\\s*-F\\\\s*auid!=(unset|-1|4294967295)\\\\s*(-F\\\\s*key=|-k)\\\\s*[!-~]*\\\\s*\""
      "                    }"
      "                    match_criteria:{"
      "                        filter_regex: \".*b64.*finit_module.*\""
      "                        expected_regex: \"\\\\s*-a\\\\s*always,exit\\\\s*-F\\\\s*arch=b64\\\\s*-S\\\\s*([a-zA-Z_]+,)*finit_module(,[a-zA-Z_]+)*\\\\s*-F\\\\s*auid>=1000\\\\s*-F\\\\s*auid!=(unset|-1|4294967295)\\\\s*(-F\\\\s*key=|-k)\\\\s*[!-~]*\\\\s*\""
      "                    }"
      "                    match_criteria:{"
      "                        filter_regex: \".*b64.*delete_module.*\""
      "                        expected_regex: \"\\\\s*-a\\\\s*always,exit\\\\s*-F\\\\s*arch=b64\\\\s*-S\\\\s*([a-zA-Z_]+,)*delete_module(,[a-zA-Z_]+)*\\\\s*-F\\\\s*auid>=1000\\\\s*-F\\\\s*auid!=(unset|-1|4294967295)\\\\s*(-F\\\\s*key=|-k)\\\\s*[!-~]*\\\\s*\""
      "                    }"
      "                    match_criteria:{"
      "                        filter_regex: \".*b64.*create_module.*\""
      "                        expected_regex: \"\\\\s*-a\\\\s*always,exit\\\\s*-F\\\\s*arch=b64\\\\s*-S\\\\s*([a-zA-Z_]+,)*create_module(,[a-zA-Z_]+)*\\\\s*-F\\\\s*auid>=1000\\\\s*-F\\\\s*auid!=(unset|-1|4294967295)\\\\s*(-F\\\\s*key=|-k)\\\\s*[!-~]*\\\\s*\""
      "                    }"
      "                    match_criteria:{"
      "                        filter_regex: \".*b64.*query_module.*\""
      "                        expected_regex: \"\\\\s*-a\\\\s*always,exit\\\\s*-F\\\\s*arch=b64\\\\s*-S\\\\s*([a-zA-Z_]+,)*query_module(,[a-zA-Z_]+)*\\\\s*-F\\\\s*auid>=1000\\\\s*-F\\\\s*auid!=(unset|-1|4294967295)\\\\s*(-F\\\\s*key=|-k)\\\\s*[!-~]*\\\\s*\""
      "                    }"
      "                }"
      "            }"
      "        }"
      "        check_alternatives:{"
      "            file_checks:{"
      "                files_to_check:{single_file:{path:\"/etc/login.defs\"}}"
      "                content_entry:{"
      "                    match_type: ALL_MATCH_ANY_ORDER"
      "                    match_criteria:{"
      "                        filter_regex: \"UID_MIN.*\""
      "                        expected_regex: \"UID_MIN\\\\s*1000\\\\s*\""
      "                    }"
      "                }"
      "                non_compliance_msg: \"If UID_MIN is set to a value different from 1000 in /etc/login.defs, this check will fail.\""
      "                file_display_command: \"grep '^UID_MIN' /etc/login.defs\""
      "            }"
      "            file_checks:{"
      "                files_to_check:{single_file:{path: \"/etc/audit/audit.rules\"}}"
      "                content_entry:{"
      "                    match_type: ALL_MATCH_ANY_ORDER"
      "                    match_criteria:{"
      "                        filter_regex: \".*/usr/bin/kmod.*\""
      "                        expected_regex: \"\\\\s*-a\\\\s*always,exit\\\\s*-F\\\\s*path=/usr/bin/kmod\\\\s*-F\\\\s*perm=x\\\\s*-F\\\\s*auid>=1000\\\\s*-F\\\\s*auid!=(unset|-1|4294967295)\\\\s*(-F\\\\s*key=|-k)\\\\s*[!-~]*\\\\s*\""
      "                    }"
      "                    match_criteria:{"
      "                        filter_regex: \".*b32.*init_module.*\""
      "                        expected_regex: \"\\\\s*-a\\\\s*always,exit\\\\s*-F\\\\s*arch=b32\\\\s*-S\\\\s*([a-zA-Z_]+,)*init_module(,[a-zA-Z_]+)*\\\\s*-F\\\\s*auid>=1000\\\\s*-F\\\\s*auid!=(unset|-1|4294967295)\\\\s*(-F\\\\s*key=|-k)\\\\s*[!-~]*\\\\s*\""
      "                    }"
      "                    match_criteria:{"
      "                        filter_regex: \".*b32.*finit_module.*\""
      "                        expected_regex: \"\\\\s*-a\\\\s*always,exit\\\\s*-F\\\\s*arch=b32\\\\s*-S\\\\s*([a-zA-Z_]+,)*finit_module(,[a-zA-Z_]+)*\\\\s*-F\\\\s*auid>=1000\\\\s*-F\\\\s*auid!=(unset|-1|4294967295)\\\\s*(-F\\\\s*key=|-k)\\\\s*[!-~]*\\\\s*\""
      "                    }"
      "                    match_criteria:{"
      "                        filter_regex: \".*b32.*delete_module.*\""
      "                        expected_regex: \"\\\\s*-a\\\\s*always,exit\\\\s*-F\\\\s*arch=b32\\\\s*-S\\\\s*([a-zA-Z_]+,)*delete_module(,[a-zA-Z_]+)*\\\\s*-F\\\\s*auid>=1000\\\\s*-F\\\\s*auid!=(unset|-1|4294967295)\\\\s*(-F\\\\s*key=|-k)\\\\s*[!-~]*\\\\s*\""
      "                    }"
      "                    match_criteria:{"
      "                        filter_regex: \".*b32.*create_module.*\""
      "                        expected_regex: \"\\\\s*-a\\\\s*always,exit\\\\s*-F\\\\s*arch=b32\\\\s*-S\\\\s*([a-zA-Z_]+,)*create_module(,[a-zA-Z_]+)*\\\\s*-F\\\\s*auid>=1000\\\\s*-F\\\\s*auid!=(unset|-1|4294967295)\\\\s*(-F\\\\s*key=|-k)\\\\s*[!-~]*\\\\s*\""
      "                    }"
      "                    match_criteria:{"
      "                        filter_regex: \".*b32.*query_module.*\""
      "                        expected_regex: \"\\\\s*-a\\\\s*always,exit\\\\s*-F\\\\s*arch=b32\\\\s*-S\\\\s*([a-zA-Z_]+,)*query_module(,[a-zA-Z_]+)*\\\\s*-F\\\\s*auid>=1000\\\\s*-F\\\\s*auid!=(unset|-1|4294967295)\\\\s*(-F\\\\s*key=|-k)\\\\s*[!-~]*\\\\s*\""
      "                    }"
      "                }"
      "            }"
      "        }"
      "    }"
      "    image_scanning:{"
      "        check_alternatives:{"
      "            file_checks:{"
      "                files_to_check:{single_file:{path:\"/etc/login.defs\"}}"
      "                content_entry:{"
      "                    match_type: ALL_MATCH_ANY_ORDER"
      "                    match_criteria:{"
      "                        filter_regex: \"UID_MIN.*\""
      "                        expected_regex: \"UID_MIN\\\\s*1000\\\\s*\""
      "                    }"
      "                }"
      "                non_compliance_msg: \"If UID_MIN is set to a value different from 1000 in /etc/login.defs, this check will fail.\""
      "                file_display_command: \"grep '^UID_MIN' /etc/login.defs\""
      "            }"
      "            file_checks:{"
      "                files_to_check:{files_in_dir:{"
      "                    dir_path:\"/etc/audit/rules.d\""
      "                    recursive: true"
      "                    files_only: true"
      "                    filename_regex: \".*\\\\.rules\""
      "                }}"
      "                content_entry:{"
      "                    match_type: ALL_MATCH_ANY_ORDER"
      "                    match_criteria:{"
      "                        filter_regex: \".*/usr/bin/kmod.*\""
      "                        expected_regex: \"\\\\s*-a\\\\s*always,exit\\\\s*-F\\\\s*path=/usr/bin/kmod\\\\s*-F\\\\s*perm=x\\\\s*-F\\\\s*auid>=1000\\\\s*-F\\\\s*auid!=(unset|-1|4294967295)\\\\s*(-F\\\\s*key=|-k)\\\\s*[!-~]*\\\\s*\""
      "                    }"
      "                    match_criteria:{"
      "                        filter_regex: \".*init_module.*\""
      "                        expected_regex: \"\\\\s*-a\\\\s*always,exit\\\\s*-F\\\\s*arch=b[2346]{2}\\\\s*-S\\\\s*([a-zA-Z_]+,)*init_module(,[a-zA-Z_]+)*\\\\s*-F\\\\s*auid>=1000\\\\s*-F\\\\s*auid!=(unset|-1|4294967295)\\\\s*(-F\\\\s*key=|-k)\\\\s*[!-~]*\\\\s*\""
      "                    }"
      "                    match_criteria:{"
      "                        filter_regex: \".*finit_module.*\""
      "                        expected_regex: \"\\\\s*-a\\\\s*always,exit\\\\s*-F\\\\s*arch=b[2346]{2}\\\\s*-S\\\\s*([a-zA-Z_]+,)*finit_module(,[a-zA-Z_]+)*\\\\s*-F\\\\s*auid>=1000\\\\s*-F\\\\s*auid!=(unset|-1|4294967295)\\\\s*(-F\\\\s*key=|-k)\\\\s*[!-~]*\\\\s*\""
      "                    }"
      "                    match_criteria:{"
      "                        filter_regex: \".*delete_module.*\""
      "                        expected_regex: \"\\\\s*-a\\\\s*always,exit\\\\s*-F\\\\s*arch=b[2346]{2}\\\\s*-S\\\\s*([a-zA-Z_]+,)*delete_module(,[a-zA-Z_]+)*\\\\s*-F\\\\s*auid>=1000\\\\s*-F\\\\s*auid!=(unset|-1|4294967295)\\\\s*(-F\\\\s*key=|-k)\\\\s*[!-~]*\\\\s*\""
      "                    }"
      "                    match_criteria:{"
      "                        filter_regex: \".*create_module.*\""
      "                        expected_regex: \"\\\\s*-a\\\\s*always,exit\\\\s*-F\\\\s*arch=b[2346]{2}\\\\s*-S\\\\s*([a-zA-Z_]+,)*create_module(,[a-zA-Z_]+)*\\\\s*-F\\\\s*auid>=1000\\\\s*-F\\\\s*auid!=(unset|-1|4294967295)\\\\s*(-F\\\\s*key=|-k)\\\\s*[!-~]*\\\\s*\""
      "                    }"
      "                    match_criteria:{"
      "                        filter_regex: \".*query_module.*\""
      "                        expected_regex: \"\\\\s*-a\\\\s*always,exit\\\\s*-F\\\\s*arch=b[2346]{2}\\\\s*-S\\\\s*([a-zA-Z_]+,)*query_module(,[a-zA-Z_]+)*\\\\s*-F\\\\s*auid>=1000\\\\s*-F\\\\s*auid!=(unset|-1|4294967295)\\\\s*(-F\\\\s*key=|-k)\\\\s*[!-~]*\\\\s*\""
      "                    }"
      "                }"
      "            }"
      "        }"
      "    }"
      "}"

  }
}
benchmark_configs: {
  id: "ensure-audit-config-immutable"
  compliance_note: {
    version: { cpe_uri: "cpe:/o:rockylinux:rockylinux:8.5" version: "2.0.0" benchmark_document: "CIS Rocky Linux 8" }
    title: "Ensure the audit configuration is immutable"
    description:
      "Set system audit so that audit rules cannot be modified with auditctl . Setting the flag \"-e "
      "2\" forces audit to be put in immutable mode. Audit changes can only be made on system "
      "reboot.\n"
      "Note: This setting will require the system to be rebooted to update the active auditd "
      "configuration settings."
    rationale:
      "In immutable mode, unauthorized users cannot execute changes to the audit system to "
      "potentially hide malicious activity and then put the audit rules back. Users would most "
      "likely notice a system reboot and that could alert administrators of an attempt to make "
      "unauthorized audit changes."
    remediation:
      "Edit or create the file /etc/audit/rules.d/99-finalize.rules and add the line -e 2 at "
      "the end of the file:\n"
      "Example:\n"
      "\n```\n"
      "# printf -- \"-e 2\" >> /etc/audit/rules.d/99-finalize.rules\n"
      "```\n\n"
      "Load audit rules\n"
      "Merge and load the rules into active configuration:\n"
      "\n```\n"
      "# augenrules --load\n"
      "```\n\n"
      "Check if reboot is required.\n"
      "\n```\n"
      "# if [[ $(auditctl -s | grep \"enabled\") =~ \"2\" ]]; then printf \"Reboot "
      "required to load rules\\\\n\"; fi\n"
      "```\n\n"
    cis_benchmark: {
      profile_level: 2
      severity: LOW
    }
    scan_instructions:
      "generic:{"
      "    check_alternatives:{"
      "        file_checks:{"
      "            files_to_check:{"
      "                files_in_dir:{"
      "                    dir_path:\"/etc/audit/rules.d\""
      "                    recursive: true"
      "                    files_only: true"
      "                    filename_regex: \".*\\\\.rules\""
      "                }"
      "            }"
      "            content_entry:{"
      "                match_type: ALL_MATCH_ANY_ORDER"
      "                match_criteria:{"
      "                    filter_regex: \"\\\\s*-e\\\\s+2\""
      "                    expected_regex: \"^\\\\s*-e\\\\s+2\\\\s*$\""
      "                }"
      "            }"
      "        }"
      "    }"
      "}"
  }
}
