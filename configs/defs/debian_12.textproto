benchmark_configs: {
  id: "cramfs-module-not-available"
  compliance_note: {
    version: { cpe_uri: "cpe:/o:debian:debian_linux:12.0" version: "1.1.0" benchmark_document: "CIS Debian Linux 12" }
    title: "Ensure cramfs kernel module is not available"
    description:
      "The cramfs filesystem type is a compressed read-only Linux filesystem embedded in"
      "small footprint systems. A cramfs image can be used without having to first"
      "decompress the image."
    rationale:
      "Removing support for unneeded filesystem types reduces the local attack surface of the"
      "system. If this filesystem type is not needed, disable it."
    remediation:
      "Run the following script to unload and disable the cramfs module:"
      "- IF - the cramfs kernel module is available in ANY installed kernel:"		
      "• Create a file ending in .conf with install cramfs /bin/false in the"
      "/etc/modprobe.d/ directory"
      "• Create a file ending in .conf with blacklist cramfs in the /etc/modprobe.d/"
      "directory"
      "• Run modprobe -r cramfs 2>/dev/null; rmmod cramfs 2>/dev/null to"
      "remove cramfs from the kernel"
      "- IF - the cramfs kernel module is not available on the system, or pre-compiled into the"
      "kernel, no remediation is necessary"
    cis_benchmark: {
      profile_level: 1
      severity: LOW
    }
    scan_instructions:
      "scan_type_specific:{instance_scanning:{"
      "  check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{files_in_dir:{"
      "        dir_path:\"/lib/modules/\""
      "        filename_regex: \"cramfs.ko\""
      "        recursive: true"
      "      }}"
      "      existence:{should_exist: false}"
      "    }"      
      "  }"
      "  check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{files_in_dir:{"
      "        dir_path:\"/etc/modprobe.d\""
      "        filename_regex: \".*\\\\.conf\""
      "        recursive: true"
      "      }}"
      "      content_entry:{"
      "        match_type: ALL_MATCH_ANY_ORDER"
      "        match_criteria: {"
      "          filter_regex: \"install cramfs .*\""
      "          expected_regex: \"install cramfs /bin/(true|false)\""
      "        }"
      "      }"
      "    }"
      "    file_checks:{"
      "      files_to_check:{files_in_dir:{"
      "        dir_path:\"/etc/modprobe.d\""
      "        filename_regex: \".*\\\\.conf\""
      "        recursive: true"
      "      }}"
      "      content_entry:{"
      "        match_type: ALL_MATCH_ANY_ORDER"
      "        match_criteria: {"
      "          filter_regex: \"blacklist cramfs.*\""
      "          expected_regex: \"blacklist cramfs.*\""
      "        }"
      "      }"
      "    }"
      "    file_checks:{"
      "      files_to_check:{single_file:{path:\"/proc/modules\"}}"
      "      content_entry:{"
      "        match_type: NONE_MATCH"
      "        match_criteria: {"
      "          filter_regex: \"cramfs .*\""
      "          expected_regex: \"cramfs .*\""
      "        }"
      "      }"
      "    }"
      "  }"
      "}"
      "image_scanning:{"
      "  check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{files_in_dir:{"
      "        dir_path:\"/lib/modules/\""
      "        filename_regex: \"cramfs.ko\""
      "        recursive: true"
      "      }}"
      "      existence:{should_exist: false}"
      "    }"      
      "  }"	  
      "  check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{files_in_dir:{"
      "        dir_path:\"/etc/modprobe.d\""
      "        filename_regex: \".*\\\\.conf\""
      "        recursive: true"
      "      }}"
      "      content_entry:{"
      "        match_type: ALL_MATCH_ANY_ORDER"
      "        match_criteria: {"
      "          filter_regex: \"install cramfs .*\""
      "          expected_regex: \"install cramfs /bin/(true|false)\""
      "        }"
      "      }"
      "    }"
      "    file_checks:{"
      "      files_to_check:{files_in_dir:{"
      "        dir_path:\"/etc/modprobe.d\""
      "        filename_regex: \".*\\\\.conf\""
      "        recursive: true"
      "      }}"
      "      content_entry:{"
      "        match_type: ALL_MATCH_ANY_ORDER"
      "        match_criteria: {"
      "          filter_regex: \"blacklist cramfs.*\""
      "          expected_regex: \"blacklist cramfs.*\""
      "        }"
      "      }"
      "    }"
      "  }"
      "}}"
  }
}

benchmark_configs: {
  id: "freevxfs-module-not-available"
  compliance_note: {
    version: { cpe_uri: "cpe:/o:debian:debian_linux:12.0" version: "1.1.0" benchmark_document: "CIS Debian Linux 12" }
    title: "Ensure freevxfs kernel module is not available"
    description:
      "The freevxfs filesystem type is a free version of the Veritas type filesystem. This is the"
      "primary filesystem type for HP-UX operating systems."
    rationale:
      "Removing support for unneeded filesystem types reduces the local attack surface of the"
      "system. If this filesystem type is not needed, disable it."
    remediation:
      "Run the following script to unload and disable the freevxfs module:"
      "- IF - the freevxfs kernel module is available in ANY installed kernel:"
      "• Create a file ending in .conf with install freevxfs /bin/false in the"
      "/etc/modprobe.d/ directory"
      "• Create a file ending in .conf with blacklist freevxfs in the"
      "/etc/modprobe.d/ directory"
      "• Run modprobe -r freevxfs 2>/dev/null; rmmod freevxfs 2>/dev/null"
      "to remove freevxfs from the kernel"
      "- IF - the freevxfs kernel module is not available on the system, or pre-compiled into"
      "the kernel, no remediation is necessary"
    cis_benchmark: {
      profile_level: 1
      severity: LOW
    }
    scan_instructions:
      "scan_type_specific:{instance_scanning:{"
      "  check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{files_in_dir:{"
      "        dir_path:\"/lib/modules/\""
      "        filename_regex: \"freevxfs.ko\""
      "        recursive: true"
      "      }}"
      "      existence:{should_exist: false}"
      "    }"      
      "  }"
      "  check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{files_in_dir:{"
      "        dir_path:\"/etc/modprobe.d\""
      "        filename_regex: \".*\\\\.conf\""
      "        recursive: true"
      "      }}"
      "      content_entry:{"
      "        match_type: ALL_MATCH_ANY_ORDER"
      "        match_criteria: {"
      "          filter_regex: \"install freevxfs .*\""
      "          expected_regex: \"install freevxfs /bin/(true|false)\""
      "        }"
      "      }"
      "    }"
      "    file_checks:{"
      "      files_to_check:{files_in_dir:{"
      "        dir_path:\"/etc/modprobe.d\""
      "        filename_regex: \".*\\\\.conf\""
      "        recursive: true"
      "      }}"
      "      content_entry:{"
      "        match_type: ALL_MATCH_ANY_ORDER"
      "        match_criteria: {"
      "          filter_regex: \"blacklist freevxfs.*\""
      "          expected_regex: \"blacklist freevxfs.*\""
      "        }"
      "      }"
      "    }"
      "    file_checks:{"
      "      files_to_check:{single_file:{path:\"/proc/modules\"}}"
      "      content_entry:{"
      "        match_type: NONE_MATCH"
      "        match_criteria: {"
      "          filter_regex: \"freevxfs .*\""
      "          expected_regex: \"freevxfs .*\""
      "        }"
      "      }"
      "    }"
      "  }"
      "}"
      "image_scanning:{"
      "  check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{files_in_dir:{"
      "        dir_path:\"/lib/modules/\""
      "        filename_regex: \"freevxfs.ko\""
      "        recursive: true"
      "      }}"
      "      existence:{should_exist: false}"
      "    }"      
      "  }"	  
      "  check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{files_in_dir:{"
      "        dir_path:\"/etc/modprobe.d\""
      "        filename_regex: \".*\\\\.conf\""
      "        recursive: true"
      "      }}"
      "      content_entry:{"
      "        match_type: ALL_MATCH_ANY_ORDER"
      "        match_criteria: {"
      "          filter_regex: \"install freevxfs .*\""
      "          expected_regex: \"install freevxfs /bin/(true|false)\""
      "        }"
      "      }"
      "    }"
      "    file_checks:{"
      "      files_to_check:{files_in_dir:{"
      "        dir_path:\"/etc/modprobe.d\""
      "        filename_regex: \".*\\\\.conf\""
      "        recursive: true"
      "      }}"
      "      content_entry:{"
      "        match_type: ALL_MATCH_ANY_ORDER"
      "        match_criteria: {"
      "          filter_regex: \"blacklist freevxfs.*\""
      "          expected_regex: \"blacklist freevxfs.*\""
      "        }"
      "      }"
      "    }"
      "  }"
      "}}"
  }
}

benchmark_configs: {
  id: "hfs-module-not-available"
  compliance_note: {
    version: { cpe_uri: "cpe:/o:debian:debian_linux:12.0" version: "1.1.0" benchmark_document: "CIS Debian Linux 12" }
    title: "Ensure hfs kernel module is not available"
    description:
      "The hfs filesystem type is a hierarchical filesystem that allows you to mount Mac OS"
      "filesystems."
    rationale:
      "Removing support for unneeded filesystem types reduces the local attack surface of the"
      "system. If this filesystem type is not needed, disable it."
    remediation:
      "Run the following script to unload and disable the hfs module:"
      "- IF - the hfs kernel module is available in ANY installed kernel:"
      "• Create a file ending in .conf with install hfs /bin/false in the"
      "/etc/modprobe.d/ directory"
      "• Create a file ending in .conf with blacklist hfs in the /etc/modprobe.d/"
      "directory"
      "• Run modprobe -r hfs 2>/dev/null; rmmod hfs 2>/dev/null to remove"
      "hfs from the kernel"
      "- IF - the hfs kernel module is not available on the system, or pre-compiled into the"
      "kernel, no remediation is necessary"
    cis_benchmark: {
      profile_level: 1
      severity: LOW
    }
    scan_instructions:
      "scan_type_specific:{instance_scanning:{"
      "  check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{files_in_dir:{"
      "        dir_path:\"/lib/modules/\""
      "        filename_regex: \"hfs.ko\""
      "        recursive: true"
      "      }}"
      "      existence:{should_exist: false}"
      "    }"      
      "  }"
      "  check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{files_in_dir:{"
      "        dir_path:\"/etc/modprobe.d\""
      "        filename_regex: \".*\\\\.conf\""
      "        recursive: true"
      "      }}"
      "      content_entry:{"
      "        match_type: ALL_MATCH_ANY_ORDER"
      "        match_criteria: {"
      "          filter_regex: \"install hfs .*\""
      "          expected_regex: \"install hfs /bin/(true|false)\""
      "        }"
      "      }"
      "    }"
      "    file_checks:{"
      "      files_to_check:{files_in_dir:{"
      "        dir_path:\"/etc/modprobe.d\""
      "        filename_regex: \".*\\\\.conf\""
      "        recursive: true"
      "      }}"
      "      content_entry:{"
      "        match_type: ALL_MATCH_ANY_ORDER"
      "        match_criteria: {"
      "          filter_regex: \"blacklist hfs.*\""
      "          expected_regex: \"blacklist hfs.*\""
      "        }"
      "      }"
      "    }"
      "    file_checks:{"
      "      files_to_check:{single_file:{path:\"/proc/modules\"}}"
      "      content_entry:{"
      "        match_type: NONE_MATCH"
      "        match_criteria: {"
      "          filter_regex: \"hfs .*\""
      "          expected_regex: \"hfs .*\""
      "        }"
      "      }"
      "    }"
      "  }"
      "}"
      "image_scanning:{"
      "  check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{files_in_dir:{"
      "        dir_path:\"/lib/modules/\""
      "        filename_regex: \"hfs.ko\""
      "        recursive: true"
      "      }}"
      "      existence:{should_exist: false}"
      "    }"      
      "  }"	  
      "  check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{files_in_dir:{"
      "        dir_path:\"/etc/modprobe.d\""
      "        filename_regex: \".*\\\\.conf\""
      "        recursive: true"
      "      }}"
      "      content_entry:{"
      "        match_type: ALL_MATCH_ANY_ORDER"
      "        match_criteria: {"
      "          filter_regex: \"install hfs .*\""
      "          expected_regex: \"install hfs /bin/(true|false)\""
      "        }"
      "      }"
      "    }"
      "    file_checks:{"
      "      files_to_check:{files_in_dir:{"
      "        dir_path:\"/etc/modprobe.d\""
      "        filename_regex: \".*\\\\.conf\""
      "        recursive: true"
      "      }}"
      "      content_entry:{"
      "        match_type: ALL_MATCH_ANY_ORDER"
      "        match_criteria: {"
      "          filter_regex: \"blacklist hfs.*\""
      "          expected_regex: \"blacklist hfs.*\""
      "        }"
      "      }"
      "    }"
      "  }"
      "}}"
  }
}

benchmark_configs: {
  id: "hfsplus-module-not-available"
  compliance_note: {
    version: { cpe_uri: "cpe:/o:debian:debian_linux:12.0" version: "1.1.0" benchmark_document: "CIS Debian Linux 12" }
    title: "Ensure hfsplus kernel module is not available"
    description:
      "The hfsplus filesystem type is a hierarchical filesystem designed to replace hfs that"
      "allows you to mount Mac OS filesystems."
    rationale:
      "Removing support for unneeded filesystem types reduces the local attack surface of the"
      "system. If this filesystem type is not needed, disable it."
    remediation:
      "Run the following script to unload and disable the hfsplus module:"
      "- IF - the hfsplus kernel module is available in ANY installed kernel:"
      "• Create a file ending in .conf with install hfsplus /bin/false in the"
      "/etc/modprobe.d/ directory"
      "• Create a file ending in .conf with blacklist hfsplus in the /etc/modprobe.d/"
      "directory"
      "• Run modprobe -r hfsplus 2>/dev/null; rmmod hfsplus 2>/dev/null to remove"
      "hfsplus from the kernel"
      "- IF - the hfsplus kernel module is not available on the system, or pre-compiled into the"
      "kernel, no remediation is necessary"
    cis_benchmark: {
      profile_level: 1
      severity: LOW
    }
    scan_instructions:
      "scan_type_specific:{instance_scanning:{"
      "  check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{files_in_dir:{"
      "        dir_path:\"/lib/modules/\""
      "        filename_regex: \"hfsplus.ko\""
      "        recursive: true"
      "      }}"
      "      existence:{should_exist: false}"
      "    }"      
      "  }"
      "  check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{files_in_dir:{"
      "        dir_path:\"/etc/modprobe.d\""
      "        filename_regex: \".*\\\\.conf\""
      "        recursive: true"
      "      }}"
      "      content_entry:{"
      "        match_type: ALL_MATCH_ANY_ORDER"
      "        match_criteria: {"
      "          filter_regex: \"install hfsplus .*\""
      "          expected_regex: \"install hfsplus /bin/(true|false)\""
      "        }"
      "      }"
      "    }"
      "    file_checks:{"
      "      files_to_check:{files_in_dir:{"
      "        dir_path:\"/etc/modprobe.d\""
      "        filename_regex: \".*\\\\.conf\""
      "        recursive: true"
      "      }}"
      "      content_entry:{"
      "        match_type: ALL_MATCH_ANY_ORDER"
      "        match_criteria: {"
      "          filter_regex: \"blacklist hfsplus.*\""
      "          expected_regex: \"blacklist hfsplus.*\""
      "        }"
      "      }"
      "    }"
      "    file_checks:{"
      "      files_to_check:{single_file:{path:\"/proc/modules\"}}"
      "      content_entry:{"
      "        match_type: NONE_MATCH"
      "        match_criteria: {"
      "          filter_regex: \"hfsplus .*\""
      "          expected_regex: \"hfsplus .*\""
      "        }"
      "      }"
      "    }"
      "  }"
      "}"
      "image_scanning:{"
      "  check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{files_in_dir:{"
      "        dir_path:\"/lib/modules/\""
      "        filename_regex: \"hfsplus.ko\""
      "        recursive: true"
      "      }}"
      "      existence:{should_exist: false}"
      "    }"      
      "  }"	  
      "  check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{files_in_dir:{"
      "        dir_path:\"/etc/modprobe.d\""
      "        filename_regex: \".*\\\\.conf\""
      "        recursive: true"
      "      }}"
      "      content_entry:{"
      "        match_type: ALL_MATCH_ANY_ORDER"
      "        match_criteria: {"
      "          filter_regex: \"install hfsplus .*\""
      "          expected_regex: \"install hfsplus /bin/(true|false)\""
      "        }"
      "      }"
      "    }"
      "    file_checks:{"
      "      files_to_check:{files_in_dir:{"
      "        dir_path:\"/etc/modprobe.d\""
      "        filename_regex: \".*\\\\.conf\""
      "        recursive: true"
      "      }}"
      "      content_entry:{"
      "        match_type: ALL_MATCH_ANY_ORDER"
      "        match_criteria: {"
      "          filter_regex: \"blacklist hfsplus.*\""
      "          expected_regex: \"blacklist hfsplus.*\""
      "        }"
      "      }"
      "    }"
      "  }"
      "}}"
  }
}

benchmark_configs: {
  id: "jffs2-module-not-available"
  compliance_note: {
    version: { cpe_uri: "cpe:/o:debian:debian_linux:12.0" version: "1.1.0" benchmark_document: "CIS Debian Linux 12" }
    title: "Ensure jffs2 kernel module is not available"
    description:
      "The jffs2 (journaling flash filesystem 2) filesystem type is a log-structured filesystem"
      "used in flash memory devices."
    rationale:
      "Removing support for unneeded filesystem types reduces the local attack surface of the"
      "system. If this filesystem type is not needed, disable it."
    remediation:
      "Run the following script to unload and disable the jffs2 module:"
      "- IF - the jffs2 kernel module is available in ANY installed kernel:"
      "• Create a file ending in .conf with install jffs2 /bin/false in the"
      "/etc/modprobe.d/ directory"
      "• Create a file ending in .conf with blacklist jffs2 in the /etc/modprobe.d/"
      "directory"
      "• Run modprobe -r jffs2 2>/dev/null; rmmod jffs2 2>/dev/null to remove"
      "jffs2 from the kernel"
      "- IF - the jffs2 kernel module is not available on the system, or pre-compiled into the"
      "kernel, no remediation is necessary"
    cis_benchmark: {
      profile_level: 1
      severity: LOW
    }
    scan_instructions:
      "scan_type_specific:{instance_scanning:{"
      "  check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{files_in_dir:{"
      "        dir_path:\"/lib/modules/\""
      "        filename_regex: \"jffs2.ko\""
      "        recursive: true"
      "      }}"
      "      existence:{should_exist: false}"
      "    }"      
      "  }"
      "  check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{files_in_dir:{"
      "        dir_path:\"/etc/modprobe.d\""
      "        filename_regex: \".*\\\\.conf\""
      "        recursive: true"
      "      }}"
      "      content_entry:{"
      "        match_type: ALL_MATCH_ANY_ORDER"
      "        match_criteria: {"
      "          filter_regex: \"install jffs2 .*\""
      "          expected_regex: \"install jffs2 /bin/(true|false)\""
      "        }"
      "      }"
      "    }"
      "    file_checks:{"
      "      files_to_check:{files_in_dir:{"
      "        dir_path:\"/etc/modprobe.d\""
      "        filename_regex: \".*\\\\.conf\""
      "        recursive: true"
      "      }}"
      "      content_entry:{"
      "        match_type: ALL_MATCH_ANY_ORDER"
      "        match_criteria: {"
      "          filter_regex: \"blacklist jffs2.*\""
      "          expected_regex: \"blacklist jffs2.*\""
      "        }"
      "      }"
      "    }"
      "    file_checks:{"
      "      files_to_check:{single_file:{path:\"/proc/modules\"}}"
      "      content_entry:{"
      "        match_type: NONE_MATCH"
      "        match_criteria: {"
      "          filter_regex: \"jffs2 .*\""
      "          expected_regex: \"jffs2 .*\""
      "        }"
      "      }"
      "    }"
      "  }"
      "}"
      "image_scanning:{"
      "  check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{files_in_dir:{"
      "        dir_path:\"/lib/modules/\""
      "        filename_regex: \"jffs2.ko\""
      "        recursive: true"
      "      }}"
      "      existence:{should_exist: false}"
      "    }"      
      "  }"	  
      "  check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{files_in_dir:{"
      "        dir_path:\"/etc/modprobe.d\""
      "        filename_regex: \".*\\\\.conf\""
      "        recursive: true"
      "      }}"
      "      content_entry:{"
      "        match_type: ALL_MATCH_ANY_ORDER"
      "        match_criteria: {"
      "          filter_regex: \"install jffs2 .*\""
      "          expected_regex: \"install jffs2 /bin/(true|false)\""
      "        }"
      "      }"
      "    }"
      "    file_checks:{"
      "      files_to_check:{files_in_dir:{"
      "        dir_path:\"/etc/modprobe.d\""
      "        filename_regex: \".*\\\\.conf\""
      "        recursive: true"
      "      }}"
      "      content_entry:{"
      "        match_type: ALL_MATCH_ANY_ORDER"
      "        match_criteria: {"
      "          filter_regex: \"blacklist jffs2.*\""
      "          expected_regex: \"blacklist jffs2.*\""
      "        }"
      "      }"
      "    }"
      "  }"
      "}}"
  }
}

benchmark_configs: {
  id: "overlayfs-module-not-available"
  compliance_note: {
    version: { cpe_uri: "cpe:/o:debian:debian_linux:12.0" version: "1.1.0" benchmark_document: "CIS Debian Linux 12" }
    title: "Ensure overlayfs kernel module is not available"
    description:
      "overlayfs is a Linux filesystem that layers multiple filesystems to create a single"
      "unified view which allows a user to \"merge\" several mount points into a unified"
      "filesystem."
    rationale:
      "The overlayfs has known CVE's: CVE-2023-32629, CVE-2023-2640, CVE-2023-"
      "0386. Disabling the overlayfs reduces the local attack surface by removing support for"	
      "unnecessary filesystem types and mitigates potential risks associated with unauthorized"
      "execution of setuid files, enhancing the overall system security."
    remediation:
      "Run the following script to verify:"
      "- IF - the overlayfs kernel module is available in ANY installed kernel, verify:"
      "• An entry including /bin/true or /bin/false exists in a file within the"
      "/etc/modprobe.d/ directory"
      "• The module is deny listed in a file within the /etc/modprobe.d/ directory"
      "• The module is not loaded in the running kernel"
      "- IF - the overlayfs kernel module is not available on the system, or pre-compiled into"
      "the kernel, no additional configuration is necessary"
    cis_benchmark: {
      profile_level: 2
      severity: LOW
    }
    scan_instructions:
      "scan_type_specific:{instance_scanning:{"
      "  check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{files_in_dir:{"
      "        dir_path:\"/lib/modules/\""
      "        filename_regex: \"overlayfs.ko\""
      "        recursive: true"
      "      }}"
      "      existence:{should_exist: false}"
      "    }"      
      "  }"
      "  check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{files_in_dir:{"
      "        dir_path:\"/etc/modprobe.d\""
      "        filename_regex: \".*\\\\.conf\""
      "        recursive: true"
      "      }}"
      "      content_entry:{"
      "        match_type: ALL_MATCH_ANY_ORDER"
      "        match_criteria: {"
      "          filter_regex: \"install overlayfs .*\""
      "          expected_regex: \"install overlayfs /bin/(true|false)\""
      "        }"
      "      }"
      "    }"
      "    file_checks:{"
      "      files_to_check:{files_in_dir:{"
      "        dir_path:\"/etc/modprobe.d\""
      "        filename_regex: \".*\\\\.conf\""
      "        recursive: true"
      "      }}"
      "      content_entry:{"
      "        match_type: ALL_MATCH_ANY_ORDER"
      "        match_criteria: {"
      "          filter_regex: \"blacklist overlayfs.*\""
      "          expected_regex: \"blacklist overlayfs.*\""
      "        }"
      "      }"
      "    }"
      "    file_checks:{"
      "      files_to_check:{single_file:{path:\"/proc/modules\"}}"
      "      content_entry:{"
      "        match_type: NONE_MATCH"
      "        match_criteria: {"
      "          filter_regex: \"overlayfs .*\""
      "          expected_regex: \"overlayfs .*\""
      "        }"
      "      }"
      "    }"
      "  }"
      "}"
      "image_scanning:{"
      "  check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{files_in_dir:{"
      "        dir_path:\"/lib/modules/\""
      "        filename_regex: \"overlayfs.ko\""
      "        recursive: true"
      "      }}"
      "      existence:{should_exist: false}"
      "    }"      
      "  }"	  
      "  check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{files_in_dir:{"
      "        dir_path:\"/etc/modprobe.d\""
      "        filename_regex: \".*\\\\.conf\""
      "        recursive: true"
      "      }}"
      "      content_entry:{"
      "        match_type: ALL_MATCH_ANY_ORDER"
      "        match_criteria: {"
      "          filter_regex: \"install overlayfs .*\""
      "          expected_regex: \"install overlayfs /bin/(true|false)\""
      "        }"
      "      }"
      "    }"
      "    file_checks:{"
      "      files_to_check:{files_in_dir:{"
      "        dir_path:\"/etc/modprobe.d\""
      "        filename_regex: \".*\\\\.conf\""
      "        recursive: true"
      "      }}"
      "      content_entry:{"
      "        match_type: ALL_MATCH_ANY_ORDER"
      "        match_criteria: {"
      "          filter_regex: \"blacklist overlayfs.*\""
      "          expected_regex: \"blacklist overlayfs.*\""
      "        }"
      "      }"
      "    }"
      "  }"
      "}}"
  }
}

benchmark_configs: {
  id: "squashfs-module-not-available"
  compliance_note: {
    version: { cpe_uri: "cpe:/o:debian:debian_linux:12.0" version: "1.1.0" benchmark_document: "CIS Debian Linux 12" }
    title: "Ensure squashfs kernel module is not available"
    description:
      "The squashfs filesystem type is a compressed read-only Linux "
      "filesystem embedded in small footprint systems (similar to cramfs ). A "
      "squashfs image can be used without having to first decompress the image."
    rationale:
      "Removing support for unneeded filesystem types reduces the local attack "
      "surface of the server. If this filesystem type is not needed, disable "
      "it."
    remediation:
      "Edit or create a file in the /etc/modprobe.d/ directory ending in .conf "
      "with the lines that read install squashfs /bin/false and blacklist squashfs.\n"
      "Example: \n"
      "```\n"
      "printf \"install squashfs /bin/false "
      "blacklist squashfs "
      "\" >> /etc/modprobe.d/squashfs.conf "
      "```\n"
      "Run the following command to unload the squashfs module:\n"
      "```\n"
      "# rmmod squashfs\n"
      "```\n"
    cis_benchmark: {
      profile_level: 2
      severity: LOW
    }
    scan_instructions:
      "scan_type_specific:{instance_scanning:{"
      "  check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{files_in_dir:{"
      "        dir_path:\"/lib/modules/\""
      "        filename_regex: \"squashfs.ko\""
      "        recursive: true"
      "      }}"
      "      existence:{should_exist: false}"
      "    }"      
      "  }"
      "  check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{files_in_dir:{"
      "        dir_path:\"/etc/modprobe.d\""
      "        filename_regex: \".*\\\\.conf\""
      "        recursive: true"
      "      }}"
      "      content_entry:{"
      "        match_type: ALL_MATCH_ANY_ORDER"
      "        match_criteria: {"
      "          filter_regex: \"install squashfs .*\""
      "          expected_regex: \"install squashfs /bin/(true|false)\""
      "        }"
      "      }"
      "    }"
      "    file_checks:{"
      "      files_to_check:{files_in_dir:{"
      "        dir_path:\"/etc/modprobe.d\""
      "        filename_regex: \".*\\\\.conf\""
      "        recursive: true"
      "      }}"
      "      content_entry:{"
      "        match_type: ALL_MATCH_ANY_ORDER"
      "        match_criteria: {"
      "          filter_regex: \"blacklist squashfs.*\""
      "          expected_regex: \"blacklist squashfs.*\""
      "        }"
      "      }"
      "    }"
      "    file_checks:{"
      "      files_to_check:{single_file:{path:\"/proc/modules\"}}"
      "      content_entry:{"
      "        match_type: NONE_MATCH"
      "        match_criteria: {"
      "          filter_regex: \"squashfs .*\""
      "          expected_regex: \"squashfs .*\""
      "        }"
      "      }"
      "    }"
      "  }"
      "}"
      "image_scanning:{"
      "  check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{files_in_dir:{"
      "        dir_path:\"/lib/modules/\""
      "        filename_regex: \"squashfs.ko\""
      "        recursive: true"
      "      }}"
      "      existence:{should_exist: false}"
      "    }"      
      "  }"	  
      "  check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{files_in_dir:{"
      "        dir_path:\"/etc/modprobe.d\""
      "        filename_regex: \".*\\\\.conf\""
      "        recursive: true"
      "      }}"
      "      content_entry:{"
      "        match_type: ALL_MATCH_ANY_ORDER"
      "        match_criteria: {"
      "          filter_regex: \"install squashfs .*\""
      "          expected_regex: \"install squashfs /bin/(true|false)\""
      "        }"
      "      }"
      "    }"
      "    file_checks:{"
      "      files_to_check:{files_in_dir:{"
      "        dir_path:\"/etc/modprobe.d\""
      "        filename_regex: \".*\\\\.conf\""
      "        recursive: true"
      "      }}"
      "      content_entry:{"
      "        match_type: ALL_MATCH_ANY_ORDER"
      "        match_criteria: {"
      "          filter_regex: \"blacklist squashfs.*\""
      "          expected_regex: \"blacklist squashfs.*\""
      "        }"
      "      }"
      "    }"
      "  }"
      "}}"
  }
}

benchmark_configs: {
  id: "udf-module-not-available"
  compliance_note: {
    version: { cpe_uri: "cpe:/o:debian:debian_linux:12.0" version: "1.1.0" benchmark_document: "CIS Debian Linux 12" }
    title: "Ensure udf kernel module is not available"
    description:
      "The udf filesystem type is the universal disk format used to implement ISO/IEC 13346"
      "and ECMA-167 specifications. This is an open vendor filesystem type for data storage"
      "on a broad range of media. This filesystem type is necessary to support writing DVDs"
      "and newer optical disc formats."
    rationale:
      "Removing support for unneeded filesystem types reduces the local attack surface of the"
      "system. If this filesystem type is not needed, disable it."
    remediation:
      "Run the following script to unload and disable the udf module:"
      "- IF - the udf kernel module is available in ANY installed kernel:"
      "• Create a file ending in .conf with install udf /bin/false in the"
      "/etc/modprobe.d/ directory"
      "• Create a file ending in .conf with blacklist udf in the /etc/modprobe.d/"
      "directory"
      "• Run modprobe -r udf 2>/dev/null; rmmod udf 2>/dev/null to remove"
      "udf from the kernel"
      "- IF - the udf kernel module is not available on the system, or pre-compiled into the"
      "kernel, no remediation is necessary"
    cis_benchmark: {
      profile_level: 2
      severity: LOW
    }
    scan_instructions:
      "scan_type_specific:{instance_scanning:{"
      "  check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{files_in_dir:{"
      "        dir_path:\"/lib/modules/\""
      "        filename_regex: \"udf.ko\""
      "        recursive: true"
      "      }}"
      "      existence:{should_exist: false}"
      "    }"      
      "  }"
      "  check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{files_in_dir:{"
      "        dir_path:\"/etc/modprobe.d\""
      "        filename_regex: \".*\\\\.conf\""
      "        recursive: true"
      "      }}"
      "      content_entry:{"
      "        match_type: ALL_MATCH_ANY_ORDER"
      "        match_criteria: {"
      "          filter_regex: \"install udf .*\""
      "          expected_regex: \"install udf /bin/(true|false)\""
      "        }"
      "      }"
      "    }"
      "    file_checks:{"
      "      files_to_check:{files_in_dir:{"
      "        dir_path:\"/etc/modprobe.d\""
      "        filename_regex: \".*\\\\.conf\""
      "        recursive: true"
      "      }}"
      "      content_entry:{"
      "        match_type: ALL_MATCH_ANY_ORDER"
      "        match_criteria: {"
      "          filter_regex: \"blacklist udf.*\""
      "          expected_regex: \"blacklist udf.*\""
      "        }"
      "      }"
      "    }"
      "    file_checks:{"
      "      files_to_check:{single_file:{path:\"/proc/modules\"}}"
      "      content_entry:{"
      "        match_type: NONE_MATCH"
      "        match_criteria: {"
      "          filter_regex: \"udf .*\""
      "          expected_regex: \"udf .*\""
      "        }"
      "      }"
      "    }"
      "  }"
      "}"
      "image_scanning:{"
      "  check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{files_in_dir:{"
      "        dir_path:\"/lib/modules/\""
      "        filename_regex: \"udf.ko\""
      "        recursive: true"
      "      }}"
      "      existence:{should_exist: false}"
      "    }"      
      "  }"	  
      "  check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{files_in_dir:{"
      "        dir_path:\"/etc/modprobe.d\""
      "        filename_regex: \".*\\\\.conf\""
      "        recursive: true"
      "      }}"
      "      content_entry:{"
      "        match_type: ALL_MATCH_ANY_ORDER"
      "        match_criteria: {"
      "          filter_regex: \"install udf .*\""
      "          expected_regex: \"install udf /bin/(true|false)\""
      "        }"
      "      }"
      "    }"
      "    file_checks:{"
      "      files_to_check:{files_in_dir:{"
      "        dir_path:\"/etc/modprobe.d\""
      "        filename_regex: \".*\\\\.conf\""
      "        recursive: true"
      "      }}"
      "      content_entry:{"
      "        match_type: ALL_MATCH_ANY_ORDER"
      "        match_criteria: {"
      "          filter_regex: \"blacklist udf.*\""
      "          expected_regex: \"blacklist udf.*\""
      "        }"
      "      }"
      "    }"
      "  }"
      "}}"
  }
}

benchmark_configs: {
  id: "usb_storage-module-not-available"
  compliance_note: {
    version: { cpe_uri: "cpe:/o:debian:debian_linux:12.0" version: "1.1.0" benchmark_document: "CIS Debian Linux 12" }
    title: "Ensure usb_storage kernel module is not available"
    description:
      "USB storage provides a means to transfer and store files ensuring persistence and"
      "availability of the files independent of network connection status. Its popularity and utility"
      "has led to USB-based malware being a simple and common means for network"
      "infiltration and a first step to establishing a persistent threat within a networked"
      "environment."
    rationale:
      "Restricting USB access on the system will decrease the physical attack surface for a"
      "device and diminish the possible vectors to introduce malware."
    remediation:
      "Run the following script to unload and disable the usb-storage module:"
      "- IF - the usb-storage kernel module is available in ANY installed kernel:"
      "• Create a file ending in .conf with install usb-storage /bin/false in the"
      "/etc/modprobe.d/ directory"
      "• Create a file ending in .conf with blacklist usb-storage in the"
      "/etc/modprobe.d/ directory"
      "• Run modprobe -r usb-storage 2>/dev/null; rmmod usb-storage"
      "2>/dev/null to remove usb-storage from the kernel"
      "- IF - the usb-storage kernel module is not available on the system, or pre-compiled"
      "into the kernel, no remediation is necessary"
    cis_benchmark: {
      profile_level: 2
      severity: LOW
    }
    scan_instructions:
      "scan_type_specific:{instance_scanning:{"
      "  check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{files_in_dir:{"
      "        dir_path:\"/lib/modules/\""
      "        filename_regex: \"usb_storage.ko\""
      "        recursive: true"
      "      }}"
      "      existence:{should_exist: false}"
      "    }"      
      "  }"
      "  check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{files_in_dir:{"
      "        dir_path:\"/etc/modprobe.d\""
      "        filename_regex: \".*\\\\.conf\""
      "        recursive: true"
      "      }}"
      "      content_entry:{"
      "        match_type: ALL_MATCH_ANY_ORDER"
      "        match_criteria: {"
      "          filter_regex: \"install usb_storage .*\""
      "          expected_regex: \"install usb_storage /bin/(true|false)\""
      "        }"
      "      }"
      "    }"
      "    file_checks:{"
      "      files_to_check:{files_in_dir:{"
      "        dir_path:\"/etc/modprobe.d\""
      "        filename_regex: \".*\\\\.conf\""
      "        recursive: true"
      "      }}"
      "      content_entry:{"
      "        match_type: ALL_MATCH_ANY_ORDER"
      "        match_criteria: {"
      "          filter_regex: \"blacklist usb_storage.*\""
      "          expected_regex: \"blacklist usb_storage.*\""
      "        }"
      "      }"
      "    }"
      "    file_checks:{"
      "      files_to_check:{single_file:{path:\"/proc/modules\"}}"
      "      content_entry:{"
      "        match_type: NONE_MATCH"
      "        match_criteria: {"
      "          filter_regex: \"usb_storage .*\""
      "          expected_regex: \"usb_storage .*\""
      "        }"
      "      }"
      "    }"
      "  }"
      "}"
      "image_scanning:{"
      "  check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{files_in_dir:{"
      "        dir_path:\"/lib/modules/\""
      "        filename_regex: \"usb_storage.ko\""
      "        recursive: true"
      "      }}"
      "      existence:{should_exist: false}"
      "    }"      
      "  }"	  
      "  check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{files_in_dir:{"
      "        dir_path:\"/etc/modprobe.d\""
      "        filename_regex: \".*\\\\.conf\""
      "        recursive: true"
      "      }}"
      "      content_entry:{"
      "        match_type: ALL_MATCH_ANY_ORDER"
      "        match_criteria: {"
      "          filter_regex: \"install usb_storage .*\""
      "          expected_regex: \"install usb_storage /bin/(true|false)\""
      "        }"
      "      }"
      "    }"
      "    file_checks:{"
      "      files_to_check:{files_in_dir:{"
      "        dir_path:\"/etc/modprobe.d\""
      "        filename_regex: \".*\\\\.conf\""
      "        recursive: true"
      "      }}"
      "      content_entry:{"
      "        match_type: ALL_MATCH_ANY_ORDER"
      "        match_criteria: {"
      "          filter_regex: \"blacklist usb_storage.*\""
      "          expected_regex: \"blacklist usb_storage.*\""
      "        }"
      "      }"
      "    }"
      "  }"
      "}}"
  }
}

benchmark_configs: {
  id: "tmp-configured"
  compliance_note: {
    version: { cpe_uri: "cpe:/o:debian:debian_linux:12.0" version: "1.1.0" benchmark_document: "CIS Debian Linux 12" }  		   
    title: "Ensure /tmp is configured"
    description:
      "The /tmp directory is a world-writable directory used for temporary "
      "storage by all users and some applications."
    rationale:
      "Making /tmp its own file system allows an administrator to set additional mount options"
      "such as the noexec option on the mount, making /tmp useless for an attacker to install"
      "executable code. It would also prevent an attacker from establishing a hard link to a"
      "system setuid program and wait for it to be updated. Once the program was updated,"
      "the hard link would be broken, and the attacker would have his own copy of the"
      "program. If the program happened to have a security vulnerability, the attacker could"
      "continue to exploit the known flaw."
      "This can be accomplished by either mounting tmpfs to /tmp, or creating a separate"
      "partition for /tmp."
    remediation:
      "First ensure that systemd is correctly configured to ensure that /tmp will be mounted at"""
      "boot time."
      "`# systemctl unmask tmp.mount`"
      "For specific configuration requirements of the /tmp mount for your environment, modify"
      "/etc/fstab."
      "Example of using tmpfs with specific mount options:"
      "`tmpfs /tmp tmpfs defaults,rw,nosuid,nodev,noexec,relatime,size=2G 0 0`"
      "Note: the size=2G is an example of setting a specific size for tmpfs."
      "Example of using a volume or disk with specific mount options. The source location of"
      "the volume or disk will vary depending on your environment:"
      "`<device> /tmp <fstype> defaults,nodev,nosuid,noexec 0 0`"
    cis_benchmark: {
      profile_level: 1
      severity: LOW
    }
    scan_instructions:
      "scan_type_specific:{instance_scanning:{"
      "  check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{single_file:{path:\"/proc/self/mountinfo\"}}"
      "      content_entry:{"
      "        match_type: ALL_MATCH_ANY_ORDER"
      "        match_criteria: {"
      "          filter_regex: \".* /tmp .*- .*\""
      "          expected_regex: \".* /tmp .*- tmpfs tmpfs.*\""
      "        }"
      "      }"
      "    }"
      "    file_checks:{"
      "      files_to_check:{single_file:{path:\"/usr/share/systemd/tmp.mount\"}}"
      "      content_entry:{"
      "        match_type: ALL_MATCH_ANY_ORDER"
      "        match_criteria: {"
      "          filter_regex: \"Type=.*\""
      "          expected_regex: \"Type=tmpfs\""
      "        }"
      "      }"
      "    }"
      "  }"
      "}"
      "image_scanning:{"
      "  check_alternatives:{"
      "      file_checks:{"
      "      files_to_check:{single_file:{path:\"/usr/share/systemd/tmp.mount\"}}"
      "      content_entry:{"
      "        match_type: ALL_MATCH_ANY_ORDER"
      "        match_criteria: {"
      "          filter_regex: \"Type=.*\""
      "          expected_regex: \"Type=tmpfs\""
      "        }"
      "      }"
      "    }"
      "  }"
      "}}"
  }
}

benchmark_configs: {
  id: "tmp-nodev"
  compliance_note: {
    version: { cpe_uri: "cpe:/o:debian:debian_linux:12.0" version: "1.1.0" benchmark_document: "CIS Debian Linux 12" }  		   
    title: "Ensure nodev option set on /tmp partition"
    description:
      "The nodev mount option specifies that the filesystem cannot contain "
      "special devices."
    rationale:
      "Since the /tmp filesystem is not intended to support devices, set "
      "this option to ensure that users cannot attempt to create block or "
      "character special devices in /tmp ."
    remediation:
      "- IF - a separate partition exists for /tmp."
      "Edit the /etc/fstab file and add nodev to the fourth field (mounting "
      "options) for the /tmp partition. See the fstab(5) manual page for "
      "more information.\n"
      "Run the following command to remount /tmp:\n"
      "```\n"
      "# mount -o remount,nodev /tmp\n"
      "```\n"
      "or\n"
      "Edit the config file in /usr/lib/systemd/system/tmp.mount.d to add "
      "nodev to the /tmp mount options:\n"
      "```\n"
      "[Mount]\n"
      "Options=mode=1777,strictatime,noexec,nodev,nosuid\n"
      "Run the following command to remount /tmp:\n"
      "# mount -o remount,nodev /tmp\n"
      "```\n"
    cis_benchmark: {
      profile_level: 1
      severity: LOW
    }
    scan_instructions:
      "scan_type_specific:{instance_scanning:{"
      "  check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{single_file:{path:\"/proc/self/mountinfo\"}}"
      "      content_entry:{"
      "        match_type: ALL_MATCH_ANY_ORDER"
      "        match_criteria: {"
      "          filter_regex: \".* /tmp .* - .*\""
      "          expected_regex: \".* /tmp .*nodev.* - .*\""
      "        }"
      "      }"
      "    }"
      "    file_checks:{"
      "      files_to_check:{single_file:{"
      "        path:\"/usr/share/systemd/tmp.mount\"}}"      
      "      content_entry:{"
      "        match_type: ALL_MATCH_ANY_ORDER"
      "        match_criteria: {"
      "          filter_regex: \"Options=.*\""
      "          expected_regex: \"Options=.*nodev.*\""
      "        }"
      "      }"
      "    }"
      "  }"
      "  check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{single_file:{path:\"/proc/self/mountinfo\"}}"
      "      content_entry:{"
      "        match_type: NONE_MATCH"
      "        match_criteria: {"
      "          filter_regex: \".* /tmp .* - .*\""
      "          expected_regex: \".* /tmp .* - .*\""
      "        }"
      "      }"
      "    }"
      "  }"
      "}"
      "image_scanning:{"
      "  check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{single_file:{"
      "        path:\"/usr/share/systemd/tmp.mount\"}}"      
      "      content_entry:{"
      "        match_type: ALL_MATCH_ANY_ORDER"
      "        match_criteria: {"
      "          filter_regex: \"Options=.*\""
      "          expected_regex: \"Options=.*nodev.*\""
      "        }"
      "      }"
      "    }"
      "  }"
      "}}"
  }
}

benchmark_configs: {
  id: "tmp-nosuid"
  compliance_note: {
    version: { cpe_uri: "cpe:/o:debian:debian_linux:12.0" version: "1.1.0" benchmark_document: "CIS Debian Linux 12" }  		   
    title: "Ensure nosuid option set on /tmp partition"
    description:
      "The nosuid mount option specifies that the filesystem cannot contain"
      "setuid files."
    rationale:
      "Since the /tmp filesystem is only intended for temporary file storage, set this option to"
      "ensure that users cannot create setuid files in /tmp."
    remediation:
      "- IF - a separate partition exists for /tmp."
      "Edit the /etc/fstab file and add nosuid to the fourth field (mounting options) for the"
      "/tmp partition."
      "Example:"
      "<device> /tmp <fstype> defaults,rw,nosuid,nodev,noexec,relatime 0 0"
      "Run the following command to remount /tmp with the configured options:"
      "# mount -o remount /tmp"
    cis_benchmark: {
      profile_level: 1
      severity: LOW
    }
    scan_instructions:
      "scan_type_specific:{instance_scanning:{"
      "  check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{single_file:{path:\"/proc/self/mountinfo\"}}"
      "      content_entry:{"
      "        match_type: ALL_MATCH_ANY_ORDER"
      "        match_criteria: {"
      "          filter_regex: \".* /tmp .* - .*\""
      "          expected_regex: \".* /tmp .*nosuid.* - .*\""
      "        }"
      "      }"
      "    }"
      "    file_checks:{"
      "      files_to_check:{single_file:{"
      "        path:\"/usr/share/systemd/tmp.mount\"}}"      
      "      content_entry:{"
      "        match_type: ALL_MATCH_ANY_ORDER"
      "        match_criteria: {"
      "          filter_regex: \"Options=.*\""
      "          expected_regex: \"Options=.*nosuid.*\""
      "        }"
      "      }"
      "    }"
      "  }"
      "  check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{single_file:{path:\"/proc/self/mountinfo\"}}"
      "      content_entry:{"
      "        match_type: NONE_MATCH"
      "        match_criteria: {"
      "          filter_regex: \".* /tmp .* - .*\""
      "          expected_regex: \".* /tmp .* - .*\""
      "        }"
      "      }"
      "    }"
      "  }"
      "}"
      "image_scanning:{"
      "  check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{single_file:{"
      "        path:\"/usr/share/systemd/tmp.mount\"}}"      
      "      content_entry:{"
      "        match_type: ALL_MATCH_ANY_ORDER"
      "        match_criteria: {"
      "          filter_regex: \"Options=.*\""
      "          expected_regex: \"Options=.*nosuid.*\""
      "        }"
      "      }"
      "    }"
      "  }"
      "}}"
  }
}

benchmark_configs: {
  id: "tmp-noexec"
  compliance_note: {
    version: { cpe_uri: "cpe:/o:debian:debian_linux:12.0" version: "1.1.0" benchmark_document: "CIS Debian Linux 12" } 
    title: "Ensure noexec option set on /tmp partition"
    description:
      "The noexec mount option specifies that the filesystem cannot contain "
      "executable binaries."
    rationale:
      "Since the /tmp filesystem is only intended for temporary file storage, set this option to"
      "ensure that users cannot run executable binaries from /tmp."
    remediation:
      "- IF - a separate partition exists for /tmp."
      "Edit the /etc/fstab file and add noexec to the fourth field (mounting options) for the"	
      "/tmp partition."	   
      "Example:"  
      "<device> /tmp <fstype> defaults,rw,nosuid,nodev,noexec,relatime 0 0"	
      "Run the following command to remount /tmp with the configured options:" 
      "# mount -o remount /tmp"	 
    cis_benchmark: {
      profile_level: 1
      severity: LOW
    }
    scan_instructions:
      "scan_type_specific:{instance_scanning:{"
      "  check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{single_file:{path:\"/proc/self/mountinfo\"}}"
      "      content_entry:{"
      "        match_type: ALL_MATCH_ANY_ORDER"
      "        match_criteria: {"
      "          filter_regex: \".* /tmp .* - .*\""
      "          expected_regex: \".* /tmp .*noexec.* - .*\""
      "        }"
      "      }"
      "    }"
      "    file_checks:{"
      "      files_to_check:{single_file:{"
      "        path:\"/usr/share/systemd/tmp.mount\"}}"      
      "      content_entry:{"
      "        match_type: ALL_MATCH_ANY_ORDER"
      "        match_criteria: {"
      "          filter_regex: \"Options=.*\""
      "          expected_regex: \"Options=.*noexec.*\""
      "        }"
      "      }"
      "    }"
      "  }"
      "  check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{single_file:{path:\"/proc/self/mountinfo\"}}"
      "      content_entry:{"
      "        match_type: NONE_MATCH"
      "        match_criteria: {"
      "          filter_regex: \".* /tmp .* - .*\""
      "          expected_regex: \".* /tmp .* - .*\""
      "        }"
      "      }"
      "    }"
      "  }"
      "}"
      "image_scanning:{"
      "  check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{single_file:{"
      "        path:\"/usr/share/systemd/tmp.mount\"}}"      
      "      content_entry:{"
      "        match_type: ALL_MATCH_ANY_ORDER"
      "        match_criteria: {"
      "          filter_regex: \"Options=.*\""
      "          expected_regex: \"Options=.*noexec.*\""
      "        }"
      "      }"
      "    }"
      "  }"
      "}}"
  }
}

benchmark_configs: {
  id: "shm-configured"
  compliance_note: {
    version: { cpe_uri: "cpe:/o:debian:debian_linux:12.0" version: "1.1.0" benchmark_document: "CIS Debian Linux 12" }  		   
    title: "Ensure /dev/shm/ is configured"
    description:
      "The /dev/shm directory is a world-writable directory that can function as shared"
      "memory that facilitates inter process communication (IPC)."
    rationale:
      "Making /dev/shm its own file system allows an administrator to set additional mount"
      "options such as the noexec option on the mount, making /dev/shm useless for an"
      "attacker to install executable code. It would also prevent an attacker from establishing a"
      "hard link to a system setuid program and wait for it to be updated. Once the program"
      "was updated, the hard link would be broken and the attacker would have his own copy"
      "of the program. If the program happened to have a security vulnerability, the attacker"
      "could continue to exploit the known flaw."
      "This can be accomplished by mounting tmpfs to /dev/shm."
    remediation:
      "For specific configuration requirements of the /dev/shm mount for your environment,"
      "modify /etc/fstab."
      "Example:"
      "tmpfs /dev/shm tmpfs"
      "defaults,rw,nosuid,nodev,noexec,relatime,size=2G 0 0"
    cis_benchmark: {
      profile_level: 1
      severity: LOW
    }
    scan_instructions:
      "scan_type_specific:{instance_scanning:{"
      "  check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{single_file:{path:\"/proc/self/mountinfo\"}}"
      "      content_entry:{"
      "        match_type: ALL_MATCH_ANY_ORDER"
      "        match_criteria: {"
      "          filter_regex: \".* /dev/shm .*- .*\""
      "          expected_regex: \".* /dev/shm .*- tmpfs tmpfs.*\""
      "        }"
      "      }"
      "    }"
      "    file_checks:{"
      "      files_to_check:{single_file:{path:\"/etc/fstab\"}}"
      "      content_entry:{"
      "        match_type: ALL_MATCH_ANY_ORDER"
      "        match_criteria: {"
      "          filter_regex: \".*/dev/shm.*\""
      "          expected_regex: \"tmpfs.*\""
      "        }"
      "      }"
      "    }"
      "  }"
      "}"
      "image_scanning:{"
      "  check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{single_file:{path:\"/etc/fstab\"}}"
      "      content_entry:{"
      "        match_type: ALL_MATCH_ANY_ORDER"
      "        match_criteria: {"
      "          filter_regex: \".*/dev/shm.*\""
      "          expected_regex: \"tmpfs.*\""
      "        }"
      "      }"
      "    }"
      "  }"
      "}}"
  }
}

benchmark_configs: {
  id: "shm-nodev"
  compliance_note: {
    version: { cpe_uri: "cpe:/o:debian:debian_linux:12.0" version: "1.1.0" benchmark_document: "CIS Debian Linux 12" }  		   
    title: "Ensure nodev option set on /dev/shm partition"
    description:
      "The nodev mount option specifies that the filesystem cannot contain special devices."
    rationale:
      "Since the /dev/shm filesystem is not intended to support devices, set this option to"
      "ensure that users cannot attempt to create special devices in /dev/shm partitions."
    remediation:
      "- IF - a separate partition exists for /dev/shm."
      "Edit the /etc/fstab file and add nodev to the fourth field (mounting options) for the"
      "/dev/shm partition. See the fstab(5) manual page for more information."
      "Example:"
      "tmpfs /dev/shm tmpfs defaults,rw,nosuid,nodev,noexec,relatime 0 0"
      "Run the following command to remount /dev/shm with the configured options:"
      "# mount -o remount /dev/shm"
      "Note: It is recommended to use tmpfs as the device/filesystem type as /dev/shm is"
      "used as shared memory space by applications."
    cis_benchmark: {
      profile_level: 1
      severity: LOW
    }
    scan_instructions:
      "scan_type_specific:{instance_scanning:{"
      "  check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{single_file:{path:\"/proc/self/mountinfo\"}}"
      "      content_entry:{"
      "        match_type: ALL_MATCH_ANY_ORDER"
      "        match_criteria: {"
      "          filter_regex: \".* /dev/shm .* - .*\""
      "          expected_regex: \".* /dev/shm .*nodev.* - .*\""
      "        }"
      "      }"
      "    }"
      "    file_checks:{"
      "      files_to_check:{single_file:{"
      "        path:\"/etc/fstab\"}}"      
      "      content_entry:{"
      "        match_type: ALL_MATCH_ANY_ORDER"
      "        match_criteria: {"
      "          filter_regex: \".*/dev/shm.*\""
      "          expected_regex: \".*nodev.*\""
      "        }"
      "      }"
      "    }"
      "  }"
      "  check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{single_file:{path:\"/proc/self/mountinfo\"}}"
      "      content_entry:{"
      "        match_type: NONE_MATCH"
      "        match_criteria: {"
      "          filter_regex: \".* /dev/shm .* - .*\""
      "          expected_regex: \".* /dev/shm .* - .*\""
      "        }"
      "      }"
      "    }"
      "  }"
      "}"
      "image_scanning:{"
      "  check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{single_file:{"
      "        path:\"/etc/fstab\"}}"      
      "      content_entry:{"
      "        match_type: ALL_MATCH_ANY_ORDER"
      "        match_criteria: {"
      "          filter_regex: \".*/dev/shm.*\""
      "          expected_regex: \".*nodev.*\""
      "        }"
      "      }"
      "    }"
      "  }"
      "}}"
  }
}

benchmark_configs: {
  id: "shm-nosuid"
  compliance_note: {
    version: { cpe_uri: "cpe:/o:debian:debian_linux:12.0" version: "1.1.0" benchmark_document: "CIS Debian Linux 12" }  		   
    title: "Ensure nosuid option set on /dev/shm partition"
    description:
      "The nosuid mount option specifies that the filesystem cannot contain setuid files."
    rationale:
      "Setting this option on a file system prevents users from introducing privileged programs"
      "onto the system and allowing non-root users to execute them."
    remediation:
      "- IF - a separate partition exists for /dev/shm."
      "Edit the /etc/fstab file and add nosuid to the fourth field (mounting options) for the"
      "/dev/shm partition. See the fstab(5) manual page for more information."
      "Example:"
      "tmpfs /dev/shm tmpfs defaults,rw,nosuid,nosuid,noexec,relatime 0 0"
      "Run the following command to remount /dev/shm with the configured options:"
      "# mount -o remount /dev/shm"
      "Note: It is recommended to use tmpfs as the device/filesystem type as /dev/shm is"
      "used as shared memory space by applications."
    cis_benchmark: {
      profile_level: 1
      severity: LOW
    }
    scan_instructions:
      "scan_type_specific:{instance_scanning:{"
      "  check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{single_file:{path:\"/proc/self/mountinfo\"}}"
      "      content_entry:{"
      "        match_type: ALL_MATCH_ANY_ORDER"
      "        match_criteria: {"
      "          filter_regex: \".* /dev/shm/ .* - .*\""
      "          expected_regex: \".* /dev/shm .*nosuid.* - .*\""
      "        }"
      "      }"
      "    }"
      "    file_checks:{"
      "      files_to_check:{single_file:{"
      "        path:\"/etc/fstab\"}}"      
      "      content_entry:{"
      "        match_type: ALL_MATCH_ANY_ORDER"
      "        match_criteria: {"
      "          filter_regex: \".*/dev/shm.*\""
      "          expected_regex: \".*nosuid.*\""
      "        }"
      "      }"
      "    }"
      "  }"
      "  check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{single_file:{path:\"/proc/self/mountinfo\"}}"
      "      content_entry:{"
      "        match_type: NONE_MATCH"
      "        match_criteria: {"
      "          filter_regex: \".* /dev/shm .* - .*\""
      "          expected_regex: \".* /dev/shm .* - .*\""
      "        }"
      "      }"
      "    }"
      "  }"
      "}"
      "image_scanning:{"
      "  check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{single_file:{"
      "        path:\"/etc/fstab\"}}"      
      "      content_entry:{"
      "        match_type: ALL_MATCH_ANY_ORDER"
      "        match_criteria: {"
      "          filter_regex: \".*/dev/shm.*\""
      "          expected_regex: \".*nosuid.*\""
      "        }"
      "      }"
      "    }"
      "  }"
      "}}"
  }
}

benchmark_configs: {
  id: "shm-noexec"
  compliance_note: {
    version: { cpe_uri: "cpe:/o:debian:debian_linux:12.0" version: "1.1.0" benchmark_document: "CIS Debian Linux 12" }  		   
    title: "Ensure noexec option set on /dev/shm partition"
    description:
      "The noexec mount option specifies that the filesystem cannot contain executable binaries."
    rationale:
      "Setting this option on a file system prevents users from executing programs from shared"
      "memory. This deters users from introducing potentially malicious software on the"
      "system."
    remediation:
      "- IF - a separate partition exists for /dev/shm."
      "Edit the /etc/fstab file and add noexec to the fourth field (mounting options) for the"
      "/dev/shm partition."
      "Example:"
      "tmpfs /dev/shm tmpfs defaults,rw,noexec,nodev,noexec,relatime 0 0"
      "Run the following command to remount /dev/shm with the configured options:"
      "# mount -o remount /dev/shm"
      "Note: It is recommended to use tmpfs as the device/filesystem type as /dev/shm is"
      "used as shared memory space by applications."
    cis_benchmark: {
      profile_level: 1
      severity: LOW
    }
    scan_instructions:
      "scan_type_specific:{instance_scanning:{"
      "  check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{single_file:{path:\"/proc/self/mountinfo\"}}"
      "      content_entry:{"
      "        match_type: ALL_MATCH_ANY_ORDER"
      "        match_criteria: {"
      "          filter_regex: \".* /dev/shm .* - .*\""
      "          expected_regex: \".* /dev/shm .*noexec.* - .*\""
      "        }"
      "      }"
      "    }"
      "    file_checks:{"
      "      files_to_check:{single_file:{"
      "        path:\"/etc/fstab\"}}"      
      "      content_entry:{"
      "        match_type: ALL_MATCH_ANY_ORDER"
      "        match_criteria: {"
      "          filter_regex: \".*/dev/shm.*\""
      "          expected_regex: \".*noexec.*\""
      "        }"
      "      }"
      "    }"
      "  }"
      "  check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{single_file:{path:\"/proc/self/mountinfo\"}}"
      "      content_entry:{"
      "        match_type: NONE_MATCH"
      "        match_criteria: {"
      "          filter_regex: \".* /dev/shm .* - .*\""
      "          expected_regex: \".* /dev/shm .* - .*\""
      "        }"
      "      }"
      "    }"
      "  }"
      "}"
      "image_scanning:{"
      "  check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{single_file:{"
      "        path:\"/etc/fstab\"}}"      
      "      content_entry:{"
      "        match_type: ALL_MATCH_ANY_ORDER"
      "        match_criteria: {"
      "          filter_regex: \".*/dev/shm.*\""
      "          expected_regex: \".*noexec.*\""
      "        }"
      "      }"
      "    }"
      "  }"
      "}}"
  }
}

benchmark_configs: {
  id: "separate-partition-home"
  compliance_note: {
    version: { cpe_uri: "cpe:/o:debian:debian_linux:12.0" version: "1.1.0" benchmark_document: "CIS Debian Linux 12" }	   
    title: "Ensure separate partition exists for /home"
    description: "The /home directory is used to support disk storage needs of local users."
    rationale:
      "The default installation only creates a single / partition. Since the /home directory"
      "contains user generated data, there is a risk of resource exhaustion. It will essentially"
      "have the whole disk available to fill up and impact the system as a whole. In addition,"
      "other operations on the system could fill up the disk unrelated to /home and impact all"
      "local users."
      "Configuring /home as its own file system allows an administrator to set additional mount"
      "options such as noexec/nosuid/nodev. These options limit an attacker's ability to"
      "create exploits on the system. In the case of /home options such as"
      "usrquota/grpquota may be considered to limit the impact that users can have on each"
      "other with regards to disk resource exhaustion. Other options allow for specific"
      "behavior. See man mount for exact details regarding filesystem-independent and"
      "filesystem-specific options."
      "As /home contains user data, care should be taken to ensure the security and integrity"
      "of the data and mount point."
    remediation:
      "For new installations, during installation create a custom partition setup and specify a"
      "separate partition for /home."
      "For systems that were previously installed, create a new partition and configure"
      "/etc/fstab as appropriate."
    cis_benchmark: {
      profile_level: 2
      severity: LOW
    }
    scan_instructions:
      "scan_type_specific:{instance_scanning:{"
      "  check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{single_file:{path:\"/proc/self/mountinfo\"}}"
      "      content_entry:{"
      "        match_type: ALL_MATCH_ANY_ORDER"
      "        match_criteria: {"
      "          filter_regex: \".* /home .* - .*\""
      "          expected_regex: \".* /home .*\""
      "        }"
      "      }"
      "    }"
      "    file_checks:{"
      "      files_to_check:{single_file:{"
      "        path:\"/etc/fstab\"}}"      
      "      content_entry:{"
      "        match_type: ALL_MATCH_ANY_ORDER"
      "        match_criteria: {"
      "          filter_regex: \".*/home.*\""
      "          expected_regex: \".*/home.*\""
      "        }"
      "      }"
      "    }"
      "  }"
      "}"
      "image_scanning:{"
      "  check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{single_file:{"
      "        path:\"/etc/fstab\"}}"      
      "      content_entry:{"
      "        match_type: ALL_MATCH_ANY_ORDER"
      "        match_criteria: {"
      "          filter_regex: \".*/home.*\""
      "          expected_regex: \".*/home.*\""
      "        }"
      "      }"
      "    }"
      "  }"
      "}}"
  }
}

benchmark_configs: {
  id: "home-nodev"
  compliance_note: {
    version: { cpe_uri: "cpe:/o:debian:debian_linux:12.0" version: "1.1.0" benchmark_document: "CIS Debian Linux 12" }  		   
    title: "Ensure nodev option set on /home partition"
    description:
      "The nodev mount option specifies that the filesystem cannot contain special devices."
    rationale:
      "Since the /home filesystem is not intended to support devices, set this option to ensure"
      "that users cannot create a block or character special devices in /home."
    remediation:
      "- IF - a separate partition exists for /home."
      "Edit the /etc/fstab file and add nodev to the fourth field (mounting options) for the"
      "/home partition."
      "Example:"
      "<device> /home <fstype> defaults,rw,nosuid,nodev,noexec,relatime 0 0"
      "Run the following command to remount /home with the configured options:"
      "# mount -o remount /home"
    cis_benchmark: {
      profile_level: 1
      severity: LOW
    }
    scan_instructions:
      "scan_type_specific:{instance_scanning:{"
      "  check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{single_file:{path:\"/proc/self/mountinfo\"}}"
      "      content_entry:{"
      "        match_type: ALL_MATCH_ANY_ORDER"
      "        match_criteria: {"
      "          filter_regex: \".* /home .* - .*\""
      "          expected_regex: \".* /home .*nodev.* - .*\""
      "        }"
      "      }"
      "    }"
      "    file_checks:{"
      "      files_to_check:{single_file:{"
      "        path:\"/etc/fstab\"}}"      
      "      content_entry:{"
      "        match_type: ALL_MATCH_ANY_ORDER"
      "        match_criteria: {"
      "          filter_regex: \".*/home.*\""
      "          expected_regex: \".*nodev.*\""
      "        }"
      "      }"
      "    }"
      "  }"
      "  check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{single_file:{path:\"/proc/self/mountinfo\"}}"
      "      content_entry:{"
      "        match_type: NONE_MATCH"
      "        match_criteria: {"
      "          filter_regex: \".* /home .* - .*\""
      "          expected_regex: \".* /home .* - .*\""
      "        }"
      "      }"
      "    }"
      "  }"
      "}"
      "image_scanning:{"
      "  check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{single_file:{"
      "        path:\"/etc/fstab\"}}"      
      "      content_entry:{"
      "        match_type: ALL_MATCH_ANY_ORDER"
      "        match_criteria: {"
      "          filter_regex: \".*/home.*\""
      "          expected_regex: \".*nodev.*\""
      "        }"
      "      }"
      "    }"
      "  }"
      "}}"
  }
}

benchmark_configs: {
  id: "home-nosuid"
  compliance_note: {
    version: { cpe_uri: "cpe:/o:debian:debian_linux:12.0" version: "1.1.0" benchmark_document: "CIS Debian Linux 12" }
    title: "Ensure nosuid option set on /home partition"
    description:
      "The nosuid mount option specifies that the filesystem cannot contain setuid files."
    rationale:
      "Since the /home filesystem is only intended for user file storage, set this option to"
      "ensure that users cannot create setuid files in /home."
    remediation:
      "- IF - a separate partition exists for /home."
      "Edit the /etc/fstab file and add nosuid to the fourth field (mounting options) for the"
      "/home partition."
      "Example:"
      "<device> /home <fstype> defaults,rw,nosuid,nodev,noexec,relatime 0 0"
      "Run the following command to remount /home with the configured options:"
      "# mount -o remount /home"
    cis_benchmark: {
      profile_level: 1
      severity: LOW
    }
    scan_instructions:
      "scan_type_specific:{instance_scanning:{"
      "  check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{single_file:{path:\"/proc/self/mountinfo\"}}"
      "      content_entry:{"
      "        match_type: ALL_MATCH_ANY_ORDER"
      "        match_criteria: {"
      "          filter_regex: \".* /home .* - .*\""
      "          expected_regex: \".* /home .*nosuid.* - .*\""
      "        }"
      "      }"
      "    }"
      "    file_checks:{"
      "      files_to_check:{single_file:{"
      "        path:\"/etc/fstab\"}}"      
      "      content_entry:{"
      "        match_type: ALL_MATCH_ANY_ORDER"
      "        match_criteria: {"
      "          filter_regex: \".*/home.*\""
      "          expected_regex: \".*nosuid.*\""
      "        }"
      "      }"
      "    }"
      "  }"
      "  check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{single_file:{path:\"/proc/self/mountinfo\"}}"
      "      content_entry:{"
      "        match_type: NONE_MATCH"
      "        match_criteria: {"
      "          filter_regex: \".* /home .* - .*\""
      "          expected_regex: \".* /home .* - .*\""
      "        }"
      "      }"
      "    }"
      "  }"
      "}"
      "image_scanning:{"
      "  check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{single_file:{"
      "        path:\"/etc/fstab\"}}"      
      "      content_entry:{"
      "        match_type: ALL_MATCH_ANY_ORDER"
      "        match_criteria: {"
      "          filter_regex: \".*/home.*\""
      "          expected_regex: \".*nosuid.*\""
      "        }"
      "      }"
      "    }"
      "  }"
      "}}"
  }
}

benchmark_configs: {
  id: "separate-partition-var"
  compliance_note: {
    version: { cpe_uri: "cpe:/o:debian:debian_linux:12.0" version: "1.1.0" benchmark_document: "CIS Debian Linux 12" }
    title: "Ensure separate partition exists for /var"
    description:
      "The /var directory is used by daemons and other system services to temporarily store dynamic data. "
      "Some directories created by these processes may be world-writable."
    rationale:
      "The reasoning for mounting /var on a separate partition is as follows."
      "The default installation only creates a single / partition. Since the /var directory may"
      "contain world writable files and directories, there is a risk of resource exhaustion. It will"
      "essentially have the whole disk available to fill up and impact the system. In addition,"
      "other operations on the system could fill up the disk unrelated to /var and cause"
      "unintended behavior across the system as the disk is full. See man auditd.conf for"
      "details."
      "Configuring /var as its own file system allows an administrator to set additional mount"
      "options such as noexec/nosuid/nodev. These options limit an attacker's ability to"
      "create exploits on the system. Other options allow for specific behavior. See man mount"
      "for exact details regarding filesystem-independent and filesystem-specific options."
      "An example of exploiting /var may be an attacker establishing a hard-link to a system"
      "setuid program and waiting for it to be updated. Once the program is updated, the"
      "hard-link can be broken and the attacker would have their own copy of the program. If"
      "the program happened to have a security vulnerability, the attacker could continue to"
      "exploit the known flaw."
    remediation:
      "For new installations, during installation create a custom partition setup and specify a"
      "separate partition for /var."
      "For systems that were previously installed, create a new partition and configure"
      "/etc/fstab as appropriate."
    cis_benchmark: {
      profile_level: 2
      severity: LOW
    }
    scan_instructions:
      "scan_type_specific:{instance_scanning:{"
      "  check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{single_file:{path:\"/proc/self/mountinfo\"}}"
      "      content_entry:{"
      "        match_type: ALL_MATCH_ANY_ORDER"
      "        match_criteria: {"
      "          filter_regex: \".* /var .* - .*\""
      "          expected_regex: \".* /var .* - .*\""
      "        }"
      "      }"
      "    }"
      "    file_checks:{"
      "      files_to_check:{single_file:{"
      "        path:\"/etc/fstab\"}}"      
      "      content_entry:{"
      "        match_type: ALL_MATCH_ANY_ORDER"
      "        match_criteria: {"
      "          filter_regex: \".*/var .*\""
      "          expected_regex: \".*/var .*\""
      "        }"
      "      }"
      "    }"
      "  }"
      "}"
      "image_scanning:{"
      "  check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{single_file:{"
      "        path:\"/etc/fstab\"}}"      
      "      content_entry:{"
      "        match_type: ALL_MATCH_ANY_ORDER"
      "        match_criteria: {"
      "          filter_regex: \".*/var .*\""
      "          expected_regex: \".*/var .*\""
      "        }"
      "      }"
      "    }"
      "  }"
      "}}"
  }
}

benchmark_configs: {
  id: "var-nodev"
  compliance_note: {
    version: { cpe_uri: "cpe:/o:debian:debian_linux:12.0" version: "1.1.0" benchmark_document: "CIS Debian Linux 12" }  		   
    title: "Ensure nodev option set on /var partition"
    description:
      "The nodev mount option specifies that the filesystem cannot contain special devices."
    rationale:
      "Since the /var filesystem is not intended to support devices, set this option to ensure"
      "that users cannot create a block or character special devices in /var."
    remediation:
      "- IF - a separate partition exists for /var."
      "Edit the /etc/fstab file and add nodev to the fourth field (mounting options) for the"
      "/var partition."
      "Example:"
      "<device> /var <fstype> defaults,rw,nosuid,nodev,noexec,relatime 0 0"
      "Run the following command to remount /var with the configured options:"
      "# mount -o remount /var"
    cis_benchmark: {
      profile_level: 1
      severity: LOW
    }
    scan_instructions:
      "scan_type_specific:{instance_scanning:{"
      "  check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{single_file:{path:\"/proc/self/mountinfo\"}}"
      "      content_entry:{"
      "        match_type: ALL_MATCH_ANY_ORDER"
      "        match_criteria: {"
      "          filter_regex: \".* /var .* - .*\""
      "          expected_regex: \".* /var .*nodev.* - .*\""
      "        }"
      "      }"
      "    }"
      "    file_checks:{"
      "      files_to_check:{single_file:{"
      "        path:\"/etc/fstab\"}}"      
      "      content_entry:{"
      "        match_type: ALL_MATCH_ANY_ORDER"
      "        match_criteria: {"
      "          filter_regex: \".*/var .*\""
      "          expected_regex: \".*nodev.*\""
      "        }"
      "      }"
      "    }"
      "  }"
      "  check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{single_file:{path:\"/proc/self/mountinfo\"}}"
      "      content_entry:{"
      "        match_type: NONE_MATCH"
      "        match_criteria: {"
      "          filter_regex: \".* /var .* - .*\""
      "          expected_regex: \".* /var .* - .*\""
      "        }"
      "      }"
      "    }"
      "  }"
      "}"
      "image_scanning:{"
      "  check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{single_file:{"
      "        path:\"/etc/fstab\"}}"      
      "      content_entry:{"
      "        match_type: ALL_MATCH_ANY_ORDER"
      "        match_criteria: {"
      "          filter_regex: \".*/var .*\""
      "          expected_regex: \".*nodev.*\""
      "        }"
      "      }"
      "    }"
      "  }"
      "}}"
  }
}

benchmark_configs: {
  id: "var-nosuid"
  compliance_note: {
    version: { cpe_uri: "cpe:/o:debian:debian_linux:12.0" version: "1.1.0" benchmark_document: "CIS Debian Linux 12" }  		   
    title: "Ensure nosuid option set on /var partition"
    description:
      "The nosuid mount option specifies that the filesystem cannot contain setuid files."
    rationale:
      "Since the /var filesystem is only intended for variable files such as logs, set this option"
      "to ensure that users cannot create setuid files in /var."
    remediation:
      "- IF - a separate partition exists for /var."
      "Edit the /etc/fstab file and add nosuid to the fourth field (mounting options) for the"
      "/var partition."
      "Example:"
      "<device> /var <fstype> defaults,rw,nosuid,nodev,noexec,relatime 0 0"
      "Run the following command to remount /var with the configured options:"
      "# mount -o remount /var"
    cis_benchmark: {
      profile_level: 1
      severity: LOW
    }
    scan_instructions:
      "scan_type_specific:{instance_scanning:{"
      "  check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{single_file:{path:\"/proc/self/mountinfo\"}}"
      "      content_entry:{"
      "        match_type: ALL_MATCH_ANY_ORDER"
      "        match_criteria: {"
      "          filter_regex: \".* /var .* - .*\""
      "          expected_regex: \".* /var .*nosuid.* - .*\""
      "        }"
      "      }"
      "    }"
      "    file_checks:{"
      "      files_to_check:{single_file:{"
      "        path:\"/etc/fstab\"}}"      
      "      content_entry:{"
      "        match_type: ALL_MATCH_ANY_ORDER"
      "        match_criteria: {"
      "          filter_regex: \".*/var .*\""
      "          expected_regex: \".*nosuid.*\""
      "        }"
      "      }"
      "    }"
      "  }"
      "  check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{single_file:{path:\"/proc/self/mountinfo\"}}"
      "      content_entry:{"
      "        match_type: NONE_MATCH"
      "        match_criteria: {"
      "          filter_regex: \".* /var .* - .*\""
      "          expected_regex: \".* /var .* - .*\""
      "        }"
      "      }"
      "    }"
      "  }"
      "}"
      "image_scanning:{"
      "  check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{single_file:{"
      "        path:\"/etc/fstab\"}}"      
      "      content_entry:{"
      "        match_type: ALL_MATCH_ANY_ORDER"
      "        match_criteria: {"
      "          filter_regex: \".*/var .*\""
      "          expected_regex: \".*nosuid.*\""
      "        }"
      "      }"
      "    }"
      "  }"
      "}}"
  }
}

benchmark_configs: {
  id: "separate-partition-var-tmp"
  compliance_note: {
    version: { cpe_uri: "cpe:/o:debian:debian_linux:12.0" version: "1.1.0" benchmark_document: "CIS Debian Linux 12" }
    title: "Ensure separate partition exists for /var/tmp"
    description:
      "The /var/tmp directory is a world-writable directory used for temporary storage by all"
      "users and some applications. Temporary files residing in /var/tmp are to be preserved"
      "between reboots."
    rationale:
      "The default installation only creates a single / partition. Since the /var/tmp directory is"
      "world-writable, there is a risk of resource exhaustion. In addition, other operations on"
      "the system could fill up the disk unrelated to /var/tmp and cause potential disruption to"
      "daemons as the disk is full."
      "Configuring /var/tmp as its own file system allows an administrator to set additional"
      "mount options such as noexec/nosuid/nodev. These options limit an attacker's ability"
      "to create exploits on the system."
    remediation:
      "For new installations, during installation create a custom partition setup and specify a"
      "separate partition for /var/tmp."
      "For systems that were previously installed, create a new partition and configure"
      "/etc/fstab as appropriate."
    cis_benchmark: {
      profile_level: 2
      severity: LOW
    }
    scan_instructions:
      "scan_type_specific:{instance_scanning:{"
      "  check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{single_file:{path:\"/proc/self/mountinfo\"}}"
      "      content_entry:{"
      "        match_type: ALL_MATCH_ANY_ORDER"
      "        match_criteria: {"
      "          filter_regex: \".* /var/tmp .* - .*\""
      "          expected_regex: \".* /var/tmp .* - .*\""
      "        }"
      "      }"
      "    }"
      "    file_checks:{"
      "      files_to_check:{single_file:{"
      "        path:\"/etc/fstab\"}}"      
      "      content_entry:{"
      "        match_type: ALL_MATCH_ANY_ORDER"
      "        match_criteria: {"
      "          filter_regex: \".*/var/tmp.*\""
      "          expected_regex: \".*/var/tmp.*\""
      "        }"
      "      }"
      "    }"
      "  }"
      "}"
      "image_scanning:{"
      "  check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{single_file:{"
      "        path:\"/etc/fstab\"}}"      
      "      content_entry:{"
      "        match_type: ALL_MATCH_ANY_ORDER"
      "        match_criteria: {"
      "          filter_regex: \".*/var/tmp.*\""
      "          expected_regex: \".*/var/tmp.*\""
      "        }"
      "      }"
      "    }"
      "  }"
      "}}"
  }
}

benchmark_configs: {
  id: "var-tmp-nodev"
  compliance_note: {
    version: { cpe_uri: "cpe:/o:debian:debian_linux:12.0" version: "1.1.0" benchmark_document: "CIS Debian Linux 12" }  		   
    title: "Ensure nodev option set on /var/tmp partition"
    description:
      "The nodev mount option specifies that the filesystem cannot contain special devices."
    rationale:
      "Since the /var/tmp filesystem is not intended to support devices, set this option to ensure"
      "that users cannot create a block or character special devices in /var/tmp."
    remediation:
      "- IF - a separate partition exists for /var/tmp."
      "Edit the /etc/fstab file and add nodev to the fourth field (mounting options) for the"
      "/var/tmp partition."
      "Example:"
      "<device> /var/tmp <fstype> defaults,rw,nosuid,nodev,noexec,relatime 0 0"
      "Run the following command to remount /var/tmp with the configured options:"
      "# mount -o remount /var/tmp"
    cis_benchmark: {
      profile_level: 1
      severity: LOW
    }
    scan_instructions:
      "scan_type_specific:{instance_scanning:{"
      "  check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{single_file:{path:\"/proc/self/mountinfo\"}}"
      "      content_entry:{"
      "        match_type: ALL_MATCH_ANY_ORDER"
      "        match_criteria: {"
      "          filter_regex: \".* /var/tmp .* - .*\""
      "          expected_regex: \".* /var/tmp .*nodev.* - .*\""
      "        }"
      "      }"
      "    }"
      "    file_checks:{"
      "      files_to_check:{single_file:{"
      "        path:\"/etc/fstab\"}}"      
      "      content_entry:{"
      "        match_type: ALL_MATCH_ANY_ORDER"
      "        match_criteria: {"
      "          filter_regex: \".*/var/tmp .*\""
      "          expected_regex: \".*nodev.*\""
      "        }"
      "      }"
      "    }"
      "  }"
      "  check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{single_file:{path:\"/proc/self/mountinfo\"}}"
      "      content_entry:{"
      "        match_type: NONE_MATCH"
      "        match_criteria: {"
      "          filter_regex: \".* /var/tmp .* - .*\""
      "          expected_regex: \".* /var/tmp .* - .*\""
      "        }"
      "      }"
      "    }"
      "  }"
      "}"
      "image_scanning:{"
      "  check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{single_file:{"
      "        path:\"/etc/fstab\"}}"      
      "      content_entry:{"
      "        match_type: ALL_MATCH_ANY_ORDER"
      "        match_criteria: {"
      "          filter_regex: \".*/var/tmp .*\""
      "          expected_regex: \".*nodev.*\""
      "        }"
      "      }"
      "    }"
      "  }"
      "}}"
  }
}

benchmark_configs: {
  id: "var-tmp-nosuid"
  compliance_note: {
    version: { cpe_uri: "cpe:/o:debian:debian_linux:12.0" version: "1.1.0" benchmark_document: "CIS Debian Linux 12" }  		   
    title: "Ensure nosuid option set on /var/tmp partition"
    description:
      "The nosuid mount option specifies that the filesystem cannot contain setuid files."
    rationale:
      "Since the /var/tmp filesystem is only intended for temporary file storage, set this option"
      "to ensure that users cannot create setuid files in /var/tmp."
    remediation:
      "- IF - a separate partition exists for /var/tmp."
      "Edit the /etc/fstab file and add nosuid to the fourth field (mounting options) for the"
      "/var/tmp partition."
      "Example:"
      "<device> /var/tmp <fstype> defaults,rw,nosuid,nodev,noexec,relatime 0 0"
      "Run the following command to remount /var/tmp with the configured options:"
      "# mount -o remount /var/tmp"
    cis_benchmark: {
      profile_level: 1
      severity: LOW
    }
    scan_instructions:
      "scan_type_specific:{instance_scanning:{"
      "  check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{single_file:{path:\"/proc/self/mountinfo\"}}"
      "      content_entry:{"
      "        match_type: ALL_MATCH_ANY_ORDER"
      "        match_criteria: {"
      "          filter_regex: \".* /var/tmp .* - .*\""
      "          expected_regex: \".* /var/tmp .*nosuid.* - .*\""
      "        }"
      "      }"
      "    }"
      "    file_checks:{"
      "      files_to_check:{single_file:{"
      "        path:\"/etc/fstab\"}}"      
      "      content_entry:{"
      "        match_type: ALL_MATCH_ANY_ORDER"
      "        match_criteria: {"
      "          filter_regex: \".*/var/tmp .*\""
      "          expected_regex: \".*nosuid.*\""
      "        }"
      "      }"
      "    }"
      "  }"
      "  check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{single_file:{path:\"/proc/self/mountinfo\"}}"
      "      content_entry:{"
      "        match_type: NONE_MATCH"
      "        match_criteria: {"
      "          filter_regex: \".* /var/tmp .* - .*\""
      "          expected_regex: \".* /var/tmp .* - .*\""
      "        }"
      "      }"
      "    }"
      "  }"
      "}"
      "image_scanning:{"
      "  check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{single_file:{"
      "        path:\"/etc/fstab\"}}"      
      "      content_entry:{"
      "        match_type: ALL_MATCH_ANY_ORDER"
      "        match_criteria: {"
      "          filter_regex: \".*/var/tmp .*\""
      "          expected_regex: \".*nosuid.*\""
      "        }"
      "      }"
      "    }"
      "  }"
      "}}"
  }
}

benchmark_configs: {
  id: "var-tmp-noexec"
  compliance_note: {
    version: { cpe_uri: "cpe:/o:debian:debian_linux:12.0" version: "1.1.0" benchmark_document: "CIS Debian Linux 12" }  		   
    title: "Ensure noexec option set on /var/tmp partition"
    description:
      "The noexec mount option specifies that the filesystem cannot contain executable binaries."
    rationale:
      "Since the /var/tmp filesystem is only intended for temporary file storage, set this option"
      "to ensure that users cannot run executable binaries from /var/tmp."
    remediation:
      "- IF - a separate partition exists for /var/tmp."
      "Edit the /etc/fstab file and add noexec to the fourth field (mounting options) for the"
      "/var/tmp partition."
      "Example:"
      "<device> /var/tmp <fstype> defaults,rw,nosuid,nodev,noexec,relatime 0 0"
      "Run the following command to remount /var/tmp with the configured options:"
      "# mount -o remount /var/tmp"
    cis_benchmark: {
      profile_level: 1
      severity: LOW
    }
    scan_instructions:
      "scan_type_specific:{instance_scanning:{"
      "  check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{single_file:{path:\"/proc/self/mountinfo\"}}"
      "      content_entry:{"
      "        match_type: ALL_MATCH_ANY_ORDER"
      "        match_criteria: {"
      "          filter_regex: \".* /var/tmp .* - .*\""
      "          expected_regex: \".* /var/tmp .*noexec.* - .*\""
      "        }"
      "      }"
      "    }"
      "    file_checks:{"
      "      files_to_check:{single_file:{"
      "        path:\"/etc/fstab\"}}"      
      "      content_entry:{"
      "        match_type: ALL_MATCH_ANY_ORDER"
      "        match_criteria: {"
      "          filter_regex: \".*/var/tmp .*\""
      "          expected_regex: \".*noexec.*\""
      "        }"
      "      }"
      "    }"
      "  }"
      "  check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{single_file:{path:\"/proc/self/mountinfo\"}}"
      "      content_entry:{"
      "        match_type: NONE_MATCH"
      "        match_criteria: {"
      "          filter_regex: \".* /var/tmp .* - .*\""
      "          expected_regex: \".* /var/tmp .* - .*\""
      "        }"
      "      }"
      "    }"
      "  }"
      "}"
      "image_scanning:{"
      "  check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{single_file:{"
      "        path:\"/etc/fstab\"}}"      
      "      content_entry:{"
      "        match_type: ALL_MATCH_ANY_ORDER"
      "        match_criteria: {"
      "          filter_regex: \".*/var/tmp .*\""
      "          expected_regex: \".*noexec.*\""
      "        }"
      "      }"
      "    }"
      "  }"
      "}}"
  }
}

benchmark_configs: {
  id: "separate-partition-var-log"
  compliance_note: {
    version: { cpe_uri: "cpe:/o:debian:debian_linux:12.0" version: "1.1.0" benchmark_document: "CIS Debian Linux 12" }
    title: "Ensure separate partition exists for /var/log"
    description:
      "The /var/log directory is used by system services to store log data."
    rationale:
      "The default installation only creates a single / partition. Since the /var/log directory"
      "contains log files which can grow quite large, there is a risk of resource exhaustion. It"
      "will essentially have the whole disk available to fill up and impact the system as a whole."
      "Configuring /var/log as its own file system allows an administrator to set additional"
      "mount options such as noexec/nosuid/nodev. These options limit an attackers ability"
      "to create exploits on the system. Other options allow for specific behavior. See man"
      "mount for exact details regarding filesystem-independent and filesystem-specific"
      "options."
      "As /var/log contains log files, care should be taken to ensure the security and integrity"
      "of the data and mount point."
    remediation:
      "For new installations, during installation create a custom partition setup and specify a"
      "separate partition for /var/log ."
      "For systems that were previously installed, create a new partition and configure"
      "/etc/fstab as appropriate."
    cis_benchmark: {
      profile_level: 2
      severity: LOW
    }
    scan_instructions:
      "scan_type_specific:{instance_scanning:{"
      "  check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{single_file:{path:\"/proc/self/mountinfo\"}}"
      "      content_entry:{"
      "        match_type: ALL_MATCH_ANY_ORDER"
      "        match_criteria: {"
      "          filter_regex: \".* /var/log .* - .*\""
      "          expected_regex: \".* /var/log .* - .*\""
      "        }"
      "      }"
      "    }"
      "    file_checks:{"
      "      files_to_check:{single_file:{"
      "        path:\"/etc/fstab\"}}"      
      "      content_entry:{"
      "        match_type: ALL_MATCH_ANY_ORDER"
      "        match_criteria: {"
      "          filter_regex: \".*/var/log .*\""
      "          expected_regex: \".*/var/log .*\""
      "        }"
      "      }"
      "    }"
      "  }"
      "}"
      "image_scanning:{"
      "  check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{single_file:{"
      "        path:\"/etc/fstab\"}}"      
      "      content_entry:{"
      "        match_type: ALL_MATCH_ANY_ORDER"
      "        match_criteria: {"
      "          filter_regex: \".*/var/log .*\""
      "          expected_regex: \".*/var/log .*\""
      "        }"
      "      }"
      "    }"
      "  }"
      "}}"
  }
}

benchmark_configs: {
  id: "var-log-nodev"
  compliance_note: {
    version: { cpe_uri: "cpe:/o:debian:debian_linux:12.0" version: "1.1.0" benchmark_document: "CIS Debian Linux 12" }  		 
    title: "Ensure nodev option set on /var/log partition"
    description:
      "The nodev mount option specifies that the filesystem cannot contain special devices."
    rationale:
      "Since the /var/log filesystem is not intended to support devices, set this option to"
      "ensure that users cannot create a block or character special devices in /var/log."
    remediation:
      "- IF - a separate partition exists for /var/log."
      "Edit the /etc/fstab file and add nodev to the fourth field (mounting options) for the"
      "/var/log partition."
      "Example:"
      "<device> /var/log <fstype> defaults,rw,nosuid,nodev,noexec,relatime 0 0"
      "Run the following command to remount /var/log with the configured options:"
      "# mount -o remount /var/log"
    cis_benchmark: {
      profile_level: 1
      severity: LOW
    }
    scan_instructions:
      "scan_type_specific:{instance_scanning:{"
      "  check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{single_file:{path:\"/proc/self/mountinfo\"}}"
      "      content_entry:{"
      "        match_type: ALL_MATCH_ANY_ORDER"
      "        match_criteria: {"
      "          filter_regex: \".* /var/log .* - .*\""
      "          expected_regex: \".* /var/log .*nodev.* - .*\""
      "        }"
      "      }"
      "    }"
      "    file_checks:{"
      "      files_to_check:{single_file:{"
      "        path:\"/etc/fstab\"}}"      
      "      content_entry:{"
      "        match_type: ALL_MATCH_ANY_ORDER"
      "        match_criteria: {"
      "          filter_regex: \".*/var/log .*\""
      "          expected_regex: \".*nodev.*\""
      "        }"
      "      }"
      "    }"
      "  }"
      "  check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{single_file:{path:\"/proc/self/mountinfo\"}}"
      "      content_entry:{"
      "        match_type: NONE_MATCH"
      "        match_criteria: {"
      "          filter_regex: \".* /var/log .* - .*\""
      "          expected_regex: \".* /var/log .* - .*\""
      "        }"
      "      }"
      "    }"
      "  }"
      "}"
      "image_scanning:{"
      "  check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{single_file:{"
      "        path:\"/etc/fstab\"}}"      
      "      content_entry:{"
      "        match_type: ALL_MATCH_ANY_ORDER"
      "        match_criteria: {"
      "          filter_regex: \".*/var/log .*\""
      "          expected_regex: \".*nodev.*\""
      "        }"
      "      }"
      "    }"
      "  }"
      "}}"
  }
}

benchmark_configs: {
  id: "var-log-nosuid"
  compliance_note: {
    version: { cpe_uri: "cpe:/o:debian:debian_linux:12.0" version: "1.1.0" benchmark_document: "CIS Debian Linux 12" }  		   
    title: "Ensure nosuid option set on /var/log partition"
    description:
      "The nosuid mount option specifies that the filesystem cannot contain setuid files."
    rationale:
      "Since the /var/log filesystem is only intended for log files, set this option to ensure"
      "that users cannot create setuid files in /var/log."
    remediation:
      "- IF - a separate partition exists for /var/log."
      "Edit the /etc/fstab file and add nosuid to the fourth field (mounting options) for the"
      "/var/log partition."
      "Example:"
      "<device> /var/log <fstype> defaults,rw,nosuid,nodev,noexec,relatime 0 0"
      "Run the following command to remount /var/log with the configured options:"
      "# mount -o remount /var/log"
    cis_benchmark: {
      profile_level: 1
      severity: LOW
    }
    scan_instructions:
      "scan_type_specific:{instance_scanning:{"
      "  check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{single_file:{path:\"/proc/self/mountinfo\"}}"
      "      content_entry:{"
      "        match_type: ALL_MATCH_ANY_ORDER"
      "        match_criteria: {"
      "          filter_regex: \".* /var/log .* - .*\""
      "          expected_regex: \".* /var/log .*nosuid.* - .*\""
      "        }"
      "      }"
      "    }"
      "    file_checks:{"
      "      files_to_check:{single_file:{"
      "        path:\"/etc/fstab\"}}"      
      "      content_entry:{"
      "        match_type: ALL_MATCH_ANY_ORDER"
      "        match_criteria: {"
      "          filter_regex: \".*/var/log .*\""
      "          expected_regex: \".*nosuid.*\""
      "        }"
      "      }"
      "    }"
      "  }"
      "  check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{single_file:{path:\"/proc/self/mountinfo\"}}"
      "      content_entry:{"
      "        match_type: NONE_MATCH"
      "        match_criteria: {"
      "          filter_regex: \".* /var/log .* - .*\""
      "          expected_regex: \".* /var/log .* - .*\""
      "        }"
      "      }"
      "    }"
      "  }"
      "}"
      "image_scanning:{"
      "  check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{single_file:{"
      "        path:\"/etc/fstab\"}}"      
      "      content_entry:{"
      "        match_type: ALL_MATCH_ANY_ORDER"
      "        match_criteria: {"
      "          filter_regex: \".*/var/log .*\""
      "          expected_regex: \".*nosuid.*\""
      "        }"
      "      }"
      "    }"
      "  }"
      "}}"
  }
}

benchmark_configs: {
  id: "var-log-noexec"
  compliance_note: {
    version: { cpe_uri: "cpe:/o:debian:debian_linux:12.0" version: "1.1.0" benchmark_document: "CIS Debian Linux 12" }  		   
    title: "Ensure noexec option set on /var/log partition"
    description:
      "The noexec mount option specifies that the filesystem cannot contain executable binaries."
    rationale:
      "Since the /var/log filesystem is only intended for log files, set this option to ensure"
      "that users cannot run executable binaries from /var/log."
    remediation:
      "- IF - a separate partition exists for /var/log."
      "Edit the /etc/fstab file and add noexec to the fourth field (mounting options) for the"
      "/var/log partition."
      "Example:"
      "<device> /var/log <fstype> defaults,rw,nosuid,nodev,noexec,relatime 0 0"
      "Run the following command to remount /var/log with the configured options:"
      "# mount -o remount /var/log"
    cis_benchmark: {
      profile_level: 1
      severity: LOW
    }
    scan_instructions:
      "scan_type_specific:{instance_scanning:{"
      "  check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{single_file:{path:\"/proc/self/mountinfo\"}}"
      "      content_entry:{"
      "        match_type: ALL_MATCH_ANY_ORDER"
      "        match_criteria: {"
      "          filter_regex: \".* /var/log .* - .*\""
      "          expected_regex: \".* /var/log .*noexec.* - .*\""
      "        }"
      "      }"
      "    }"
      "    file_checks:{"
      "      files_to_check:{single_file:{"
      "        path:\"/etc/fstab\"}}"      
      "      content_entry:{"
      "        match_type: ALL_MATCH_ANY_ORDER"
      "        match_criteria: {"
      "          filter_regex: \".*/var/log .*\""
      "          expected_regex: \".*noexec.*\""
      "        }"
      "      }"
      "    }"
      "  }"
      "  check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{single_file:{path:\"/proc/self/mountinfo\"}}"
      "      content_entry:{"
      "        match_type: NONE_MATCH"
      "        match_criteria: {"
      "          filter_regex: \".* /var/log .* - .*\""
      "          expected_regex: \".* /var/log .* - .*\""
      "        }"
      "      }"
      "    }"
      "  }"
      "}"
      "image_scanning:{"
      "  check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{single_file:{"
      "        path:\"/etc/fstab\"}}"      
      "      content_entry:{"
      "        match_type: ALL_MATCH_ANY_ORDER"
      "        match_criteria: {"
      "          filter_regex: \".*/var/log .*\""
      "          expected_regex: \".*noexec.*\""
      "        }"
      "      }"
      "    }"
      "  }"
      "}}"
  }
}

benchmark_configs: {
  id: "separate-partition-var-log-audit"
  compliance_note: {
    version: { cpe_uri: "cpe:/o:debian:debian_linux:12.0" version: "1.1.0" benchmark_document: "CIS Debian Linux 12" }
    title: "Ensure separate partition exists for /var/log/audit"
    description:
      "The auditing daemon, auditd, stores log data in the /var/log/audit directory."
    rationale:
      "The default installation only creates a single / partition. Since the /var/log/audit"
      "directory contains the audit.log file which can grow quite large, there is a risk of"
      "resource exhaustion. It will essentially have the whole disk available to fill up and impact"
      "the system as a whole. In addition, other operations on the system could fill up the disk"
      "unrelated to /var/log/audit and cause auditd to trigger its space_left_action as"
      "the disk is full. See man auditd.conf for details."
      "Configuring /var/log/audit as its own file system allows an administrator to set"
      "additional mount options such as noexec/nosuid/nodev. These options limit an"
      "attacker's ability to create exploits on the system. Other options allow for specific"
      "behavior. See man mount for exact details regarding filesystem-independent and"
      "filesystem-specific options."
      "As /var/log/audit contains audit logs, care should be taken to ensure the security"
      "and integrity of the data and mount point."
    remediation:
      "For new installations, during installation create a custom partition setup and specify a"
      "separate partition for /var/log/audit."
      "For systems that were previously installed, create a new partition and configure"
      "/etc/fstab as appropriate."
    cis_benchmark: {
      profile_level: 2
      severity: LOW
    }
    scan_instructions:
      "scan_type_specific:{instance_scanning:{"
      "  check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{single_file:{path:\"/proc/self/mountinfo\"}}"
      "      content_entry:{"
      "        match_type: ALL_MATCH_ANY_ORDER"
      "        match_criteria: {"
      "          filter_regex: \".* /var/log/audit .* - .*\""
      "          expected_regex: \".* /var/log/audit .* - .*\""
      "        }"
      "      }"
      "    }"
      "    file_checks:{"
      "      files_to_check:{single_file:{"
      "        path:\"/etc/fstab\"}}"      
      "      content_entry:{"
      "        match_type: ALL_MATCH_ANY_ORDER"
      "        match_criteria: {"
      "          filter_regex: \".*/var/log/audit .*\""
      "          expected_regex: \".*/var/log/audit .*\""
      "        }"
      "      }"
      "    }"
      "  }"
      "}"
      "image_scanning:{"
      "  check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{single_file:{"
      "        path:\"/etc/fstab\"}}"      
      "      content_entry:{"
      "        match_type: ALL_MATCH_ANY_ORDER"
      "        match_criteria: {"
      "          filter_regex: \".*/var/log/audit .*\""
      "          expected_regex: \".*/var/log/audit .*\""
      "        }"
      "      }"
      "    }"
      "  }"
      "}}"
  }
}

benchmark_configs: {
  id: "var-log-audit-nodev"
  compliance_note: {
    version: { cpe_uri: "cpe:/o:debian:debian_linux:12.0" version: "1.1.0" benchmark_document: "CIS Debian Linux 12" }  		 
    title: "Ensure nodev option set on /var/log/audit partition"
    description:
      "The nodev mount option specifies that the filesystem cannot contain special devices."
    rationale:
      "Since the /var/log/audit filesystem is not intended to support devices, set this option"
      "to ensure that users cannot create a block or character special devices in"
      "/var/log/audit."
    remediation:
      "- IF - a separate partition exists for /var/log/audit."
      "Edit the /etc/fstab file and add nodev to the fourth field (mounting options) for the"
      "/var/log/audit partition."
      "Example:"
      "<device> /var/log/audit <fstype>"
      "defaults,rw,nosuid,nodev,noexec,relatime 0 0"
      "Run the following command to remount /var/log/audit with the configured options:"
      "# mount -o remount /var/log/audit"
    cis_benchmark: {
      profile_level: 1
      severity: LOW
    }
    scan_instructions:
      "scan_type_specific:{instance_scanning:{"
      "  check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{single_file:{path:\"/proc/self/mountinfo\"}}"
      "      content_entry:{"
      "        match_type: ALL_MATCH_ANY_ORDER"
      "        match_criteria: {"
      "          filter_regex: \".* /var/log/audit .* - .*\""
      "          expected_regex: \".* /var/log/audit .*nodev.* - .*\""
      "        }"
      "      }"
      "    }"
      "    file_checks:{"
      "      files_to_check:{single_file:{"
      "        path:\"/etc/fstab\"}}"      
      "      content_entry:{"
      "        match_type: ALL_MATCH_ANY_ORDER"
      "        match_criteria: {"
      "          filter_regex: \".*/var/log/audit .*\""
      "          expected_regex: \".*nodev.*\""
      "        }"
      "      }"
      "    }"
      "  }"
      "  check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{single_file:{path:\"/proc/self/mountinfo\"}}"
      "      content_entry:{"
      "        match_type: NONE_MATCH"
      "        match_criteria: {"
      "          filter_regex: \".* /var/log/audit .* - .*\""
      "          expected_regex: \".* /var/log/audit .* - .*\""
      "        }"
      "      }"
      "    }"
      "  }"
      "}"
      "image_scanning:{"
      "  check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{single_file:{"
      "        path:\"/etc/fstab\"}}"      
      "      content_entry:{"
      "        match_type: ALL_MATCH_ANY_ORDER"
      "        match_criteria: {"
      "          filter_regex: \".*/var/log/audit .*\""
      "          expected_regex: \".*nodev.*\""
      "        }"
      "      }"
      "    }"
      "  }"
      "}}"
  }
}

benchmark_configs: {
  id: "var-log-audit-nosuid"
  compliance_note: {
    version: { cpe_uri: "cpe:/o:debian:debian_linux:12.0" version: "1.1.0" benchmark_document: "CIS Debian Linux 12" }  		   
    title: "Ensure nosuid option set on /var/log/audit partition"
    description:
      "The nosuid mount option specifies that the filesystem cannot contain setuid files."
    rationale:
      "Since the /var/log/audit filesystem is only intended for variable files such as logs,"
      "set this option to ensure that users cannot create setuid files in /var/log/audit."
    remediation:
      "- IF - a separate partition exists for /var/log/audit."
      "Edit the /etc/fstab file and add nosuid to the fourth field (mounting options) for the"
      "/var/log/audit partition."
      "Example:"
      "<device> /var/log/audit <fstype>"
      "defaults,rw,nosuid,nodev,noexec,relatime 0 0"
      "Run the following command to remount /var/log/audit with the configured options:"
      "# mount -o remount /var/log/audit"
    cis_benchmark: {
      profile_level: 1
      severity: LOW
    }
    scan_instructions:
      "scan_type_specific:{instance_scanning:{"
      "  check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{single_file:{path:\"/proc/self/mountinfo\"}}"
      "      content_entry:{"
      "        match_type: ALL_MATCH_ANY_ORDER"
      "        match_criteria: {"
      "          filter_regex: \".* /var/log/audit .* - .*\""
      "          expected_regex: \".* /var/log/audit .*nosuid.* - .*\""
      "        }"
      "      }"
      "    }"
      "    file_checks:{"
      "      files_to_check:{single_file:{"
      "        path:\"/etc/fstab\"}}"      
      "      content_entry:{"
      "        match_type: ALL_MATCH_ANY_ORDER"
      "        match_criteria: {"
      "          filter_regex: \".*/var/log/audit .*\""
      "          expected_regex: \".*nosuid.*\""
      "        }"
      "      }"
      "    }"
      "  }"
      "  check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{single_file:{path:\"/proc/self/mountinfo\"}}"
      "      content_entry:{"
      "        match_type: NONE_MATCH"
      "        match_criteria: {"
      "          filter_regex: \".* /var/log/audit .* - .*\""
      "          expected_regex: \".* /var/log/audit .* - .*\""
      "        }"
      "      }"
      "    }"
      "  }"
      "}"
      "image_scanning:{"
      "  check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{single_file:{"
      "        path:\"/etc/fstab\"}}"      
      "      content_entry:{"
      "        match_type: ALL_MATCH_ANY_ORDER"
      "        match_criteria: {"
      "          filter_regex: \".*/var/log/audit .*\""
      "          expected_regex: \".*nosuid.*\""
      "        }"
      "      }"
      "    }"
      "  }"
      "}}"
  }
}

benchmark_configs: {
  id: "var-log-audit-noexec"
  compliance_note: {
    version: { cpe_uri: "cpe:/o:debian:debian_linux:12.0" version: "1.1.0" benchmark_document: "CIS Debian Linux 12" }  		   
    title: "Ensure noexec option set on /var/log/audit partition"
    description:
      "The noexec mount option specifies that the filesystem cannot contain executable binaries."
    rationale:
      "Since the /var/log/audit filesystem is only intended for audit logs, set this option to"
      "ensure that users cannot run executable binaries from /var/log/audit."
    remediation:
      "- IF - a separate partition exists for /var/log/audit."
      "Edit the /etc/fstab file and add noexec to the fourth field (mounting options) for the"
      "/var/log/audit partition."
      "Example:"
      "<device> /var/log/audit <fstype>"
      "defaults,rw,nosuid,nodev,noexec,relatime 0 0"
      "Run the following command to remount /var/log/audit with the configured options:"
      "# mount -o remount /var/log/audit"
    cis_benchmark: {
      profile_level: 1
      severity: LOW
    }
    scan_instructions:
      "scan_type_specific:{instance_scanning:{"
      "  check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{single_file:{path:\"/proc/self/mountinfo\"}}"
      "      content_entry:{"
      "        match_type: ALL_MATCH_ANY_ORDER"
      "        match_criteria: {"
      "          filter_regex: \".* /var/log/audit .* - .*\""
      "          expected_regex: \".* /var/log/audit .*noexec.* - .*\""
      "        }"
      "      }"
      "    }"
      "    file_checks:{"
      "      files_to_check:{single_file:{"
      "        path:\"/etc/fstab\"}}"      
      "      content_entry:{"
      "        match_type: ALL_MATCH_ANY_ORDER"
      "        match_criteria: {"
      "          filter_regex: \".*/var/log/audit .*\""
      "          expected_regex: \".*noexec.*\""
      "        }"
      "      }"
      "    }"
      "  }"
      "  check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{single_file:{path:\"/proc/self/mountinfo\"}}"
      "      content_entry:{"
      "        match_type: NONE_MATCH"
      "        match_criteria: {"
      "          filter_regex: \".* /var/log/audit .* - .*\""
      "          expected_regex: \".* /var/log/audit .* - .*\""
      "        }"
      "      }"
      "    }"
      "  }"
      "}"
      "image_scanning:{"
      "  check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{single_file:{"
      "        path:\"/etc/fstab\"}}"      
      "      content_entry:{"
      "        match_type: ALL_MATCH_ANY_ORDER"
      "        match_criteria: {"
      "          filter_regex: \".*/var/log/audit .*\""
      "          expected_regex: \".*noexec.*\""
      "        }"
      "      }"
      "    }"
      "  }"
      "}}"
  }
}

benchmark_configs: {
  id: "ensure-apparmor-installed"
  compliance_note: {
    version: { cpe_uri: "cpe:/o:debian:debian_linux:12.0" version: "1.1.0" benchmark_document: "CIS Debian Linux 12" }   
    title: "Ensure AppArmor is installed"
    description:
      "AppArmor provides Mandatory Access Controls."
    rationale:
      "Without a Mandatory Access Control system installed only the default Discretionary"
      "Access Control system will be available."
    remediation:
      "Install AppArmor."
      "# apt install apparmor apparmor-utils"
    cis_benchmark: {
      profile_level: 1
      severity: LOW
    }
    scan_instructions:
      "scan_type_specific:{instance_scanning:{"
      "  check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{single_file:{path:\"/var/lib/dpkg/status\"}}"
      "      content_entry:{"
      "        match_type: ALL_MATCH_ANY_ORDER"
      "        match_criteria: {"
      "          filter_regex: \".*Package: apparmor\""
      "          expected_regex: \".*Package: apparmor\""
      "        }"
      "      }"
      "    }"
      "  }"
      "}"
      "image_scanning:{"
      "  check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{single_file:{path:\"/var/lib/dpkg/status\"}}"
      "      content_entry:{"
      "        match_type: ALL_MATCH_ANY_ORDER"
      "        match_criteria: {"
      "          filter_regex: \".*Package: apparmor\""
      "          expected_regex: \".*Package: apparmor\""
      "        }"
      "      }"
      "    }"
      "  }"
      "}}"
  }
}

benchmark_configs: {
  id: "apparmor-enabled-bootloader"
  compliance_note: {
    version: { cpe_uri: "cpe:/o:debian:debian_linux:12.0" version: "1.1.0" benchmark_document: "CIS Debian Linux 12" }   
    title: "Ensure AppArmor is enabled in the bootloader configuration"
    description:
      "Configure AppArmor to be enabled at boot time and verify that it has not been"
      "overwritten by the bootloader boot parameters."
    rationale:
      "AppArmor must be enabled at boot time in your bootloader configuration to ensure that"
      "the controls it provides are not overridden."
    remediation:
      "Edit /etc/default/grub and add the apparmor=1 and security=apparmor"
      "parameters to the GRUB_CMDLINE_LINUX= line"
      "GRUB_CMDLINE_LINUX=\"apparmor=1 security=apparmor\""
      "Run the following command to update the grub2 configuration:"
      "# update-grub"
    cis_benchmark: {
      profile_level: 1
      severity: LOW
    }
    scan_instructions:
      "scan_type_specific:{instance_scanning:{"
      "  check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{single_file:{path:\"/boot/grub/grub.cfg\"}}"
      "      content_entry:{"
      "        match_type: ALL_MATCH_ANY_ORDER"
      "        match_criteria: {"
      "          filter_regex: \"\\\\s+linux.*\""
      "          expected_regex: \".*apparmor=1.*\""
      "        }"
      "      }"
      "    }"
      "    file_checks:{"
      "      files_to_check:{single_file:{path:\"/boot/grub/grub.cfg\"}}"
      "      content_entry:{"
      "        match_type: ALL_MATCH_ANY_ORDER"
      "        match_criteria: {"
      "          filter_regex: \"\\\\s+linux.*\""
      "          expected_regex: \".*security=apparmor.*\""
      "        }"
      "      }"
      "    }"
      "  }"
      "}"
      "image_scanning:{"
      "  check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{single_file:{path:\"/boot/grub/grub.cfg\"}}"
      "      content_entry:{"
      "        match_type: ALL_MATCH_ANY_ORDER"
      "        match_criteria: {"
      "          filter_regex: \"\\\\s+linux.*\""
      "          expected_regex: \".*apparmor=1.*\""
      "        }"
      "      }"
      "    }"
      "    file_checks:{"
      "      files_to_check:{single_file:{path:\"/boot/grub/grub.cfg\"}}"
      "      content_entry:{"
      "        match_type: ALL_MATCH_ANY_ORDER"
      "        match_criteria: {"
      "          filter_regex: \"\\\\s+linux.*\""
      "          expected_regex: \".*security=apparmor.*\""
      "        }"
      "      }"
      "    }"
      "  }"
      "}}"
  }
}

benchmark_configs: {
  id: "bootloader-password-set"
  compliance_note: {
  version: { cpe_uri: "cpe:/o:debian:debian_linux:12.0" version: "1.1.0" benchmark_document: "CIS Debian Linux 12" }   
    title: "Ensure bootloader password is set"
    description:
      "Setting the boot loader password will require that anyone rebooting "
      "the system must enter a password before being able to set command line "
      "boot parameters"
    rationale:
      "Requiring a boot password upon execution of the boot loader will prevent an"
      "unauthorized user from entering boot parameters or changing the boot partition. This"
      "prevents users from weakening security (e.g. turning off AppArmor at boot time)."
    remediation:
      "Create an encrypted password with grub-mkpasswd-pbkdf2:"
      "# grub-mkpasswd-pbkdf2 --iteration-count=600000 --salt=64"
      "Enter password: <password>"
      "Reenter password: <password>"
      "PBKDF2 hash of your password is <encrypted-password>"
      "Add the following into a custom /etc/grub.d configuration file:"
      "cat <<EOF"
      "exec tail -n +2 $0"
      "set superusers=\"<username>\""
      "password_pbkdf2 <username> <encrypted-password>"
      "EOF"
      "The superuser/user information and password should not be contained in the"
      "/etc/grub.d/00_header file as this file could be overwritten in a package update."
      "If there is a requirement to be able to boot/reboot without entering the password, edit"
      "/etc/grub.d/10_linux and add --unrestricted to the line CLASS="
      "Example:"
      "CLASS=\"--class gnu-linux --class gnu --class os --unrestricted\""
      "Run the following command to update the grub2 configuration:"
      "# update-grub"
    cis_benchmark: {
      profile_level: 1
      severity: LOW
    }
    scan_instructions:
      "generic:{check_alternatives:{"
      "  file_checks:{"
      "    files_to_check:{single_file:{path:\"/boot/grub/menu.lst\"}}"
      "    content_entry:{"
      "      match_type: ALL_MATCH_ANY_ORDER"
      "      match_criteria: {"
      "        filter_regex: \"^\\\\s*password.*\""
      "        expected_regex: \"^\\\\s*password.*\""
      "      }"
      "    }"
      "  }"
      "}"
      "check_alternatives:{"
      "  file_checks:{"
      "    files_to_check:{single_file:{path:\"/boot/grub2/user.cfg\"}}"
      "    content_entry:{"
      "      match_type: ALL_MATCH_ANY_ORDER"
      "      match_criteria: {"
      "        filter_regex: \"^\\\\s*GRUB2_PASSWORD.*\""
      "        expected_regex: \"^\\\\s*GRUB2_PASSWORD=.*\""
      "      }"
      "    }"
      "  }"
      "}"
      "check_alternatives:{"
      "  file_checks:{"
      "    files_to_check:{single_file:{path:\"/boot/grub/grub.cfg\"}}"
      "    content_entry:{"
      "      match_type: ALL_MATCH_ANY_ORDER"
      "      match_criteria: {"
      "        filter_regex: \"^\\\\s*password.*\""
      "        expected_regex: \"^\\\\s*password_pbkdf2.*\""
      "      }"
      "    }"
      "  }"
      "}}"
  }
}

benchmark_configs: {
  id: "bootloader-password-set"
  compliance_note: {
  version: { cpe_uri: "cpe:/o:debian:debian_linux:12.0" version: "1.1.0" benchmark_document: "CIS Debian Linux 12" }   
    title: "Ensure access to bootloader config is configured"
    description:
      "The grub configuration file contains information on boot settings and passwords for"
      "unlocking boot options."
    rationale:
      "Requiring a boot password upon execution of the boot loader will prevent an"
      "unauthorized user from entering boot parameters or changing the boot partition. This"
      "prevents users from weakening security (e.g. turning off AppArmor at boot time)."
    remediation:
      "Create an encrypted password with grub-mkpasswd-pbkdf2:"
      "# grub-mkpasswd-pbkdf2 --iteration-count=600000 --salt=64"
      "Enter password: <password>"
      "Reenter password: <password>"
      "PBKDF2 hash of your password is <encrypted-password>"
      "Add the following into a custom /etc/grub.d configuration file:"
      "cat <<EOF"
      "exec tail -n +2 $0"
      "set superusers=\"<username>\""
      "password_pbkdf2 <username> <encrypted-password>"
      "EOF"
      "The superuser/user information and password should not be contained in the"
      "/etc/grub.d/00_header file as this file could be overwritten in a package update."
      "If there is a requirement to be able to boot/reboot without entering the password, edit"
      "/etc/grub.d/10_linux and add --unrestricted to the line CLASS="
      "Example:"
      "CLASS=\"--class gnu-linux --class gnu --class os --unrestricted\""
      "Run the following command to update the grub2 configuration:"
      "# update-grub"
    cis_benchmark: {
      profile_level: 1
      severity: LOW
    }
    scan_instructions:
      "generic:{check_alternatives:{"
      "  file_checks:{"
      "    files_to_check:{single_file:{path:\"/boot/grub/menu.lst\"}}"
      "    content_entry:{"
      "      match_type: ALL_MATCH_ANY_ORDER"
      "      match_criteria: {"
      "        filter_regex: \"^\\\\s*password.*\""
      "        expected_regex: \"^\\\\s*password.*\""
      "      }"
      "    }"
      "  }"
      "}"
      "check_alternatives:{"
      "  file_checks:{"
      "    files_to_check:{single_file:{path:\"/boot/grub2/user.cfg\"}}"
      "    content_entry:{"
      "      match_type: ALL_MATCH_ANY_ORDER"
      "      match_criteria: {"
      "        filter_regex: \"^\\\\s*GRUB2_PASSWORD.*\""
      "        expected_regex: \"^\\\\s*GRUB2_PASSWORD=.*\""
      "      }"
      "    }"
      "  }"
      "}"
      "check_alternatives:{"
      "  file_checks:{"
      "    files_to_check:{single_file:{path:\"/boot/grub/grub.cfg\"}}"
      "    content_entry:{"
      "      match_type: ALL_MATCH_ANY_ORDER"
      "      match_criteria: {"
      "        filter_regex: \"^\\\\s*password.*\""
      "        expected_regex: \"^\\\\s*password_pbkdf2.*\""
      "      }"
      "    }"
      "  }"
      "}}"
  }
}

benchmark_configs: {
  id: "aslr-enabled"
  compliance_note: {
    version: { cpe_uri: "cpe:/o:debian:debian_linux:12.0" version: "1.1.0" benchmark_document: "CIS Debian Linux 12" }   
    title: "Ensure address space layout randomization (ASLR) is enabled"
    description:
      "Address space layout randomization (ASLR) is an exploit mitigation "
      "technique which randomly arranges the address space of key data areas "
      "of a process."
    rationale:
      "Randomly placing virtual memory regions will make it difficult to "
      "write memory page exploits as the memory placement will be "
      "consistently shifting."
    remediation:
      "Set the following parameter in /etc/sysctl.conf or a /etc/sysctl.d/* "
      "file:\n"
      "```\n"
      "kernel.randomize_va_space = 2\n"
      "```\n"
      "Run the following command to set the active kernel parameter:\n"
      "```\n"
      "# sysctl -w kernel.randomize_va_space=2\n"
      "```\n"
    cis_benchmark: {
      profile_level: 1
      severity: LOW
    }
    scan_instructions:
      "scan_type_specific:{instance_scanning:{"
      "  check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{single_file:{path:\"/proc/sys/kernel/randomize_va_space\"}}"
      "      content:{content:\"2\\n\"}"
      "    }"
      "    file_checks:{"
      "      files_to_check:{files_in_dir:{"
      "        dir_path:\"/etc/sysctl.d\""
      "        recursive: true"
      "      }}"
      "      content_entry: {"
      "        match_type: ALL_MATCH_ANY_ORDER"
      "        match_criteria: {"
      "          filter_regex: \"kernel.randomize_va_space *=.*\""
      "          expected_regex: \"kernel.randomize_va_space *= *2\""
      "        }"
      "      }"
      "      non_compliance_msg: \"a config file in /etc/sysctl.d/ disabled ASLR\""
      "      file_display_command: \"grep -l 'kernel.randomize_va_space' /etc/sysctl.d/*\""
      "    }"
      "  }"
      "}"
      "image_scanning:{"
      "  check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{files_in_dir:{"
      "        dir_path:\"/etc/sysctl.d\""
      "        recursive: true"
      "      }}"
      "      content_entry: {"
      "        match_type: ALL_MATCH_ANY_ORDER"
      "        match_criteria: {"
      "          filter_regex: \"kernel.randomize_va_space *=.*\""
      "          expected_regex: \"kernel.randomize_va_space *= *2\""
      "        }"
      "      }"
      "    }"
      "  }"
      "}}"
  }
}

benchmark_configs: {
  id: "ptrace-scope-restricted"
  compliance_note: {
    version: { cpe_uri: "cpe:/o:debian:debian_linux:12.0" version: "1.1.0" benchmark_document: "CIS Debian Linux 12" }   
    title: "Ensure ptrace_scope is restricted"
    description:
      "The ptrace() system call provides a means by which one process (the \"tracer\") may"
      "observe and control the execution of another process (the \"tracee\"), and examine and"
      "change the tracee's memory and registers."
      "The sysctl settings (writable only with CAP_SYS_PTRACE) are:"
      "• 0 - classic ptrace permissions: a process can PTRACE_ATTACH to any other"
      "process running under the same uid, as long as it is dumpable (i.e. did not"
      "transition uids, start privileged, or have called prctl(PR_SET_DUMPABLE...)"
      "already). Similarly, PTRACE_TRACEME is unchanged."
      "• 1 - restricted ptrace: a process must have a predefined relationship with the"
      "inferior it wants to call PTRACE_ATTACH on. By default, this relationship is that"
      "of only its descendants when the above classic criteria is also met. To change"
      "the relationship, an inferior can call prctl(PR_SET_PTRACER, debugger, ...) to"
      "declare an allowed debugger PID to call PTRACE_ATTACH on the inferior."
      "Using PTRACE_TRACEME is unchanged."
      "• 2 - admin-only attach: only processes with CAP_SYS_PTRACE may use ptrace"
      "with PTRACE_ATTACH, or through children calling PTRACE_TRACEME."
      "• 3 - no attach: no processes may use ptrace with PTRACE_ATTACH nor via"
      "PTRACE_TRACEME. Once set, this sysctl value cannot be changed."
    rationale:
      "If one application is compromised, it would be possible for an attacker to attach to other"
      "running processes (e.g. Bash, Firefox, SSH sessions, GPG agent, etc) to extract	  "
      "additional credentials and continue to expand the scope of their attack."
      "Enabling restricted mode will limit the ability of a compromised process to"
      "PTRACE_ATTACH on other processes running under the same user. With restricted"
      "mode, ptrace will continue to work with root user."
    remediation:
      "Set the kernel.yama.ptrace_scope parameter in /etc/sysctl.conf or a file in"
      "/etc/sysctl.d/ ending in .conf to a value of 1, 2, or 3:"
      "kernel.yama.ptrace_scope = 1"
      "- OR -"
      "kernel.yama.ptrace_scope = 2"
      "- OR -"
      "kernel.yama.ptrace_scope = 3"
      "Example:"
      "# printf \"%s\n\" \"kernel.yama.ptrace_scope = 1\" >> /etc/sysctl.d/60-"
      "kernel_sysctl.conf"
      "Run the following command to set the active kernel parameter:"
      "# sysctl -w kernel.yama.ptrace_scope=1"
    cis_benchmark: {
      profile_level: 1
      severity: HIGH
    }
    scan_instructions:
      "scan_type_specific:{instance_scanning:{"
      "  check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{single_file:{path:\"/proc/sys/kernel/yama/ptrace_scope\"}}"
      "      content:{content:\"1\\n\"}"
      "    }"
      "  }"
      "}"
      "image_scanning:{"
      "  check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{single_file:{path:\"/etc/sysctl.conf\"}}"
      "      content_entry:{"
      "        match_type: ALL_MATCH_ANY_ORDER"
      "        match_criteria: {"
      "          filter_regex: \"kernel\\\\.yama\\\\.ptrace_scope\\\\s*=\\\\s*.*\""
      "          expected_regex: \"kernel\\\\.yama\\\\.ptrace_scope\\\\s*=\\\\s*1\""
      "        }"
      "      }"
      "    }"
      "    file_checks:{"
      "      files_to_check:{files_in_dir:{"
      "        dir_path:\"/etc/sysctl.d\""
      "        recursive: true"
      "      }}"
      "      content_entry:{"
      "        match_type: ALL_MATCH_ANY_ORDER"
      "        match_criteria: {"
      "          filter_regex: \"kernel\\\\.yama\\\\.ptrace_scope\\\\s*=\\\\s*.*\""
      "          expected_regex: \"kernel\\\\.yama\\\\.ptrace_scope\\\\s*=\\\\s*1\""
      "        }"
      "      }"
      "    }"
      "  }"
      "}}"
  }
}

benchmark_configs: {
  id: "core-dumps-restricted"
  compliance_note: {
    version: { cpe_uri: "cpe:/o:debian:debian_linux:12.0" version: "1.1.0" benchmark_document: "CIS Debian Linux 12" }   
    title: "Ensure core dumps are restricted"
    description:
      "A core dump is the memory of an executable program. It is generally "
      "used to determine why a program aborted. It can also be used to glean "
      "confidential information from a core file. The system provides the "
      "ability to set a soft limit for core dumps, but this can be overridden "
      "by the user."
    rationale:
      "Setting a hard limit on core dumps prevents users from overriding the "
      "soft variable. If core dumps are required, consider setting limits for "
      "user groups (see limits.conf(5) ). In addition, setting the "
      "fs.suid_dumpable variable to 0 will prevent setuid programs from "
      "dumping core."
    remediation:
      "Add the following line to /etc/security/limits.conf or a /etc/security/limits.d/* file:\n"
      "```\n"
      "* hard core 0\n"
      "```\n"
      "Set the following parameter in /etc/sysctl.conf or a /etc/sysctl.d/* file:\n"
      "```\n"
      "fs.suid_dumpable = 0\n"
      "```\n"
      "Run the following command to set the active kernel parameter:\n"
      "```\n"
      "# sysctl -w fs.suid_dumpable=0\n"
      "```\n"
      "If systemd-coredump is installed:\n"
      "edit /etc/systemd/coredump.conf and add/modify the following lines:\n"
      "```\n"
      "Storage=none\n"
      "ProcessSizeMax=0\n"
      "```\n"
      "Run the command:\n"
      "```\n"
      "systemctl daemon-reload\n"
      "```\n"
    cis_benchmark: {
      profile_level: 1
      severity: LOW
    }
    scan_instructions:
      "scan_type_specific:{instance_scanning:{"
      "  check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{single_file:{path:\"/etc/security/limits.conf\"}}"
      "      content_entry:{"
      "        match_type: ALL_MATCH_ANY_ORDER"
      "        match_criteria: {"
      "          filter_regex: \".*hard\\\\s+core.*\""
      "          expected_regex: \"\\\\*\\\\s+hard\\\\s+core\\\\s+0\\\\b.*\""
      "        }"
      "      }"
      "    }"
      "    file_checks:{"
      "      files_to_check:{files_in_dir:{"
      "        dir_path:\"/etc/sysctl.d\""
      "        recursive: true"
      "      }}"
      "      content_entry:{"
      "        match_type: ALL_MATCH_ANY_ORDER"
      "        match_criteria: {"
      "          filter_regex: \"fs.suid_dumpable = .*\""
      "          expected_regex: \"fs.suid_dumpable = 0\""
      "        }"
      "      }"
      "    }"
      "    file_checks:{"
      "      files_to_check:{single_file:{path:\"/proc/sys/fs/suid_dumpable\"}}"
      "      content:{content:\"0\\n\"}"
      "    }"
      "  }"
      "  check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{single_file:{path:\"/etc/security/limits.conf\"}}"
      "      existence:{should_exist: false}"
      "    }"
      "  }"
      "}"
      "image_scanning:{"
      "  check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{single_file:{path:\"/etc/security/limits.conf\"}}"
      "      content_entry:{"
      "        match_type: ALL_MATCH_ANY_ORDER"
      "        match_criteria: {"
      "          filter_regex: \".*hard core.*\""
      "          expected_regex: \"\\\\*\\\\shard\\\\score\\\\s0\""
      "        }"
      "      }"
      "    }"
      "    file_checks:{"
      "      files_to_check:{files_in_dir:{"
      "        dir_path:\"/etc/sysctl.d\""
      "        recursive: true"
      "      }}"
      "      content_entry:{"
      "        match_type: ALL_MATCH_ANY_ORDER"
      "        match_criteria: {"
      "          filter_regex: \"fs.suid_dumpable = .*\""
      "          expected_regex: \"fs.suid_dumpable = 0\""
      "        }"
      "      }"
      "    }"
      "  }"
      "}}"
  }
}

benchmark_configs: {
  id: "motd-configured"
  compliance_note: {
    version: { cpe_uri: "cpe:/o:debian:debian_linux:12.0" version: "1.1.0" benchmark_document: "CIS Debian Linux 12" }   
    title: "Ensure message of the day is configured properly"
    description:
      "The contents of the /etc/motd file are displayed to users after login and function as a"
      "message of the day for authenticated users."
      "Unix-based systems have typically displayed information about the OS release and"
      "patch level upon logging in to the system. This information can be useful to developers"
      "who are developing software for a particular OS platform. If mingetty(8) supports the"
      "following options, they display operating system information: \\\\m - machine architecture"
      "\\\\r - operating system release \\\\s - operating system name \\\\v - operating system"
      "version"
    rationale:
      "Warning messages inform users who are attempting to login to the "
      "system of their legal status regarding the system and must include the "
      "name of the organization that owns the system and any monitoring "
      "policies that are in place. Displaying OS and patch level information "
      "in login banners also has the side effect of providing detailed system "
      "information to attackers attempting to target specific exploits of a "
      "system. Authorized users can easily get this information by running "
      "the \"uname -a\" command once they have logged in."
    remediation:
      "Warning messages inform users who are attempting to login to the system of their legal"
      "status regarding the system and must include the name of the organization that owns"
      "the system and any monitoring policies that are in place. Displaying OS and patch level"
      "information in login banners also has the side effect of providing detailed system"
      "information to attackers attempting to target specific exploits of a system. Authorized"
      "users can easily get this information by running the \" uname -a \" command once they"
      "have logged in."
    cis_benchmark: {
      profile_level: 1
      severity: LOW
    }
    scan_instructions:
      "scan_type_specific:{instance_scanning:{"
      "  check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{single_file:{path:\"/etc/motd\"}}"
      "        content_entry:{"
      "          match_type: NONE_MATCH"
      "          match_criteria: {"
      "            filter_regex: \"((.*\\\\m.*)|(.*\\\\r.*)|(.*\\\\s.*)|(.*\\\\v.*)|(.*(D|d)ebian.*)|(.*12.*))\""
      "            expected_regex: \"((.*\\\\m.*)|(.*\\\\r.*)|(.*\\\\s.*)|(.*\\\\v.*)|(.*(D|d)ebian.*)|(.*12.*))\""
      "          }"
      "        }"
      "     }"
      "  }"
      "  check_alternatives:{"
      "	   file_checks:{"
      "      files_to_check:{single_file:{path:\"/etc/motd\"}}"
      "      existence:{should_exist:false}"
      "	   }"
      "  }" 
      "}"
      "image_scanning:{"
      "  check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{single_file:{path:\"/etc/motd\"}}"
      "        content_entry:{"
      "          match_type: NONE_MATCH"
      "          match_criteria: {"
      "            filter_regex: \"((.*\\\\m.*)|(.*\\\\r.*)|(.*\\\\s.*)|(.*\\\\v.*)|(.*(D|d)ebian.*)|(.*12.*))\""
      "            expected_regex: \"((.*\\\\m.*)|(.*\\\\r.*)|(.*\\\\s.*)|(.*\\\\v.*)|(.*(D|d)ebian.*)|(.*12.*))\""
      "          }"
      "        }"
      "     }"
      "  }"
      "  check_alternatives:{"
      "	   file_checks:{"
      "      files_to_check:{single_file:{path:\"/etc/motd\"}}"
      "      existence:{should_exist:false}"
      "	   }"
      "  }" 
      "}"
      "}"
  }
}

benchmark_configs: {
  id: "etc-issue-configured"
  compliance_note: {
    version: { cpe_uri: "cpe:/o:debian:debian_linux:12.0" version: "1.1.0" benchmark_document: "CIS Debian Linux 12" }   
    title: "Ensure local login warning banner is configured properly"
    description:
      "The contents of the /etc/issue file are displayed to users after login and function as a"
      "message of the day for authenticated users."
      "Unix-based systems have typically displayed information about the OS release and"
      "patch level upon logging in to the system. This information can be useful to developers"
      "who are developing software for a particular OS platform. If mingetty(8) supports the"
      "following options, they display operating system information: \\\\m - machine architecture"
      "\\\\r - operating system release \\\\s - operating system name \\\\v - operating system"
      "version"
    rationale:
      "Warning messages inform users who are attempting to login to the "
      "system of their legal status regarding the system and must include the "
      "name of the organization that owns the system and any monitoring "
      "policies that are in place. Displaying OS and patch level information "
      "in login banners also has the side effect of providing detailed system "
      "information to attackers attempting to target specific exploits of a "
      "system. Authorized users can easily get this information by running "
      "the \"uname -a\" command once they have logged in."
    remediation:
      "Warning messages inform users who are attempting to login to the system of their legal"
      "status regarding the system and must include the name of the organization that owns"
      "the system and any monitoring policies that are in place. Displaying OS and patch level"
      "information in login banners also has the side effect of providing detailed system"
      "information to attackers attempting to target specific exploits of a system. Authorized"
      "users can easily get this information by running the \" uname -a \" command once they"
      "have logged in."
    cis_benchmark: {
      profile_level: 1
      severity: LOW
    }
    scan_instructions:
      "scan_type_specific:{instance_scanning:{"
      "  check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{single_file:{path:\"/etc/issue\"}}"
      "        content_entry:{"
      "          match_type: NONE_MATCH"
      "          match_criteria: {"
      "            filter_regex: \"((.*\\\\m.*)|(.*\\\\r.*)|(.*\\\\s.*)|(.*\\\\v.*)|(.*(D|d)ebian.*)|(.*12.*))\""
      "            expected_regex: \"((.*\\\\m.*)|(.*\\\\r.*)|(.*\\\\s.*)|(.*\\\\v.*)|(.*(D|d)ebian.*)|(.*12.*))\""
      "          }"
      "        }"
      "     }"
      "  }"
      "  check_alternatives:{"
      "	   file_checks:{"
      "      files_to_check:{single_file:{path:\"/etc/issue\"}}"
      "      existence:{should_exist:false}"
      "	   }"
      "  }" 
      "}"
      "image_scanning:{"
      "  check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{single_file:{path:\"/etc/issue\"}}"
      "        content_entry:{"
      "          match_type: NONE_MATCH"
      "          match_criteria: {"
      "            filter_regex: \"((.*\\\\m.*)|(.*\\\\r.*)|(.*\\\\s.*)|(.*\\\\v.*)|(.*(D|d)ebian.*)|(.*12.*))\""
      "            expected_regex: \"((.*\\\\m.*)|(.*\\\\r.*)|(.*\\\\s.*)|(.*\\\\v.*)|(.*(D|d)ebian.*)|(.*12.*))\""
      "          }"
      "        }"
      "     }"
      "  }"
      "  check_alternatives:{"
      "	   file_checks:{"
      "      files_to_check:{single_file:{path:\"/etc/issue\"}}"
      "      existence:{should_exist:false}"
      "	   }"
      "  }" 
      "}"
      "}"
  }
}

benchmark_configs: {
  id: "etc-issue-net-configured"
  compliance_note: {
    version: { cpe_uri: "cpe:/o:debian:debian_linux:12.0" version: "1.1.0" benchmark_document: "CIS Debian Linux 12" }   
    title: "Ensure remote login warning banner is configured properly"
    description:
      "The contents of the /etc/issue.net file are displayed to users prior to login for remote"
      "connections from configured services."
      "Unix-based systems have typically displayed information about the OS release and"
      "patch level upon logging in to the system. This information can be useful to developers"
      "who are developing software for a particular OS platform. If mingetty(8) supports the"
      "following options, they display operating system information: \\\\m - machine architecture"
      "\\\\r - operating system release \\\\s - operating system name \\\\v - operating system"
      "version"
    rationale:
      "Warning messages inform users who are attempting to login to the "
      "system of their legal status regarding the system and must include the "
      "name of the organization that owns the system and any monitoring "
      "policies that are in place. Displaying OS and patch level information "
      "in login banners also has the side effect of providing detailed system "
      "information to attackers attempting to target specific exploits of a "
      "system. Authorized users can easily get this information by running "
      "the \"uname -a\" command once they have logged in."
    remediation:
      "Warning messages inform users who are attempting to login to the system of their legal"
      "status regarding the system and must include the name of the organization that owns"
      "the system and any monitoring policies that are in place. Displaying OS and patch level"
      "information in login banners also has the side effect of providing detailed system"
      "information to attackers attempting to target specific exploits of a system. Authorized"
      "users can easily get this information by running the \" uname -a \" command once they"
      "have logged in."
    cis_benchmark: {
      profile_level: 1
      severity: LOW
    }
    scan_instructions:
      "scan_type_specific:{instance_scanning:{"
      "  check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{single_file:{path:\"/etc/issue.net\"}}"
      "        content_entry:{"
      "          match_type: NONE_MATCH"
      "          match_criteria: {"
      "            filter_regex: \"((.*\\\\m.*)|(.*\\\\r.*)|(.*\\\\s.*)|(.*\\\\v.*)|(.*(D|d)ebian.*)|(.*12.*))\""
      "            expected_regex: \"((.*\\\\m.*)|(.*\\\\r.*)|(.*\\\\s.*)|(.*\\\\v.*)|(.*(D|d)ebian.*)|(.*12.*))\""
      "          }"
      "        }"
      "     }"
      "  }"
      "  check_alternatives:{"
      "	   file_checks:{"
      "      files_to_check:{single_file:{path:\"/etc/issue.net\"}}"
      "      existence:{should_exist:false}"
      "	   }"
      "  }" 
      "}"
      "image_scanning:{"
      "  check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{single_file:{path:\"/etc/issue.net\"}}"
      "        content_entry:{"
      "          match_type: NONE_MATCH"
      "          match_criteria: {"
      "            filter_regex: \"((.*\\\\m.*)|(.*\\\\r.*)|(.*\\\\s.*)|(.*\\\\v.*)|(.*(D|d)ebian.*)|(.*12.*))\""
      "            expected_regex: \"((.*\\\\m.*)|(.*\\\\r.*)|(.*\\\\s.*)|(.*\\\\v.*)|(.*(D|d)ebian.*)|(.*12.*))\""
      "          }"
      "        }"
      "     }"
      "  }"
      "  check_alternatives:{"
      "	   file_checks:{"
      "      files_to_check:{single_file:{path:\"/etc/issue.net\"}}"
      "      existence:{should_exist:false}"
      "	   }"
      "  }" 
      "}"
      "}"
  }
}

benchmark_configs: {
  id: "motd-access"
  compliance_note: {
    version: { cpe_uri: "cpe:/o:debian:debian_linux:12.0" version: "1.1.0" benchmark_document: "CIS Debian Linux 12" }   
    title: "Ensure access to /etc/motd is configure"
    description:
      "The contents of the /etc/motd file are displayed to users after login "
      "and function as a message of the day for authenticated users."
    rationale:
      "If the /etc/motd file does not have the correct ownership it could be "
      "modified by unauthorized users with incorrect or misleading information."
    remediation:
      "Run the following commands to set permissions on /etc/motd:\n"
      "```\n"
      "# chown root:root /etc/motd\n"
      "# chmod 644 /etc/motd\n"
      "```\n"
    cis_benchmark: {
      profile_level: 1
      severity: LOW
    }
    scan_instructions:
      "generic:{check_alternatives:{"
      "  file_checks:{"
      "    files_to_check:{single_file:{path:\"/etc/motd\"}}"
      "    permission:{"
      "      set_bits: 0444"
      "      clear_bits: 0133"
      "      bits_should_match: BOTH_SET_AND_CLEAR"
      "      user: {name: \"root\" should_own: true}"
      "      group: {name: \"root\" should_own: true}"
      "    }"
      "  }"
      "}}"
  }
}

benchmark_configs: {
  id: "etc-issue-access"
  compliance_note: {
    version: { cpe_uri: "cpe:/o:debian:debian_linux:12.0" version: "1.1.0" benchmark_document: "CIS Debian Linux 12" }   
    title: "Ensure access to /etc/issue is configure"
    description:
      "The contents of the /etc/issue file are displayed to users after login "
      "and function as a message of the day for authenticated users."
    rationale:
      "If the /etc/issue file does not have the correct ownership it could be "
      "modified by unauthorized users with incorrect or misleading information."
    remediation:
      "Run the following commands to set permissions on /etc/issue:\n"
      "```\n"
      "# chown root:root /etc/issue\n"
      "# chmod 644 /etc/issue\n"
      "```\n"
    cis_benchmark: {
      profile_level: 1
      severity: LOW
    }
    scan_instructions:
      "generic:{check_alternatives:{"
      "  file_checks:{"
      "    files_to_check:{single_file:{path:\"/etc/issue\"}}"
      "    permission:{"
      "      set_bits: 0444"
      "      clear_bits: 0133"
      "      bits_should_match: BOTH_SET_AND_CLEAR"
      "      user: {name: \"root\" should_own: true}"
      "      group: {name: \"root\" should_own: true}"
      "    }"
      "  }"
      "}}"
  }
}

benchmark_configs: {
  id: "etc-issue-net-access"
  compliance_note: {
    version: { cpe_uri: "cpe:/o:debian:debian_linux:12.0" version: "1.1.0" benchmark_document: "CIS Debian Linux 12" }   
    title: "Ensure access to /etc/issue.net is configure"
    description:
      "The contents of the /etc/issue.net file are displayed to users after login "
      "and function as a message of the day for authenticated users."
    rationale:
      "If the /etc/issue.net file does not have the correct ownership it could be "
      "modified by unauthorized users with incorrect or misleading information."
    remediation:
      "Run the following commands to set permissions on /etc/issue.net:\n"
      "```\n"
      "# chown root:root /etc/issue.net\n"
      "# chmod 644 /etc/issue.net\n"
      "```\n"
    cis_benchmark: {
      profile_level: 1
      severity: LOW
    }
    scan_instructions:
      "generic:{check_alternatives:{"
      "  file_checks:{"
      "    files_to_check:{single_file:{path:\"/etc/issue.net\"}}"
      "    permission:{"
      "      set_bits: 0444"
      "      clear_bits: 0133"
      "      bits_should_match: BOTH_SET_AND_CLEAR"
      "      user: {name: \"root\" should_own: true}"
      "      group: {name: \"root\" should_own: true}"
      "    }"
      "  }"
      "}}"
  }
}

benchmark_configs: {
  id: "ensure-gdm-removed"
  compliance_note: {
    version: { cpe_uri: "cpe:/o:debian:debian_linux:12.0" version: "1.1.0" benchmark_document: "CIS Debian Linux 12" }
    title: "Ensure GDM is removed"
    description: 
      "The GNOME Display Manager (GDM) is a program that manages graphical display servers and handles graphical user logins. If a Graphical User Interface (GUI) is not required, it should be removed to reduce the attack surface of the system."
    rationale: 
      "Removing the GNOME Display manager will remove the Graphical User Interface (GUI) from the system."
    remediation: 
      "Run the following commands to uninstall gdm3 and remove unused dependencies:\n"
      "```\n"
      "# apt purge gdm3\n"
      "# apt autoremove gdm3\n"
      "```\n"
    cis_benchmark: {
      profile_level: 2
      severity: MEDIUM
    }
    scan_instructions: 
      "generic:{check_alternatives:{"
      "  file_checks:{"
      "    files_to_check:{single_file:{path:\"/var/lib/dpkg/status\"}}"
      "    content_entry:{"
      "      match_type: NONE_MATCH"
      "      match_criteria: {"
      "        filter_regex: \"Package: gdm3\""
      "        expected_regex: \"Package: gdm3\""
      "      }"
      "    }"
      "  }"
      "}}"
  }
}

benchmark_configs: {
  id: "autofs-service-disabled"
  compliance_note: {
    version: { cpe_uri: "cpe:/o:debian:debian_linux:12.0" version: "1.1.0" benchmark_document: "CIS Debian Linux 12" }
    title: "Ensure autofs services are not in us"
    description:
      "autofs allows automatic mounting of devices, typically including CD/"
      "DVDs and USB drives."
    rationale:
      "With automounting enabled anyone with physical access could attach a "
      "USB drive or disc and have its contents available in system even if "
      "they lacked permissions to mount it themselves."
    remediation:
      "Run the following commands to stop autofs.service and remove the autofs"
      "package:"
      "# systemctl stop autofs.service"
      "# apt purge autofs"
      "- OR -"
      "- IF - the autofs package is required as a dependency:"
      "Run the following commands to stop and mask autofs.service:"
      "# systemctl stop autofs.service"
      "# systemctl mask autofs.service"
    cis_benchmark: {
      profile_level: 2
      severity: LOW
    }
    scan_instructions:
      "generic:{check_alternatives:{"
      "  file_checks:{"
      "    files_to_check:{single_file:{path:\"/var/lib/dpkg/status\"}}"
      "    content_entry:{"
      "      match_type: NONE_MATCH"
      "      match_criteria: {"
      "        filter_regex: \"Package: autofs\""
      "        expected_regex: \"Package: autofs\""
      "      }"
      "    }"
      "  }"
      "}"
      "check_alternatives:{"
      "  file_checks:{"
      "    files_to_check:{files_in_dir:{"
      "      dir_path:\"/etc/systemd/system\""
      "      recursive: true"
      "      filename_regex: \"autofs.service\""
      "    }}"
      "    existence:{should_exist: false}"
      "    non_compliance_msg: \"a config file in /etc/systemd/system enables autofs\""
      "    file_display_command: \"find /etc/systemd/system -name 'autofs.service'\""
      "  }"
      "}}"
  }
}

benchmark_configs: {
  id: "avahi-daemon-service-disabled"
  compliance_note: {
    version: { cpe_uri: "cpe:/o:debian:debian_linux:12.0" version: "1.1.0" benchmark_document: "CIS Debian Linux 12" }
    title: "Ensure avahi daemon services are not in use"
    description:
      "Avahi is a free zeroconf implementation, including a system for multicast DNS/DNS-SD"
      "service discovery. Avahi allows programs to publish and discover services and hosts"
      "running on a local network with no specific configuration. For example, a user can plug"
      "a computer into a network and Avahi automatically finds printers to print to, files to look"
      "at and people to talk to, as well as network services running on the machine."
    rationale:
      "Automatic discovery of network services is not normally required for system"
      "functionality. It is recommended to remove this package to reduce the potential attack"
      "surface."
    remediation:
      "Run the following commands to stop avahi-daemon.socket and avahi-"
      "daemon.service, and remove the avahi-daemon package:"
      "# systemctl stop avahi-daemon.socket avahi-daemon.service"
      "# apt purge avahi-daemon"
      "- OR -"
      "- IF - the avahi-daemon package is required as a dependency:"
      "Run the following commands to stop and mask the avahi-daemon.socket and avahi-"
      "daemon.service:"
      "# systemctl stop avahi-daemon.socket avahi-daemon.service"
      "# systemctl mask avahi-daemon.socket avahi-daemon.service"
    cis_benchmark: {
      profile_level: 2
      severity: LOW
    }
    scan_instructions:
      "generic:{check_alternatives:{"
      "  file_checks:{"
      "    files_to_check:{single_file:{path:\"/var/lib/dpkg/status\"}}"
      "    content_entry:{"
      "      match_type: NONE_MATCH"
      "      match_criteria: {"
      "        filter_regex: \"Package: avahi.*\""
      "        expected_regex: \"Package: avahi.*\""
      "      }"
      "    }"
      "  }"
      "}"
      "check_alternatives:{"
      "  file_checks:{"
      "    files_to_check:{files_in_dir:{"
      "      dir_path:\"/etc/systemd/system\""
      "      recursive: true"
      "      filename_regex: \"avahi-daemon.service\""
      "    }}"
      "    existence:{should_exist: false}"
      "    non_compliance_msg: \"a config file in /etc/systemd/system enables avahi-daemon\""
      "    file_display_command: \"find /etc/systemd/system -name 'avahi-daemon.service'\""
      "  }"
      "}}"
  }
}

benchmark_configs: {
  id: "dhcp-server-service-disabled"
  compliance_note: {
    version: { cpe_uri: "cpe:/o:debian:debian_linux:12.0" version: "1.1.0" benchmark_document: "CIS Debian Linux 12" }
    title: "Ensure dhcp server services are not in use"
    description:
      "The Dynamic Host Configuration Protocol (DHCP) is a service that allows machines to"
      "be dynamically assigned IP addresses. There are two versions of the DHCP protocol"
      "DHCPv4 and DHCPv6. At startup the server may be started for one or the other via the -4"
      "or -6 arguments."
    rationale:
      "Unless a system is specifically set up to act as a DHCP server, it is recommended that"
      "this package be removed to reduce the potential attack surface."
    remediation:
      "Run the following commands to stop isc-dhcp-server.service and isc-dhcp-"
      "server6.service and remove the isc-dhcp-server package:"
      "# systemctl stop isc-dhcp-server.service isc-dhcp-server6.service"
      "# apt purge isc-dhcp-server"
      "- OR -"
      "- IF - the isc-dhcp-server package is required as a dependency:"
      "Run the following commands to stop and mask isc-dhcp-server.service and isc-"
      "dhcp-server6.service:"
      "# systemctl stop isc-dhcp-server.service isc-dhcp-server6.service"
      "# systemctl mask isc-dhcp-server isc-dhcp-server6.service"
    cis_benchmark: {
      profile_level: 1
      severity: LOW
    }
    scan_instructions:
      "generic:{check_alternatives:{"
      "  file_checks:{"
      "    files_to_check:{single_file:{path:\"/var/lib/dpkg/status\"}}"
      "    content_entry:{"
      "      match_type: NONE_MATCH"
      "      match_criteria: {"
      "        filter_regex: \"Package: isc-dhcp-server.*\""
      "        expected_regex: \"Package: isc-dhcp-server.*\""
      "      }"
      "    }"
      "  }"
      "}"
      "check_alternatives:{"
      "  file_checks:{"
      "    files_to_check:{files_in_dir:{"
      "      dir_path:\"/etc/systemd/system\""
      "      recursive: true"
      "      filename_regex: \"isc-dhcp-server*[0-9]*.service\""
      "    }}"
      "    existence:{should_exist: false}"
      "    non_compliance_msg: \"a config file in /etc/systemd/system enables isc-dhcp-server\""
      "    file_display_command: \"find /etc/systemd/system -name 'isc-dhcp-server.service'\""
      "  }"
      "}}"
  }
}

benchmark_configs: {
  id: "dns-server-service-disabled"
  compliance_note: {
    version: { cpe_uri: "cpe:/o:debian:debian_linux:12.0" version: "1.1.0" benchmark_document: "CIS Debian Linux 12" }
    title: "Ensure dns server services are not in use"
    description:
      "The Domain Name System (DNS) is a hierarchical naming system that maps names to"
      "IP addresses for computers, services and other resources connected to a network."
    rationale:
      "Unless a system is specifically designated to act as a DNS server, it is recommended"
      "that the package be deleted to reduce the potential attack surface."
    remediation:
      "Run the following commands to stop named.service and remove the bind9 package:"
      "# systemctl stop named.service"
      "# apt purge bind9"
      "- OR -"
      "- IF - the bind9 package is required as a dependency:"
      "Run the following commands to stop and mask bind9.service:"
      "# systemctl stop named.service"
      "# systemctl mask named.service"
    cis_benchmark: {
      profile_level: 1
      severity: LOW
    }
    scan_instructions:
      "generic:{check_alternatives:{"
      "  file_checks:{"
      "    files_to_check:{single_file:{path:\"/var/lib/dpkg/status\"}}"
      "    content_entry:{"
      "      match_type: NONE_MATCH"
      "      match_criteria: {"
      "        filter_regex: \"Package: bind9\""
      "        expected_regex: \"Package: bind9.*\""
      "      }"
      "    }"
      "  }"
      "}"
      "check_alternatives:{"
      "  file_checks:{"
      "    files_to_check:{files_in_dir:{"
      "      dir_path:\"/etc/systemd/system\""
      "      recursive: true"
      "      filename_regex: \"bind9.service\""
      "    }}"
      "    existence:{should_exist: false}"
      "    non_compliance_msg: \"a config file in /etc/systemd/system enables bind9.service\""
      "    file_display_command: \"find /etc/systemd/system -name 'bind9.service'\""
      "  }"
      "}}"
  }
}

