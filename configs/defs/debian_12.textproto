benchmark_configs: {
  id: "cramfs-module-not-available"
  compliance_note: {
    version: { cpe_uri: "cpe:/o:debian:debian_linux:12.0" version: "1.1.0" benchmark_document: "CIS Debian Linux 12" }
    title: "Ensure cramfs kernel module is not available"
    description:
      "The cramfs filesystem type is a compressed read-only Linux filesystem embedded in"
      "small footprint systems. A cramfs image can be used without having to first"
      "decompress the image."
    rationale:
      "Removing support for unneeded filesystem types reduces the local attack surface of the"
      "system. If this filesystem type is not needed, disable it."
    remediation:
      "Run the following script to unload and disable the cramfs module:"
      "- IF - the cramfs kernel module is available in ANY installed kernel:"		
      "• Create a file ending in .conf with install cramfs /bin/false in the"
      "/etc/modprobe.d/ directory"
      "• Create a file ending in .conf with blacklist cramfs in the /etc/modprobe.d/"
      "directory"
      "• Run modprobe -r cramfs 2>/dev/null; rmmod cramfs 2>/dev/null to"
      "remove cramfs from the kernel"
      "- IF - the cramfs kernel module is not available on the system, or pre-compiled into the"
      "kernel, no remediation is necessary"
    cis_benchmark: {
      profile_level: 1
      severity: LOW
    }
    scan_instructions:
      "scan_type_specific:{instance_scanning:{"
      "  check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{files_in_dir:{"
      "        dir_path:\"/lib/modules/\""
      "        filename_regex: \"cramfs.ko\""
      "        recursive: true"
      "      }}"
      "      existence:{should_exist: false}"
      "    }"      
      "  }"
      "  check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{files_in_dir:{"
      "        dir_path:\"/etc/modprobe.d\""
      "        filename_regex: \".*\\\\.conf\""
      "        recursive: true"
      "      }}"
      "      content_entry:{"
      "        match_type: ALL_MATCH_ANY_ORDER"
      "        match_criteria: {"
      "          filter_regex: \"install cramfs .*\""
      "          expected_regex: \"install cramfs /bin/(true|false)\""
      "        }"
      "      }"
      "    }"
      "    file_checks:{"
      "      files_to_check:{files_in_dir:{"
      "        dir_path:\"/etc/modprobe.d\""
      "        filename_regex: \".*\\\\.conf\""
      "        recursive: true"
      "      }}"
      "      content_entry:{"
      "        match_type: ALL_MATCH_ANY_ORDER"
      "        match_criteria: {"
      "          filter_regex: \"blacklist cramfs.*\""
      "          expected_regex: \"blacklist cramfs.*\""
      "        }"
      "      }"
      "    }"
      "    file_checks:{"
      "      files_to_check:{single_file:{path:\"/proc/modules\"}}"
      "      content_entry:{"
      "        match_type: NONE_MATCH"
      "        match_criteria: {"
      "          filter_regex: \"cramfs .*\""
      "          expected_regex: \"cramfs .*\""
      "        }"
      "      }"
      "    }"
      "  }"
      "}"
      "image_scanning:{"
      "  check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{files_in_dir:{"
      "        dir_path:\"/lib/modules/\""
      "        filename_regex: \"cramfs.ko\""
      "        recursive: true"
      "      }}"
      "      existence:{should_exist: false}"
      "    }"      
      "  }"	  
      "  check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{files_in_dir:{"
      "        dir_path:\"/etc/modprobe.d\""
      "        filename_regex: \".*\\\\.conf\""
      "        recursive: true"
      "      }}"
      "      content_entry:{"
      "        match_type: ALL_MATCH_ANY_ORDER"
      "        match_criteria: {"
      "          filter_regex: \"install cramfs .*\""
      "          expected_regex: \"install cramfs /bin/(true|false)\""
      "        }"
      "      }"
      "    }"
      "    file_checks:{"
      "      files_to_check:{files_in_dir:{"
      "        dir_path:\"/etc/modprobe.d\""
      "        filename_regex: \".*\\\\.conf\""
      "        recursive: true"
      "      }}"
      "      content_entry:{"
      "        match_type: ALL_MATCH_ANY_ORDER"
      "        match_criteria: {"
      "          filter_regex: \"blacklist cramfs.*\""
      "          expected_regex: \"blacklist cramfs.*\""
      "        }"
      "      }"
      "    }"
      "  }"
      "}}"
  }
}

benchmark_configs: {
  id: "freevxfs-module-not-available"
  compliance_note: {
    version: { cpe_uri: "cpe:/o:debian:debian_linux:12.0" version: "1.1.0" benchmark_document: "CIS Debian Linux 12" }
    title: "Ensure freevxfs kernel module is not available"
    description:
      "The freevxfs filesystem type is a free version of the Veritas type filesystem. This is the"
      "primary filesystem type for HP-UX operating systems."
    rationale:
      "Removing support for unneeded filesystem types reduces the local attack surface of the"
      "system. If this filesystem type is not needed, disable it."
    remediation:
      "Run the following script to unload and disable the freevxfs module:"
      "- IF - the freevxfs kernel module is available in ANY installed kernel:"
      "• Create a file ending in .conf with install freevxfs /bin/false in the"
      "/etc/modprobe.d/ directory"
      "• Create a file ending in .conf with blacklist freevxfs in the"
      "/etc/modprobe.d/ directory"
      "• Run modprobe -r freevxfs 2>/dev/null; rmmod freevxfs 2>/dev/null"
      "to remove freevxfs from the kernel"
      "- IF - the freevxfs kernel module is not available on the system, or pre-compiled into"
      "the kernel, no remediation is necessary"
    cis_benchmark: {
      profile_level: 1
      severity: LOW
    }
    scan_instructions:
      "scan_type_specific:{instance_scanning:{"
      "  check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{files_in_dir:{"
      "        dir_path:\"/lib/modules/\""
      "        filename_regex: \"freevxfs.ko\""
      "        recursive: true"
      "      }}"
      "      existence:{should_exist: false}"
      "    }"      
      "  }"
      "  check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{files_in_dir:{"
      "        dir_path:\"/etc/modprobe.d\""
      "        filename_regex: \".*\\\\.conf\""
      "        recursive: true"
      "      }}"
      "      content_entry:{"
      "        match_type: ALL_MATCH_ANY_ORDER"
      "        match_criteria: {"
      "          filter_regex: \"install freevxfs .*\""
      "          expected_regex: \"install freevxfs /bin/(true|false)\""
      "        }"
      "      }"
      "    }"
      "    file_checks:{"
      "      files_to_check:{files_in_dir:{"
      "        dir_path:\"/etc/modprobe.d\""
      "        filename_regex: \".*\\\\.conf\""
      "        recursive: true"
      "      }}"
      "      content_entry:{"
      "        match_type: ALL_MATCH_ANY_ORDER"
      "        match_criteria: {"
      "          filter_regex: \"blacklist freevxfs.*\""
      "          expected_regex: \"blacklist freevxfs.*\""
      "        }"
      "      }"
      "    }"
      "    file_checks:{"
      "      files_to_check:{single_file:{path:\"/proc/modules\"}}"
      "      content_entry:{"
      "        match_type: NONE_MATCH"
      "        match_criteria: {"
      "          filter_regex: \"freevxfs .*\""
      "          expected_regex: \"freevxfs .*\""
      "        }"
      "      }"
      "    }"
      "  }"
      "}"
      "image_scanning:{"
      "  check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{files_in_dir:{"
      "        dir_path:\"/lib/modules/\""
      "        filename_regex: \"freevxfs.ko\""
      "        recursive: true"
      "      }}"
      "      existence:{should_exist: false}"
      "    }"      
      "  }"	  
      "  check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{files_in_dir:{"
      "        dir_path:\"/etc/modprobe.d\""
      "        filename_regex: \".*\\\\.conf\""
      "        recursive: true"
      "      }}"
      "      content_entry:{"
      "        match_type: ALL_MATCH_ANY_ORDER"
      "        match_criteria: {"
      "          filter_regex: \"install freevxfs .*\""
      "          expected_regex: \"install freevxfs /bin/(true|false)\""
      "        }"
      "      }"
      "    }"
      "    file_checks:{"
      "      files_to_check:{files_in_dir:{"
      "        dir_path:\"/etc/modprobe.d\""
      "        filename_regex: \".*\\\\.conf\""
      "        recursive: true"
      "      }}"
      "      content_entry:{"
      "        match_type: ALL_MATCH_ANY_ORDER"
      "        match_criteria: {"
      "          filter_regex: \"blacklist freevxfs.*\""
      "          expected_regex: \"blacklist freevxfs.*\""
      "        }"
      "      }"
      "    }"
      "  }"
      "}}"
  }
}

benchmark_configs: {
  id: "hfs-module-not-available"
  compliance_note: {
    version: { cpe_uri: "cpe:/o:debian:debian_linux:12.0" version: "1.1.0" benchmark_document: "CIS Debian Linux 12" }
    title: "Ensure hfs kernel module is not available"
    description:
      "The hfs filesystem type is a hierarchical filesystem that allows you to mount Mac OS"
      "filesystems."
    rationale:
      "Removing support for unneeded filesystem types reduces the local attack surface of the"
      "system. If this filesystem type is not needed, disable it."
    remediation:
      "Run the following script to unload and disable the hfs module:"
      "- IF - the hfs kernel module is available in ANY installed kernel:"
      "• Create a file ending in .conf with install hfs /bin/false in the"
      "/etc/modprobe.d/ directory"
      "• Create a file ending in .conf with blacklist hfs in the /etc/modprobe.d/"
      "directory"
      "• Run modprobe -r hfs 2>/dev/null; rmmod hfs 2>/dev/null to remove"
      "hfs from the kernel"
      "- IF - the hfs kernel module is not available on the system, or pre-compiled into the"
      "kernel, no remediation is necessary"
    cis_benchmark: {
      profile_level: 1
      severity: LOW
    }
    scan_instructions:
      "scan_type_specific:{instance_scanning:{"
      "  check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{files_in_dir:{"
      "        dir_path:\"/lib/modules/\""
      "        filename_regex: \"hfs.ko\""
      "        recursive: true"
      "      }}"
      "      existence:{should_exist: false}"
      "    }"      
      "  }"
      "  check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{files_in_dir:{"
      "        dir_path:\"/etc/modprobe.d\""
      "        filename_regex: \".*\\\\.conf\""
      "        recursive: true"
      "      }}"
      "      content_entry:{"
      "        match_type: ALL_MATCH_ANY_ORDER"
      "        match_criteria: {"
      "          filter_regex: \"install hfs .*\""
      "          expected_regex: \"install hfs /bin/(true|false)\""
      "        }"
      "      }"
      "    }"
      "    file_checks:{"
      "      files_to_check:{files_in_dir:{"
      "        dir_path:\"/etc/modprobe.d\""
      "        filename_regex: \".*\\\\.conf\""
      "        recursive: true"
      "      }}"
      "      content_entry:{"
      "        match_type: ALL_MATCH_ANY_ORDER"
      "        match_criteria: {"
      "          filter_regex: \"blacklist hfs.*\""
      "          expected_regex: \"blacklist hfs.*\""
      "        }"
      "      }"
      "    }"
      "    file_checks:{"
      "      files_to_check:{single_file:{path:\"/proc/modules\"}}"
      "      content_entry:{"
      "        match_type: NONE_MATCH"
      "        match_criteria: {"
      "          filter_regex: \"hfs .*\""
      "          expected_regex: \"hfs .*\""
      "        }"
      "      }"
      "    }"
      "  }"
      "}"
      "image_scanning:{"
      "  check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{files_in_dir:{"
      "        dir_path:\"/lib/modules/\""
      "        filename_regex: \"hfs.ko\""
      "        recursive: true"
      "      }}"
      "      existence:{should_exist: false}"
      "    }"      
      "  }"	  
      "  check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{files_in_dir:{"
      "        dir_path:\"/etc/modprobe.d\""
      "        filename_regex: \".*\\\\.conf\""
      "        recursive: true"
      "      }}"
      "      content_entry:{"
      "        match_type: ALL_MATCH_ANY_ORDER"
      "        match_criteria: {"
      "          filter_regex: \"install hfs .*\""
      "          expected_regex: \"install hfs /bin/(true|false)\""
      "        }"
      "      }"
      "    }"
      "    file_checks:{"
      "      files_to_check:{files_in_dir:{"
      "        dir_path:\"/etc/modprobe.d\""
      "        filename_regex: \".*\\\\.conf\""
      "        recursive: true"
      "      }}"
      "      content_entry:{"
      "        match_type: ALL_MATCH_ANY_ORDER"
      "        match_criteria: {"
      "          filter_regex: \"blacklist hfs.*\""
      "          expected_regex: \"blacklist hfs.*\""
      "        }"
      "      }"
      "    }"
      "  }"
      "}}"
  }
}

benchmark_configs: {
  id: "hfsplus-module-not-available"
  compliance_note: {
    version: { cpe_uri: "cpe:/o:debian:debian_linux:12.0" version: "1.1.0" benchmark_document: "CIS Debian Linux 12" }
    title: "Ensure hfsplus kernel module is not available"
    description:
      "The hfsplus filesystem type is a hierarchical filesystem designed to replace hfs that"
      "allows you to mount Mac OS filesystems."
    rationale:
      "Removing support for unneeded filesystem types reduces the local attack surface of the"
      "system. If this filesystem type is not needed, disable it."
    remediation:
      "Run the following script to unload and disable the hfsplus module:"
      "- IF - the hfsplus kernel module is available in ANY installed kernel:"
      "• Create a file ending in .conf with install hfsplus /bin/false in the"
      "/etc/modprobe.d/ directory"
      "• Create a file ending in .conf with blacklist hfsplus in the /etc/modprobe.d/"
      "directory"
      "• Run modprobe -r hfsplus 2>/dev/null; rmmod hfsplus 2>/dev/null to remove"
      "hfsplus from the kernel"
      "- IF - the hfsplus kernel module is not available on the system, or pre-compiled into the"
      "kernel, no remediation is necessary"
    cis_benchmark: {
      profile_level: 1
      severity: LOW
    }
    scan_instructions:
      "scan_type_specific:{instance_scanning:{"
      "  check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{files_in_dir:{"
      "        dir_path:\"/lib/modules/\""
      "        filename_regex: \"hfsplus.ko\""
      "        recursive: true"
      "      }}"
      "      existence:{should_exist: false}"
      "    }"      
      "  }"
      "  check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{files_in_dir:{"
      "        dir_path:\"/etc/modprobe.d\""
      "        filename_regex: \".*\\\\.conf\""
      "        recursive: true"
      "      }}"
      "      content_entry:{"
      "        match_type: ALL_MATCH_ANY_ORDER"
      "        match_criteria: {"
      "          filter_regex: \"install hfsplus .*\""
      "          expected_regex: \"install hfsplus /bin/(true|false)\""
      "        }"
      "      }"
      "    }"
      "    file_checks:{"
      "      files_to_check:{files_in_dir:{"
      "        dir_path:\"/etc/modprobe.d\""
      "        filename_regex: \".*\\\\.conf\""
      "        recursive: true"
      "      }}"
      "      content_entry:{"
      "        match_type: ALL_MATCH_ANY_ORDER"
      "        match_criteria: {"
      "          filter_regex: \"blacklist hfsplus.*\""
      "          expected_regex: \"blacklist hfsplus.*\""
      "        }"
      "      }"
      "    }"
      "    file_checks:{"
      "      files_to_check:{single_file:{path:\"/proc/modules\"}}"
      "      content_entry:{"
      "        match_type: NONE_MATCH"
      "        match_criteria: {"
      "          filter_regex: \"hfsplus .*\""
      "          expected_regex: \"hfsplus .*\""
      "        }"
      "      }"
      "    }"
      "  }"
      "}"
      "image_scanning:{"
      "  check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{files_in_dir:{"
      "        dir_path:\"/lib/modules/\""
      "        filename_regex: \"hfsplus.ko\""
      "        recursive: true"
      "      }}"
      "      existence:{should_exist: false}"
      "    }"      
      "  }"	  
      "  check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{files_in_dir:{"
      "        dir_path:\"/etc/modprobe.d\""
      "        filename_regex: \".*\\\\.conf\""
      "        recursive: true"
      "      }}"
      "      content_entry:{"
      "        match_type: ALL_MATCH_ANY_ORDER"
      "        match_criteria: {"
      "          filter_regex: \"install hfsplus .*\""
      "          expected_regex: \"install hfsplus /bin/(true|false)\""
      "        }"
      "      }"
      "    }"
      "    file_checks:{"
      "      files_to_check:{files_in_dir:{"
      "        dir_path:\"/etc/modprobe.d\""
      "        filename_regex: \".*\\\\.conf\""
      "        recursive: true"
      "      }}"
      "      content_entry:{"
      "        match_type: ALL_MATCH_ANY_ORDER"
      "        match_criteria: {"
      "          filter_regex: \"blacklist hfsplus.*\""
      "          expected_regex: \"blacklist hfsplus.*\""
      "        }"
      "      }"
      "    }"
      "  }"
      "}}"
  }
}

benchmark_configs: {
  id: "jffs2-module-not-available"
  compliance_note: {
    version: { cpe_uri: "cpe:/o:debian:debian_linux:12.0" version: "1.1.0" benchmark_document: "CIS Debian Linux 12" }
    title: "Ensure jffs2 kernel module is not available"
    description:
      "The jffs2 (journaling flash filesystem 2) filesystem type is a log-structured filesystem"
      "used in flash memory devices."
    rationale:
      "Removing support for unneeded filesystem types reduces the local attack surface of the"
      "system. If this filesystem type is not needed, disable it."
    remediation:
      "Run the following script to unload and disable the jffs2 module:"
      "- IF - the jffs2 kernel module is available in ANY installed kernel:"
      "• Create a file ending in .conf with install jffs2 /bin/false in the"
      "/etc/modprobe.d/ directory"
      "• Create a file ending in .conf with blacklist jffs2 in the /etc/modprobe.d/"
      "directory"
      "• Run modprobe -r jffs2 2>/dev/null; rmmod jffs2 2>/dev/null to remove"
      "jffs2 from the kernel"
      "- IF - the jffs2 kernel module is not available on the system, or pre-compiled into the"
      "kernel, no remediation is necessary"
    cis_benchmark: {
      profile_level: 1
      severity: LOW
    }
    scan_instructions:
      "scan_type_specific:{instance_scanning:{"
      "  check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{files_in_dir:{"
      "        dir_path:\"/lib/modules/\""
      "        filename_regex: \"jffs2.ko\""
      "        recursive: true"
      "      }}"
      "      existence:{should_exist: false}"
      "    }"      
      "  }"
      "  check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{files_in_dir:{"
      "        dir_path:\"/etc/modprobe.d\""
      "        filename_regex: \".*\\\\.conf\""
      "        recursive: true"
      "      }}"
      "      content_entry:{"
      "        match_type: ALL_MATCH_ANY_ORDER"
      "        match_criteria: {"
      "          filter_regex: \"install jffs2 .*\""
      "          expected_regex: \"install jffs2 /bin/(true|false)\""
      "        }"
      "      }"
      "    }"
      "    file_checks:{"
      "      files_to_check:{files_in_dir:{"
      "        dir_path:\"/etc/modprobe.d\""
      "        filename_regex: \".*\\\\.conf\""
      "        recursive: true"
      "      }}"
      "      content_entry:{"
      "        match_type: ALL_MATCH_ANY_ORDER"
      "        match_criteria: {"
      "          filter_regex: \"blacklist jffs2.*\""
      "          expected_regex: \"blacklist jffs2.*\""
      "        }"
      "      }"
      "    }"
      "    file_checks:{"
      "      files_to_check:{single_file:{path:\"/proc/modules\"}}"
      "      content_entry:{"
      "        match_type: NONE_MATCH"
      "        match_criteria: {"
      "          filter_regex: \"jffs2 .*\""
      "          expected_regex: \"jffs2 .*\""
      "        }"
      "      }"
      "    }"
      "  }"
      "}"
      "image_scanning:{"
      "  check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{files_in_dir:{"
      "        dir_path:\"/lib/modules/\""
      "        filename_regex: \"jffs2.ko\""
      "        recursive: true"
      "      }}"
      "      existence:{should_exist: false}"
      "    }"      
      "  }"	  
      "  check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{files_in_dir:{"
      "        dir_path:\"/etc/modprobe.d\""
      "        filename_regex: \".*\\\\.conf\""
      "        recursive: true"
      "      }}"
      "      content_entry:{"
      "        match_type: ALL_MATCH_ANY_ORDER"
      "        match_criteria: {"
      "          filter_regex: \"install jffs2 .*\""
      "          expected_regex: \"install jffs2 /bin/(true|false)\""
      "        }"
      "      }"
      "    }"
      "    file_checks:{"
      "      files_to_check:{files_in_dir:{"
      "        dir_path:\"/etc/modprobe.d\""
      "        filename_regex: \".*\\\\.conf\""
      "        recursive: true"
      "      }}"
      "      content_entry:{"
      "        match_type: ALL_MATCH_ANY_ORDER"
      "        match_criteria: {"
      "          filter_regex: \"blacklist jffs2.*\""
      "          expected_regex: \"blacklist jffs2.*\""
      "        }"
      "      }"
      "    }"
      "  }"
      "}}"
  }
}

benchmark_configs: {
  id: "overlayfs-module-not-available"
  compliance_note: {
    version: { cpe_uri: "cpe:/o:debian:debian_linux:12.0" version: "1.1.0" benchmark_document: "CIS Debian Linux 12" }
    title: "Ensure overlayfs kernel module is not available"
    description:
      "overlayfs is a Linux filesystem that layers multiple filesystems to create a single"
      "unified view which allows a user to \"merge\" several mount points into a unified"
      "filesystem."
    rationale:
      "The overlayfs has known CVE's: CVE-2023-32629, CVE-2023-2640, CVE-2023-"
      "0386. Disabling the overlayfs reduces the local attack surface by removing support for"	
      "unnecessary filesystem types and mitigates potential risks associated with unauthorized"
      "execution of setuid files, enhancing the overall system security."
    remediation:
      "Run the following script to verify:"
      "- IF - the overlayfs kernel module is available in ANY installed kernel, verify:"
      "• An entry including /bin/true or /bin/false exists in a file within the"
      "/etc/modprobe.d/ directory"
      "• The module is deny listed in a file within the /etc/modprobe.d/ directory"
      "• The module is not loaded in the running kernel"
      "- IF - the overlayfs kernel module is not available on the system, or pre-compiled into"
      "the kernel, no additional configuration is necessary"
    cis_benchmark: {
      profile_level: 2
      severity: LOW
    }
    scan_instructions:
      "scan_type_specific:{instance_scanning:{"
      "  check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{files_in_dir:{"
      "        dir_path:\"/lib/modules/\""
      "        filename_regex: \"overlayfs.ko\""
      "        recursive: true"
      "      }}"
      "      existence:{should_exist: false}"
      "    }"      
      "  }"
      "  check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{files_in_dir:{"
      "        dir_path:\"/etc/modprobe.d\""
      "        filename_regex: \".*\\\\.conf\""
      "        recursive: true"
      "      }}"
      "      content_entry:{"
      "        match_type: ALL_MATCH_ANY_ORDER"
      "        match_criteria: {"
      "          filter_regex: \"install overlayfs .*\""
      "          expected_regex: \"install overlayfs /bin/(true|false)\""
      "        }"
      "      }"
      "    }"
      "    file_checks:{"
      "      files_to_check:{files_in_dir:{"
      "        dir_path:\"/etc/modprobe.d\""
      "        filename_regex: \".*\\\\.conf\""
      "        recursive: true"
      "      }}"
      "      content_entry:{"
      "        match_type: ALL_MATCH_ANY_ORDER"
      "        match_criteria: {"
      "          filter_regex: \"blacklist overlayfs.*\""
      "          expected_regex: \"blacklist overlayfs.*\""
      "        }"
      "      }"
      "    }"
      "    file_checks:{"
      "      files_to_check:{single_file:{path:\"/proc/modules\"}}"
      "      content_entry:{"
      "        match_type: NONE_MATCH"
      "        match_criteria: {"
      "          filter_regex: \"overlayfs .*\""
      "          expected_regex: \"overlayfs .*\""
      "        }"
      "      }"
      "    }"
      "  }"
      "}"
      "image_scanning:{"
      "  check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{files_in_dir:{"
      "        dir_path:\"/lib/modules/\""
      "        filename_regex: \"overlayfs.ko\""
      "        recursive: true"
      "      }}"
      "      existence:{should_exist: false}"
      "    }"      
      "  }"	  
      "  check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{files_in_dir:{"
      "        dir_path:\"/etc/modprobe.d\""
      "        filename_regex: \".*\\\\.conf\""
      "        recursive: true"
      "      }}"
      "      content_entry:{"
      "        match_type: ALL_MATCH_ANY_ORDER"
      "        match_criteria: {"
      "          filter_regex: \"install overlayfs .*\""
      "          expected_regex: \"install overlayfs /bin/(true|false)\""
      "        }"
      "      }"
      "    }"
      "    file_checks:{"
      "      files_to_check:{files_in_dir:{"
      "        dir_path:\"/etc/modprobe.d\""
      "        filename_regex: \".*\\\\.conf\""
      "        recursive: true"
      "      }}"
      "      content_entry:{"
      "        match_type: ALL_MATCH_ANY_ORDER"
      "        match_criteria: {"
      "          filter_regex: \"blacklist overlayfs.*\""
      "          expected_regex: \"blacklist overlayfs.*\""
      "        }"
      "      }"
      "    }"
      "  }"
      "}}"
  }
}

benchmark_configs: {
  id: "squashfs-module-not-available"
  compliance_note: {
    version: { cpe_uri: "cpe:/o:debian:debian_linux:12.0" version: "1.1.0" benchmark_document: "CIS Debian Linux 12" }
    title: "Ensure squashfs kernel module is not available"
    description:
      "The squashfs filesystem type is a compressed read-only Linux "
      "filesystem embedded in small footprint systems (similar to cramfs ). A "
      "squashfs image can be used without having to first decompress the image."
    rationale:
      "Removing support for unneeded filesystem types reduces the local attack "
      "surface of the server. If this filesystem type is not needed, disable "
      "it."
    remediation:
      "Edit or create a file in the /etc/modprobe.d/ directory ending in .conf "
      "with the lines that read install squashfs /bin/false and blacklist squashfs.\n"
      "Example: \n"
      "```\n"
      "printf \"install squashfs /bin/false "
      "blacklist squashfs "
      "\" >> /etc/modprobe.d/squashfs.conf "
      "```\n"
      "Run the following command to unload the squashfs module:\n"
      "```\n"
      "# rmmod squashfs\n"
      "```\n"
    cis_benchmark: {
      profile_level: 2
      severity: LOW
    }
    scan_instructions:
      "scan_type_specific:{instance_scanning:{"
      "  check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{files_in_dir:{"
      "        dir_path:\"/lib/modules/\""
      "        filename_regex: \"squashfs.ko\""
      "        recursive: true"
      "      }}"
      "      existence:{should_exist: false}"
      "    }"      
      "  }"
      "  check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{files_in_dir:{"
      "        dir_path:\"/etc/modprobe.d\""
      "        filename_regex: \".*\\\\.conf\""
      "        recursive: true"
      "      }}"
      "      content_entry:{"
      "        match_type: ALL_MATCH_ANY_ORDER"
      "        match_criteria: {"
      "          filter_regex: \"install squashfs .*\""
      "          expected_regex: \"install squashfs /bin/(true|false)\""
      "        }"
      "      }"
      "    }"
      "    file_checks:{"
      "      files_to_check:{files_in_dir:{"
      "        dir_path:\"/etc/modprobe.d\""
      "        filename_regex: \".*\\\\.conf\""
      "        recursive: true"
      "      }}"
      "      content_entry:{"
      "        match_type: ALL_MATCH_ANY_ORDER"
      "        match_criteria: {"
      "          filter_regex: \"blacklist squashfs.*\""
      "          expected_regex: \"blacklist squashfs.*\""
      "        }"
      "      }"
      "    }"
      "    file_checks:{"
      "      files_to_check:{single_file:{path:\"/proc/modules\"}}"
      "      content_entry:{"
      "        match_type: NONE_MATCH"
      "        match_criteria: {"
      "          filter_regex: \"squashfs .*\""
      "          expected_regex: \"squashfs .*\""
      "        }"
      "      }"
      "    }"
      "  }"
      "}"
      "image_scanning:{"
      "  check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{files_in_dir:{"
      "        dir_path:\"/lib/modules/\""
      "        filename_regex: \"squashfs.ko\""
      "        recursive: true"
      "      }}"
      "      existence:{should_exist: false}"
      "    }"      
      "  }"	  
      "  check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{files_in_dir:{"
      "        dir_path:\"/etc/modprobe.d\""
      "        filename_regex: \".*\\\\.conf\""
      "        recursive: true"
      "      }}"
      "      content_entry:{"
      "        match_type: ALL_MATCH_ANY_ORDER"
      "        match_criteria: {"
      "          filter_regex: \"install squashfs .*\""
      "          expected_regex: \"install squashfs /bin/(true|false)\""
      "        }"
      "      }"
      "    }"
      "    file_checks:{"
      "      files_to_check:{files_in_dir:{"
      "        dir_path:\"/etc/modprobe.d\""
      "        filename_regex: \".*\\\\.conf\""
      "        recursive: true"
      "      }}"
      "      content_entry:{"
      "        match_type: ALL_MATCH_ANY_ORDER"
      "        match_criteria: {"
      "          filter_regex: \"blacklist squashfs.*\""
      "          expected_regex: \"blacklist squashfs.*\""
      "        }"
      "      }"
      "    }"
      "  }"
      "}}"
  }
}

benchmark_configs: {
  id: "udf-module-not-available"
  compliance_note: {
    version: { cpe_uri: "cpe:/o:debian:debian_linux:12.0" version: "1.1.0" benchmark_document: "CIS Debian Linux 12" }
    title: "Ensure udf kernel module is not available"
    description:
      "The udf filesystem type is the universal disk format used to implement ISO/IEC 13346"
      "and ECMA-167 specifications. This is an open vendor filesystem type for data storage"
      "on a broad range of media. This filesystem type is necessary to support writing DVDs"
      "and newer optical disc formats."
    rationale:
      "Removing support for unneeded filesystem types reduces the local attack surface of the"
      "system. If this filesystem type is not needed, disable it."
    remediation:
      "Run the following script to unload and disable the udf module:"
      "- IF - the udf kernel module is available in ANY installed kernel:"
      "• Create a file ending in .conf with install udf /bin/false in the"
      "/etc/modprobe.d/ directory"
      "• Create a file ending in .conf with blacklist udf in the /etc/modprobe.d/"
      "directory"
      "• Run modprobe -r udf 2>/dev/null; rmmod udf 2>/dev/null to remove"
      "udf from the kernel"
      "- IF - the udf kernel module is not available on the system, or pre-compiled into the"
      "kernel, no remediation is necessary"
    cis_benchmark: {
      profile_level: 2
      severity: LOW
    }
    scan_instructions:
      "scan_type_specific:{instance_scanning:{"
      "  check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{files_in_dir:{"
      "        dir_path:\"/lib/modules/\""
      "        filename_regex: \"udf.ko\""
      "        recursive: true"
      "      }}"
      "      existence:{should_exist: false}"
      "    }"      
      "  }"
      "  check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{files_in_dir:{"
      "        dir_path:\"/etc/modprobe.d\""
      "        filename_regex: \".*\\\\.conf\""
      "        recursive: true"
      "      }}"
      "      content_entry:{"
      "        match_type: ALL_MATCH_ANY_ORDER"
      "        match_criteria: {"
      "          filter_regex: \"install udf .*\""
      "          expected_regex: \"install udf /bin/(true|false)\""
      "        }"
      "      }"
      "    }"
      "    file_checks:{"
      "      files_to_check:{files_in_dir:{"
      "        dir_path:\"/etc/modprobe.d\""
      "        filename_regex: \".*\\\\.conf\""
      "        recursive: true"
      "      }}"
      "      content_entry:{"
      "        match_type: ALL_MATCH_ANY_ORDER"
      "        match_criteria: {"
      "          filter_regex: \"blacklist udf.*\""
      "          expected_regex: \"blacklist udf.*\""
      "        }"
      "      }"
      "    }"
      "    file_checks:{"
      "      files_to_check:{single_file:{path:\"/proc/modules\"}}"
      "      content_entry:{"
      "        match_type: NONE_MATCH"
      "        match_criteria: {"
      "          filter_regex: \"udf .*\""
      "          expected_regex: \"udf .*\""
      "        }"
      "      }"
      "    }"
      "  }"
      "}"
      "image_scanning:{"
      "  check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{files_in_dir:{"
      "        dir_path:\"/lib/modules/\""
      "        filename_regex: \"udf.ko\""
      "        recursive: true"
      "      }}"
      "      existence:{should_exist: false}"
      "    }"      
      "  }"	  
      "  check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{files_in_dir:{"
      "        dir_path:\"/etc/modprobe.d\""
      "        filename_regex: \".*\\\\.conf\""
      "        recursive: true"
      "      }}"
      "      content_entry:{"
      "        match_type: ALL_MATCH_ANY_ORDER"
      "        match_criteria: {"
      "          filter_regex: \"install udf .*\""
      "          expected_regex: \"install udf /bin/(true|false)\""
      "        }"
      "      }"
      "    }"
      "    file_checks:{"
      "      files_to_check:{files_in_dir:{"
      "        dir_path:\"/etc/modprobe.d\""
      "        filename_regex: \".*\\\\.conf\""
      "        recursive: true"
      "      }}"
      "      content_entry:{"
      "        match_type: ALL_MATCH_ANY_ORDER"
      "        match_criteria: {"
      "          filter_regex: \"blacklist udf.*\""
      "          expected_regex: \"blacklist udf.*\""
      "        }"
      "      }"
      "    }"
      "  }"
      "}}"
  }
}

benchmark_configs: {
  id: "usb_storage-module-not-available"
  compliance_note: {
    version: { cpe_uri: "cpe:/o:debian:debian_linux:12.0" version: "1.1.0" benchmark_document: "CIS Debian Linux 12" }
    title: "Ensure usb_storage kernel module is not available"
    description:
      "USB storage provides a means to transfer and store files ensuring persistence and"
      "availability of the files independent of network connection status. Its popularity and utility"
      "has led to USB-based malware being a simple and common means for network"
      "infiltration and a first step to establishing a persistent threat within a networked"
      "environment."
    rationale:
      "Restricting USB access on the system will decrease the physical attack surface for a"
      "device and diminish the possible vectors to introduce malware."
    remediation:
      "Run the following script to unload and disable the usb-storage module:"
      "- IF - the usb-storage kernel module is available in ANY installed kernel:"
      "• Create a file ending in .conf with install usb-storage /bin/false in the"
      "/etc/modprobe.d/ directory"
      "• Create a file ending in .conf with blacklist usb-storage in the"
      "/etc/modprobe.d/ directory"
      "• Run modprobe -r usb-storage 2>/dev/null; rmmod usb-storage"
      "2>/dev/null to remove usb-storage from the kernel"
      "- IF - the usb-storage kernel module is not available on the system, or pre-compiled"
      "into the kernel, no remediation is necessary"
    cis_benchmark: {
      profile_level: 2
      severity: LOW
    }
    scan_instructions:
      "scan_type_specific:{instance_scanning:{"
      "  check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{files_in_dir:{"
      "        dir_path:\"/lib/modules/\""
      "        filename_regex: \"usb_storage.ko\""
      "        recursive: true"
      "      }}"
      "      existence:{should_exist: false}"
      "    }"      
      "  }"
      "  check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{files_in_dir:{"
      "        dir_path:\"/etc/modprobe.d\""
      "        filename_regex: \".*\\\\.conf\""
      "        recursive: true"
      "      }}"
      "      content_entry:{"
      "        match_type: ALL_MATCH_ANY_ORDER"
      "        match_criteria: {"
      "          filter_regex: \"install usb_storage .*\""
      "          expected_regex: \"install usb_storage /bin/(true|false)\""
      "        }"
      "      }"
      "    }"
      "    file_checks:{"
      "      files_to_check:{files_in_dir:{"
      "        dir_path:\"/etc/modprobe.d\""
      "        filename_regex: \".*\\\\.conf\""
      "        recursive: true"
      "      }}"
      "      content_entry:{"
      "        match_type: ALL_MATCH_ANY_ORDER"
      "        match_criteria: {"
      "          filter_regex: \"blacklist usb_storage.*\""
      "          expected_regex: \"blacklist usb_storage.*\""
      "        }"
      "      }"
      "    }"
      "    file_checks:{"
      "      files_to_check:{single_file:{path:\"/proc/modules\"}}"
      "      content_entry:{"
      "        match_type: NONE_MATCH"
      "        match_criteria: {"
      "          filter_regex: \"usb_storage .*\""
      "          expected_regex: \"usb_storage .*\""
      "        }"
      "      }"
      "    }"
      "  }"
      "}"
      "image_scanning:{"
      "  check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{files_in_dir:{"
      "        dir_path:\"/lib/modules/\""
      "        filename_regex: \"usb_storage.ko\""
      "        recursive: true"
      "      }}"
      "      existence:{should_exist: false}"
      "    }"      
      "  }"	  
      "  check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{files_in_dir:{"
      "        dir_path:\"/etc/modprobe.d\""
      "        filename_regex: \".*\\\\.conf\""
      "        recursive: true"
      "      }}"
      "      content_entry:{"
      "        match_type: ALL_MATCH_ANY_ORDER"
      "        match_criteria: {"
      "          filter_regex: \"install usb_storage .*\""
      "          expected_regex: \"install usb_storage /bin/(true|false)\""
      "        }"
      "      }"
      "    }"
      "    file_checks:{"
      "      files_to_check:{files_in_dir:{"
      "        dir_path:\"/etc/modprobe.d\""
      "        filename_regex: \".*\\\\.conf\""
      "        recursive: true"
      "      }}"
      "      content_entry:{"
      "        match_type: ALL_MATCH_ANY_ORDER"
      "        match_criteria: {"
      "          filter_regex: \"blacklist usb_storage.*\""
      "          expected_regex: \"blacklist usb_storage.*\""
      "        }"
      "      }"
      "    }"
      "  }"
      "}}"
  }
}

benchmark_configs: {
  id: "tmp-configured"
  compliance_note: {
    version: { cpe_uri: "cpe:/o:debian:debian_linux:12.0" version: "1.1.0" benchmark_document: "CIS Debian Linux 12" }  		   
    title: "Ensure /tmp is configured"
    description:
      "The /tmp directory is a world-writable directory used for temporary "
      "storage by all users and some applications."
    rationale:
      "Making /tmp its own file system allows an administrator to set additional mount options"
      "such as the noexec option on the mount, making /tmp useless for an attacker to install"
      "executable code. It would also prevent an attacker from establishing a hard link to a"
      "system setuid program and wait for it to be updated. Once the program was updated,"
      "the hard link would be broken, and the attacker would have his own copy of the"
      "program. If the program happened to have a security vulnerability, the attacker could"
      "continue to exploit the known flaw."
      "This can be accomplished by either mounting tmpfs to /tmp, or creating a separate"
      "partition for /tmp."
    remediation:
      "First ensure that systemd is correctly configured to ensure that /tmp will be mounted at"""
      "boot time."
      "`# systemctl unmask tmp.mount`"
      "For specific configuration requirements of the /tmp mount for your environment, modify"
      "/etc/fstab."
      "Example of using tmpfs with specific mount options:"
      "`tmpfs /tmp tmpfs defaults,rw,nosuid,nodev,noexec,relatime,size=2G 0 0`"
      "Note: the size=2G is an example of setting a specific size for tmpfs."
      "Example of using a volume or disk with specific mount options. The source location of"
      "the volume or disk will vary depending on your environment:"
      "`<device> /tmp <fstype> defaults,nodev,nosuid,noexec 0 0`"
    cis_benchmark: {
      profile_level: 1
      severity: LOW
    }
    scan_instructions:
      "scan_type_specific:{instance_scanning:{"
      "  check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{single_file:{path:\"/proc/self/mountinfo\"}}"
      "      content_entry:{"
      "        match_type: ALL_MATCH_ANY_ORDER"
      "        match_criteria: {"
      "          filter_regex: \".* /tmp .*- .*\""
      "          expected_regex: \".* /tmp .*- tmpfs tmpfs.*\""
      "        }"
      "      }"
      "    }"
      "    file_checks:{"
      "      files_to_check:{single_file:{path:\"/usr/share/systemd/tmp.mount\"}}"
      "      content_entry:{"
      "        match_type: ALL_MATCH_ANY_ORDER"
      "        match_criteria: {"
      "          filter_regex: \"Type=.*\""
      "          expected_regex: \"Type=tmpfs\""
      "        }"
      "      }"
      "    }"
      "  }"
      "}"
      "image_scanning:{"
      "  check_alternatives:{"
      "      file_checks:{"
      "      files_to_check:{single_file:{path:\"/usr/share/systemd/tmp.mount\"}}"
      "      content_entry:{"
      "        match_type: ALL_MATCH_ANY_ORDER"
      "        match_criteria: {"
      "          filter_regex: \"Type=.*\""
      "          expected_regex: \"Type=tmpfs\""
      "        }"
      "      }"
      "    }"
      "  }"
      "}}"
  }
}

benchmark_configs: {
  id: "tmp-nodev"
  compliance_note: {
    version: { cpe_uri: "cpe:/o:debian:debian_linux:12.0" version: "1.1.0" benchmark_document: "CIS Debian Linux 12" }  		   
    title: "Ensure nodev option set on /tmp partition"
    description:
      "The nodev mount option specifies that the filesystem cannot contain "
      "special devices."
    rationale:
      "Since the /tmp filesystem is not intended to support devices, set "
      "this option to ensure that users cannot attempt to create block or "
      "character special devices in /tmp ."
    remediation:
      "- IF - a separate partition exists for /tmp."
      "Edit the /etc/fstab file and add nodev to the fourth field (mounting "
      "options) for the /tmp partition. See the fstab(5) manual page for "
      "more information.\n"
      "Run the following command to remount /tmp:\n"
      "```\n"
      "# mount -o remount,nodev /tmp\n"
      "```\n"
      "or\n"
      "Edit the config file in /usr/lib/systemd/system/tmp.mount.d to add "
      "nodev to the /tmp mount options:\n"
      "```\n"
      "[Mount]\n"
      "Options=mode=1777,strictatime,noexec,nodev,nosuid\n"
      "Run the following command to remount /tmp:\n"
      "# mount -o remount,nodev /tmp\n"
      "```\n"
    cis_benchmark: {
      profile_level: 1
      severity: LOW
    }
    scan_instructions:
      "scan_type_specific:{instance_scanning:{"
      "  check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{single_file:{path:\"/proc/self/mountinfo\"}}"
      "      content_entry:{"
      "        match_type: ALL_MATCH_ANY_ORDER"
      "        match_criteria: {"
      "          filter_regex: \".* /tmp .* - .*\""
      "          expected_regex: \".* /tmp .*nodev.* - .*\""
      "        }"
      "      }"
      "    }"
      "    file_checks:{"
      "      files_to_check:{single_file:{"
      "        path:\"/usr/share/systemd/tmp.mount\"}}"      
      "      content_entry:{"
      "        match_type: ALL_MATCH_ANY_ORDER"
      "        match_criteria: {"
      "          filter_regex: \"Options=.*\""
      "          expected_regex: \"Options=.*nodev.*\""
      "        }"
      "      }"
      "    }"
      "  }"
      "  check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{single_file:{path:\"/proc/self/mountinfo\"}}"
      "      content_entry:{"
      "        match_type: NONE_MATCH"
      "        match_criteria: {"
      "          filter_regex: \".* /tmp .* - .*\""
      "          expected_regex: \".* /tmp .* - .*\""
      "        }"
      "      }"
      "    }"
      "  }"
      "}"
      "image_scanning:{"
      "  check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{single_file:{"
      "        path:\"/usr/share/systemd/tmp.mount\"}}"      
      "      content_entry:{"
      "        match_type: ALL_MATCH_ANY_ORDER"
      "        match_criteria: {"
      "          filter_regex: \"Options=.*\""
      "          expected_regex: \"Options=.*nodev.*\""
      "        }"
      "      }"
      "    }"
      "  }"
      "}}"
  }
}

benchmark_configs: {
  id: "tmp-nosuid"
  compliance_note: {
    version: { cpe_uri: "cpe:/o:debian:debian_linux:12.0" version: "1.1.0" benchmark_document: "CIS Debian Linux 12" }  		   
    title: "Ensure nosuid option set on /tmp partition"
    description:
      "The nosuid mount option specifies that the filesystem cannot contain"
      "setuid files."
    rationale:
      "Since the /tmp filesystem is only intended for temporary file storage, set this option to"
      "ensure that users cannot create setuid files in /tmp."
    remediation:
      "- IF - a separate partition exists for /tmp."
      "Edit the /etc/fstab file and add nosuid to the fourth field (mounting options) for the"
      "/tmp partition."
      "Example:"
      "<device> /tmp <fstype> defaults,rw,nosuid,nodev,noexec,relatime 0 0"
      "Run the following command to remount /tmp with the configured options:"
      "# mount -o remount /tmp"
    cis_benchmark: {
      profile_level: 1
      severity: LOW
    }
    scan_instructions:
      "scan_type_specific:{instance_scanning:{"
      "  check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{single_file:{path:\"/proc/self/mountinfo\"}}"
      "      content_entry:{"
      "        match_type: ALL_MATCH_ANY_ORDER"
      "        match_criteria: {"
      "          filter_regex: \".* /tmp .* - .*\""
      "          expected_regex: \".* /tmp .*nosuid.* - .*\""
      "        }"
      "      }"
      "    }"
      "    file_checks:{"
      "      files_to_check:{single_file:{"
      "        path:\"/usr/share/systemd/tmp.mount\"}}"      
      "      content_entry:{"
      "        match_type: ALL_MATCH_ANY_ORDER"
      "        match_criteria: {"
      "          filter_regex: \"Options=.*\""
      "          expected_regex: \"Options=.*nosuid.*\""
      "        }"
      "      }"
      "    }"
      "  }"
      "  check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{single_file:{path:\"/proc/self/mountinfo\"}}"
      "      content_entry:{"
      "        match_type: NONE_MATCH"
      "        match_criteria: {"
      "          filter_regex: \".* /tmp .* - .*\""
      "          expected_regex: \".* /tmp .* - .*\""
      "        }"
      "      }"
      "    }"
      "  }"
      "}"
      "image_scanning:{"
      "  check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{single_file:{"
      "        path:\"/usr/share/systemd/tmp.mount\"}}"      
      "      content_entry:{"
      "        match_type: ALL_MATCH_ANY_ORDER"
      "        match_criteria: {"
      "          filter_regex: \"Options=.*\""
      "          expected_regex: \"Options=.*nosuid.*\""
      "        }"
      "      }"
      "    }"
      "  }"
      "}}"
  }
}

benchmark_configs: {
  id: "tmp-noexec"
  compliance_note: {
    version: { cpe_uri: "cpe:/o:debian:debian_linux:12.0" version: "1.1.0" benchmark_document: "CIS Debian Linux 12" } 
    title: "Ensure noexec option set on /tmp partition"
    description:
      "The noexec mount option specifies that the filesystem cannot contain "
      "executable binaries."
    rationale:
      "Since the /tmp filesystem is only intended for temporary file storage, set this option to"
      "ensure that users cannot run executable binaries from /tmp."
    remediation:
      "- IF - a separate partition exists for /tmp."
      "Edit the /etc/fstab file and add noexec to the fourth field (mounting options) for the"	
      "/tmp partition."	   
      "Example:"  
      "<device> /tmp <fstype> defaults,rw,nosuid,nodev,noexec,relatime 0 0"	
      "Run the following command to remount /tmp with the configured options:" 
      "# mount -o remount /tmp"	 
    cis_benchmark: {
      profile_level: 1
      severity: LOW
    }
    scan_instructions:
      "scan_type_specific:{instance_scanning:{"
      "  check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{single_file:{path:\"/proc/self/mountinfo\"}}"
      "      content_entry:{"
      "        match_type: ALL_MATCH_ANY_ORDER"
      "        match_criteria: {"
      "          filter_regex: \".* /tmp .* - .*\""
      "          expected_regex: \".* /tmp .*noexec.* - .*\""
      "        }"
      "      }"
      "    }"
      "    file_checks:{"
      "      files_to_check:{single_file:{"
      "        path:\"/usr/share/systemd/tmp.mount\"}}"      
      "      content_entry:{"
      "        match_type: ALL_MATCH_ANY_ORDER"
      "        match_criteria: {"
      "          filter_regex: \"Options=.*\""
      "          expected_regex: \"Options=.*noexec.*\""
      "        }"
      "      }"
      "    }"
      "  }"
      "  check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{single_file:{path:\"/proc/self/mountinfo\"}}"
      "      content_entry:{"
      "        match_type: NONE_MATCH"
      "        match_criteria: {"
      "          filter_regex: \".* /tmp .* - .*\""
      "          expected_regex: \".* /tmp .* - .*\""
      "        }"
      "      }"
      "    }"
      "  }"
      "}"
      "image_scanning:{"
      "  check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{single_file:{"
      "        path:\"/usr/share/systemd/tmp.mount\"}}"      
      "      content_entry:{"
      "        match_type: ALL_MATCH_ANY_ORDER"
      "        match_criteria: {"
      "          filter_regex: \"Options=.*\""
      "          expected_regex: \"Options=.*noexec.*\""
      "        }"
      "      }"
      "    }"
      "  }"
      "}}"
  }
}

benchmark_configs: {
  id: "shm-configured"
  compliance_note: {
    version: { cpe_uri: "cpe:/o:debian:debian_linux:12.0" version: "1.1.0" benchmark_document: "CIS Debian Linux 12" }  		   
    title: "Ensure /dev/shm/ is configured"
    description:
      "The /dev/shm directory is a world-writable directory that can function as shared"
      "memory that facilitates inter process communication (IPC)."
    rationale:
      "Making /dev/shm its own file system allows an administrator to set additional mount"
      "options such as the noexec option on the mount, making /dev/shm useless for an"
      "attacker to install executable code. It would also prevent an attacker from establishing a"
      "hard link to a system setuid program and wait for it to be updated. Once the program"
      "was updated, the hard link would be broken and the attacker would have his own copy"
      "of the program. If the program happened to have a security vulnerability, the attacker"
      "could continue to exploit the known flaw."
      "This can be accomplished by mounting tmpfs to /dev/shm."
    remediation:
      "For specific configuration requirements of the /dev/shm mount for your environment,"
      "modify /etc/fstab."
      "Example:"
      "tmpfs /dev/shm tmpfs"
      "defaults,rw,nosuid,nodev,noexec,relatime,size=2G 0 0"
    cis_benchmark: {
      profile_level: 1
      severity: LOW
    }
    scan_instructions:
      "scan_type_specific:{instance_scanning:{"
      "  check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{single_file:{path:\"/proc/self/mountinfo\"}}"
      "      content_entry:{"
      "        match_type: ALL_MATCH_ANY_ORDER"
      "        match_criteria: {"
      "          filter_regex: \".* /dev/shm .*- .*\""
      "          expected_regex: \".* /dev/shm .*- tmpfs tmpfs.*\""
      "        }"
      "      }"
      "    }"
      "    file_checks:{"
      "      files_to_check:{single_file:{path:\"/etc/fstab\"}}"
      "      content_entry:{"
      "        match_type: ALL_MATCH_ANY_ORDER"
      "        match_criteria: {"
      "          filter_regex: \".*/dev/shm.*\""
      "          expected_regex: \"tmpfs.*\""
      "        }"
      "      }"
      "    }"
      "  }"
      "}"
      "image_scanning:{"
      "  check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{single_file:{path:\"/etc/fstab\"}}"
      "      content_entry:{"
      "        match_type: ALL_MATCH_ANY_ORDER"
      "        match_criteria: {"
      "          filter_regex: \".*/dev/shm.*\""
      "          expected_regex: \"tmpfs.*\""
      "        }"
      "      }"
      "    }"
      "  }"
      "}}"
  }
}

benchmark_configs: {
  id: "shm-nodev"
  compliance_note: {
    version: { cpe_uri: "cpe:/o:debian:debian_linux:12.0" version: "1.1.0" benchmark_document: "CIS Debian Linux 12" }  		   
    title: "Ensure nodev option set on /dev/shm partition"
    description:
      "The nodev mount option specifies that the filesystem cannot contain special devices."
    rationale:
      "Since the /dev/shm filesystem is not intended to support devices, set this option to"
      "ensure that users cannot attempt to create special devices in /dev/shm partitions."
    remediation:
      "- IF - a separate partition exists for /dev/shm."
      "Edit the /etc/fstab file and add nodev to the fourth field (mounting options) for the"
      "/dev/shm partition. See the fstab(5) manual page for more information."
      "Example:"
      "tmpfs /dev/shm tmpfs defaults,rw,nosuid,nodev,noexec,relatime 0 0"
      "Run the following command to remount /dev/shm with the configured options:"
      "# mount -o remount /dev/shm"
      "Note: It is recommended to use tmpfs as the device/filesystem type as /dev/shm is"
      "used as shared memory space by applications."
    cis_benchmark: {
      profile_level: 1
      severity: LOW
    }
    scan_instructions:
      "scan_type_specific:{instance_scanning:{"
      "  check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{single_file:{path:\"/proc/self/mountinfo\"}}"
      "      content_entry:{"
      "        match_type: ALL_MATCH_ANY_ORDER"
      "        match_criteria: {"
      "          filter_regex: \".* /dev/shm .* - .*\""
      "          expected_regex: \".* /dev/shm .*nodev.* - .*\""
      "        }"
      "      }"
      "    }"
      "    file_checks:{"
      "      files_to_check:{single_file:{"
      "        path:\"/etc/fstab\"}}"      
      "      content_entry:{"
      "        match_type: ALL_MATCH_ANY_ORDER"
      "        match_criteria: {"
      "          filter_regex: \".*/dev/shm.*\""
      "          expected_regex: \".*nodev.*\""
      "        }"
      "      }"
      "    }"
      "  }"
      "  check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{single_file:{path:\"/proc/self/mountinfo\"}}"
      "      content_entry:{"
      "        match_type: NONE_MATCH"
      "        match_criteria: {"
      "          filter_regex: \".* /dev/shm .* - .*\""
      "          expected_regex: \".* /dev/shm .* - .*\""
      "        }"
      "      }"
      "    }"
      "  }"
      "}"
      "image_scanning:{"
      "  check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{single_file:{"
      "        path:\"/etc/fstab\"}}"      
      "      content_entry:{"
      "        match_type: ALL_MATCH_ANY_ORDER"
      "        match_criteria: {"
      "          filter_regex: \".*/dev/shm.*\""
      "          expected_regex: \".*nodev.*\""
      "        }"
      "      }"
      "    }"
      "  }"
      "}}"
  }
}

benchmark_configs: {
  id: "shm-nosuid"
  compliance_note: {
    version: { cpe_uri: "cpe:/o:debian:debian_linux:12.0" version: "1.1.0" benchmark_document: "CIS Debian Linux 12" }  		   
    title: "Ensure nosuid option set on /dev/shm partition"
    description:
      "The nosuid mount option specifies that the filesystem cannot contain setuid files."
    rationale:
      "Setting this option on a file system prevents users from introducing privileged programs"
      "onto the system and allowing non-root users to execute them."
    remediation:
      "- IF - a separate partition exists for /dev/shm."
      "Edit the /etc/fstab file and add nosuid to the fourth field (mounting options) for the"
      "/dev/shm partition. See the fstab(5) manual page for more information."
      "Example:"
      "tmpfs /dev/shm tmpfs defaults,rw,nosuid,nosuid,noexec,relatime 0 0"
      "Run the following command to remount /dev/shm with the configured options:"
      "# mount -o remount /dev/shm"
      "Note: It is recommended to use tmpfs as the device/filesystem type as /dev/shm is"
      "used as shared memory space by applications."
    cis_benchmark: {
      profile_level: 1
      severity: LOW
    }
    scan_instructions:
      "scan_type_specific:{instance_scanning:{"
      "  check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{single_file:{path:\"/proc/self/mountinfo\"}}"
      "      content_entry:{"
      "        match_type: ALL_MATCH_ANY_ORDER"
      "        match_criteria: {"
      "          filter_regex: \".* /dev/shm/ .* - .*\""
      "          expected_regex: \".* /dev/shm .*nosuid.* - .*\""
      "        }"
      "      }"
      "    }"
      "    file_checks:{"
      "      files_to_check:{single_file:{"
      "        path:\"/etc/fstab\"}}"      
      "      content_entry:{"
      "        match_type: ALL_MATCH_ANY_ORDER"
      "        match_criteria: {"
      "          filter_regex: \".*/dev/shm.*\""
      "          expected_regex: \".*nosuid.*\""
      "        }"
      "      }"
      "    }"
      "  }"
      "  check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{single_file:{path:\"/proc/self/mountinfo\"}}"
      "      content_entry:{"
      "        match_type: NONE_MATCH"
      "        match_criteria: {"
      "          filter_regex: \".* /dev/shm .* - .*\""
      "          expected_regex: \".* /dev/shm .* - .*\""
      "        }"
      "      }"
      "    }"
      "  }"
      "}"
      "image_scanning:{"
      "  check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{single_file:{"
      "        path:\"/etc/fstab\"}}"      
      "      content_entry:{"
      "        match_type: ALL_MATCH_ANY_ORDER"
      "        match_criteria: {"
      "          filter_regex: \".*/dev/shm.*\""
      "          expected_regex: \".*nosuid.*\""
      "        }"
      "      }"
      "    }"
      "  }"
      "}}"
  }
}

benchmark_configs: {
  id: "shm-noexec"
  compliance_note: {
    version: { cpe_uri: "cpe:/o:debian:debian_linux:12.0" version: "1.1.0" benchmark_document: "CIS Debian Linux 12" }  		   
    title: "Ensure noexec option set on /dev/shm partition"
    description:
      "The noexec mount option specifies that the filesystem cannot contain executable binaries."
    rationale:
      "Setting this option on a file system prevents users from executing programs from shared"
      "memory. This deters users from introducing potentially malicious software on the"
      "system."
    remediation:
      "- IF - a separate partition exists for /dev/shm."
      "Edit the /etc/fstab file and add noexec to the fourth field (mounting options) for the"
      "/dev/shm partition."
      "Example:"
      "tmpfs /dev/shm tmpfs defaults,rw,noexec,nodev,noexec,relatime 0 0"
      "Run the following command to remount /dev/shm with the configured options:"
      "# mount -o remount /dev/shm"
      "Note: It is recommended to use tmpfs as the device/filesystem type as /dev/shm is"
      "used as shared memory space by applications."
    cis_benchmark: {
      profile_level: 1
      severity: LOW
    }
    scan_instructions:
      "scan_type_specific:{instance_scanning:{"
      "  check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{single_file:{path:\"/proc/self/mountinfo\"}}"
      "      content_entry:{"
      "        match_type: ALL_MATCH_ANY_ORDER"
      "        match_criteria: {"
      "          filter_regex: \".* /dev/shm .* - .*\""
      "          expected_regex: \".* /dev/shm .*noexec.* - .*\""
      "        }"
      "      }"
      "    }"
      "    file_checks:{"
      "      files_to_check:{single_file:{"
      "        path:\"/etc/fstab\"}}"      
      "      content_entry:{"
      "        match_type: ALL_MATCH_ANY_ORDER"
      "        match_criteria: {"
      "          filter_regex: \".*/dev/shm.*\""
      "          expected_regex: \".*noexec.*\""
      "        }"
      "      }"
      "    }"
      "  }"
      "  check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{single_file:{path:\"/proc/self/mountinfo\"}}"
      "      content_entry:{"
      "        match_type: NONE_MATCH"
      "        match_criteria: {"
      "          filter_regex: \".* /dev/shm .* - .*\""
      "          expected_regex: \".* /dev/shm .* - .*\""
      "        }"
      "      }"
      "    }"
      "  }"
      "}"
      "image_scanning:{"
      "  check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{single_file:{"
      "        path:\"/etc/fstab\"}}"      
      "      content_entry:{"
      "        match_type: ALL_MATCH_ANY_ORDER"
      "        match_criteria: {"
      "          filter_regex: \".*/dev/shm.*\""
      "          expected_regex: \".*noexec.*\""
      "        }"
      "      }"
      "    }"
      "  }"
      "}}"
  }
}

benchmark_configs: {
  id: "separate-partition-home"
  compliance_note: {
    version: { cpe_uri: "cpe:/o:debian:debian_linux:12.0" version: "1.1.0" benchmark_document: "CIS Debian Linux 12" }	   
    title: "Ensure separate partition exists for /home"
    description: "The /home directory is used to support disk storage needs of local users."
    rationale:
      "The default installation only creates a single / partition. Since the /home directory"
      "contains user generated data, there is a risk of resource exhaustion. It will essentially"
      "have the whole disk available to fill up and impact the system as a whole. In addition,"
      "other operations on the system could fill up the disk unrelated to /home and impact all"
      "local users."
      "Configuring /home as its own file system allows an administrator to set additional mount"
      "options such as noexec/nosuid/nodev. These options limit an attacker's ability to"
      "create exploits on the system. In the case of /home options such as"
      "usrquota/grpquota may be considered to limit the impact that users can have on each"
      "other with regards to disk resource exhaustion. Other options allow for specific"
      "behavior. See man mount for exact details regarding filesystem-independent and"
      "filesystem-specific options."
      "As /home contains user data, care should be taken to ensure the security and integrity"
      "of the data and mount point."
    remediation:
      "For new installations, during installation create a custom partition setup and specify a"
      "separate partition for /home."
      "For systems that were previously installed, create a new partition and configure"
      "/etc/fstab as appropriate."
    cis_benchmark: {
      profile_level: 2
      severity: LOW
    }
    scan_instructions:
      "scan_type_specific:{instance_scanning:{"
      "  check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{single_file:{path:\"/proc/self/mountinfo\"}}"
      "      content_entry:{"
      "        match_type: ALL_MATCH_ANY_ORDER"
      "        match_criteria: {"
      "          filter_regex: \".* /home .* - .*\""
      "          expected_regex: \".* /home .*\""
      "        }"
      "      }"
      "    }"
      "    file_checks:{"
      "      files_to_check:{single_file:{"
      "        path:\"/etc/fstab\"}}"      
      "      content_entry:{"
      "        match_type: ALL_MATCH_ANY_ORDER"
      "        match_criteria: {"
      "          filter_regex: \".*/home.*\""
      "          expected_regex: \".*/home.*\""
      "        }"
      "      }"
      "    }"
      "  }"
      "}"
      "image_scanning:{"
      "  check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{single_file:{"
      "        path:\"/etc/fstab\"}}"      
      "      content_entry:{"
      "        match_type: ALL_MATCH_ANY_ORDER"
      "        match_criteria: {"
      "          filter_regex: \".*/home.*\""
      "          expected_regex: \".*/home.*\""
      "        }"
      "      }"
      "    }"
      "  }"
      "}}"
  }
}

benchmark_configs: {
  id: "home-nodev"
  compliance_note: {
    version: { cpe_uri: "cpe:/o:debian:debian_linux:12.0" version: "1.1.0" benchmark_document: "CIS Debian Linux 12" }  		   
    title: "Ensure nodev option set on /home partition"
    description:
      "The nodev mount option specifies that the filesystem cannot contain special devices."
    rationale:
      "Since the /home filesystem is not intended to support devices, set this option to ensure"
      "that users cannot create a block or character special devices in /home."
    remediation:
      "- IF - a separate partition exists for /home."
      "Edit the /etc/fstab file and add nodev to the fourth field (mounting options) for the"
      "/home partition."
      "Example:"
      "<device> /home <fstype> defaults,rw,nosuid,nodev,noexec,relatime 0 0"
      "Run the following command to remount /home with the configured options:"
      "# mount -o remount /home"
    cis_benchmark: {
      profile_level: 1
      severity: LOW
    }
    scan_instructions:
      "scan_type_specific:{instance_scanning:{"
      "  check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{single_file:{path:\"/proc/self/mountinfo\"}}"
      "      content_entry:{"
      "        match_type: ALL_MATCH_ANY_ORDER"
      "        match_criteria: {"
      "          filter_regex: \".* /home .* - .*\""
      "          expected_regex: \".* /home .*nodev.* - .*\""
      "        }"
      "      }"
      "    }"
      "    file_checks:{"
      "      files_to_check:{single_file:{"
      "        path:\"/etc/fstab\"}}"      
      "      content_entry:{"
      "        match_type: ALL_MATCH_ANY_ORDER"
      "        match_criteria: {"
      "          filter_regex: \".*/home.*\""
      "          expected_regex: \".*nodev.*\""
      "        }"
      "      }"
      "    }"
      "  }"
      "  check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{single_file:{path:\"/proc/self/mountinfo\"}}"
      "      content_entry:{"
      "        match_type: NONE_MATCH"
      "        match_criteria: {"
      "          filter_regex: \".* /home .* - .*\""
      "          expected_regex: \".* /home .* - .*\""
      "        }"
      "      }"
      "    }"
      "  }"
      "}"
      "image_scanning:{"
      "  check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{single_file:{"
      "        path:\"/etc/fstab\"}}"      
      "      content_entry:{"
      "        match_type: ALL_MATCH_ANY_ORDER"
      "        match_criteria: {"
      "          filter_regex: \".*/home.*\""
      "          expected_regex: \".*nodev.*\""
      "        }"
      "      }"
      "    }"
      "  }"
      "}}"
  }
}

benchmark_configs: {
  id: "home-nosuid"
  compliance_note: {
    version: { cpe_uri: "cpe:/o:debian:debian_linux:12.0" version: "1.1.0" benchmark_document: "CIS Debian Linux 12" }
    title: "Ensure nosuid option set on /home partition"
    description:
      "The nosuid mount option specifies that the filesystem cannot contain setuid files."
    rationale:
      "Since the /home filesystem is only intended for user file storage, set this option to"
      "ensure that users cannot create setuid files in /home."
    remediation:
      "- IF - a separate partition exists for /home."
      "Edit the /etc/fstab file and add nosuid to the fourth field (mounting options) for the"
      "/home partition."
      "Example:"
      "<device> /home <fstype> defaults,rw,nosuid,nodev,noexec,relatime 0 0"
      "Run the following command to remount /home with the configured options:"
      "# mount -o remount /home"
    cis_benchmark: {
      profile_level: 1
      severity: LOW
    }
    scan_instructions:
      "scan_type_specific:{instance_scanning:{"
      "  check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{single_file:{path:\"/proc/self/mountinfo\"}}"
      "      content_entry:{"
      "        match_type: ALL_MATCH_ANY_ORDER"
      "        match_criteria: {"
      "          filter_regex: \".* /home .* - .*\""
      "          expected_regex: \".* /home .*nosuid.* - .*\""
      "        }"
      "      }"
      "    }"
      "    file_checks:{"
      "      files_to_check:{single_file:{"
      "        path:\"/etc/fstab\"}}"      
      "      content_entry:{"
      "        match_type: ALL_MATCH_ANY_ORDER"
      "        match_criteria: {"
      "          filter_regex: \".*/home.*\""
      "          expected_regex: \".*nosuid.*\""
      "        }"
      "      }"
      "    }"
      "  }"
      "  check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{single_file:{path:\"/proc/self/mountinfo\"}}"
      "      content_entry:{"
      "        match_type: NONE_MATCH"
      "        match_criteria: {"
      "          filter_regex: \".* /home .* - .*\""
      "          expected_regex: \".* /home .* - .*\""
      "        }"
      "      }"
      "    }"
      "  }"
      "}"
      "image_scanning:{"
      "  check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{single_file:{"
      "        path:\"/etc/fstab\"}}"      
      "      content_entry:{"
      "        match_type: ALL_MATCH_ANY_ORDER"
      "        match_criteria: {"
      "          filter_regex: \".*/home.*\""
      "          expected_regex: \".*nosuid.*\""
      "        }"
      "      }"
      "    }"
      "  }"
      "}}"
  }
}

benchmark_configs: {
  id: "separate-partition-var"
  compliance_note: {
    version: { cpe_uri: "cpe:/o:debian:debian_linux:12.0" version: "1.1.0" benchmark_document: "CIS Debian Linux 12" }
    title: "Ensure separate partition exists for /var"
    description:
      "The /var directory is used by daemons and other system services to temporarily store dynamic data. "
      "Some directories created by these processes may be world-writable."
    rationale:
      "The reasoning for mounting /var on a separate partition is as follows."
      "The default installation only creates a single / partition. Since the /var directory may"
      "contain world writable files and directories, there is a risk of resource exhaustion. It will"
      "essentially have the whole disk available to fill up and impact the system. In addition,"
      "other operations on the system could fill up the disk unrelated to /var and cause"
      "unintended behavior across the system as the disk is full. See man auditd.conf for"
      "details."
      "Configuring /var as its own file system allows an administrator to set additional mount"
      "options such as noexec/nosuid/nodev. These options limit an attacker's ability to"
      "create exploits on the system. Other options allow for specific behavior. See man mount"
      "for exact details regarding filesystem-independent and filesystem-specific options."
      "An example of exploiting /var may be an attacker establishing a hard-link to a system"
      "setuid program and waiting for it to be updated. Once the program is updated, the"
      "hard-link can be broken and the attacker would have their own copy of the program. If"
      "the program happened to have a security vulnerability, the attacker could continue to"
      "exploit the known flaw."
    remediation:
      "For new installations, during installation create a custom partition setup and specify a"
      "separate partition for /var."
      "For systems that were previously installed, create a new partition and configure"
      "/etc/fstab as appropriate."
    cis_benchmark: {
      profile_level: 2
      severity: LOW
    }
    scan_instructions:
      "scan_type_specific:{instance_scanning:{"
      "  check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{single_file:{path:\"/proc/self/mountinfo\"}}"
      "      content_entry:{"
      "        match_type: ALL_MATCH_ANY_ORDER"
      "        match_criteria: {"
      "          filter_regex: \".* /var .* - .*\""
      "          expected_regex: \".* /var .* - .*\""
      "        }"
      "      }"
      "    }"
      "    file_checks:{"
      "      files_to_check:{single_file:{"
      "        path:\"/etc/fstab\"}}"      
      "      content_entry:{"
      "        match_type: ALL_MATCH_ANY_ORDER"
      "        match_criteria: {"
      "          filter_regex: \".*/var.*\""
      "          expected_regex: \".*/var.*\""
      "        }"
      "      }"
      "    }"
      "  }"
      "}"
      "image_scanning:{"
      "  check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{single_file:{"
      "        path:\"/etc/fstab\"}}"      
      "      content_entry:{"
      "        match_type: ALL_MATCH_ANY_ORDER"
      "        match_criteria: {"
      "          filter_regex: \".*/var.*\""
      "          expected_regex: \".*/var.*\""
      "        }"
      "      }"
      "    }"
      "  }"
      "}}"
  }
}

benchmark_configs: {
  id: "var-nodev"
  compliance_note: {
    version: { cpe_uri: "cpe:/o:debian:debian_linux:12.0" version: "1.1.0" benchmark_document: "CIS Debian Linux 12" }  		   
    title: "Ensure nodev option set on /var partition"
    description:
      "The nodev mount option specifies that the filesystem cannot contain special devices."
    rationale:
      "Since the /var filesystem is not intended to support devices, set this option to ensure"
      "that users cannot create a block or character special devices in /var."
    remediation:
      "- IF - a separate partition exists for /var."
      "Edit the /etc/fstab file and add nodev to the fourth field (mounting options) for the"
      "/var partition."
      "Example:"
      "<device> /var <fstype> defaults,rw,nosuid,nodev,noexec,relatime 0 0"
      "Run the following command to remount /var with the configured options:"
      "# mount -o remount /var"
    cis_benchmark: {
      profile_level: 1
      severity: LOW
    }
    scan_instructions:
      "scan_type_specific:{instance_scanning:{"
      "  check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{single_file:{path:\"/proc/self/mountinfo\"}}"
      "      content_entry:{"
      "        match_type: ALL_MATCH_ANY_ORDER"
      "        match_criteria: {"
      "          filter_regex: \".* /var .* - .*\""
      "          expected_regex: \".* /var .*nodev.* - .*\""
      "        }"
      "      }"
      "    }"
      "    file_checks:{"
      "      files_to_check:{single_file:{"
      "        path:\"/etc/fstab\"}}"      
      "      content_entry:{"
      "        match_type: ALL_MATCH_ANY_ORDER"
      "        match_criteria: {"
      "          filter_regex: \".*/var.*\""
      "          expected_regex: \".*nodev.*\""
      "        }"
      "      }"
      "    }"
      "  }"
      "  check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{single_file:{path:\"/proc/self/mountinfo\"}}"
      "      content_entry:{"
      "        match_type: NONE_MATCH"
      "        match_criteria: {"
      "          filter_regex: \".* /var .* - .*\""
      "          expected_regex: \".* /var .* - .*\""
      "        }"
      "      }"
      "    }"
      "  }"
      "}"
      "image_scanning:{"
      "  check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{single_file:{"
      "        path:\"/etc/fstab\"}}"      
      "      content_entry:{"
      "        match_type: ALL_MATCH_ANY_ORDER"
      "        match_criteria: {"
      "          filter_regex: \".*/var.*\""
      "          expected_regex: \".*nodev.*\""
      "        }"
      "      }"
      "    }"
      "  }"
      "}}"
  }
}

benchmark_configs: {
  id: "var-nosuid"
  compliance_note: {
    version: { cpe_uri: "cpe:/o:debian:debian_linux:12.0" version: "1.1.0" benchmark_document: "CIS Debian Linux 12" }  		   
    title: "Ensure nosuid option set on /var partition"
    description:
      "The nosuid mount option specifies that the filesystem cannot contain setuid files."
    rationale:
      "Since the /var filesystem is only intended for variable files such as logs, set this option"
      "to ensure that users cannot create setuid files in /var."
    remediation:
      "- IF - a separate partition exists for /var."
      "Edit the /etc/fstab file and add nosuid to the fourth field (mounting options) for the"
      "/var partition."
      "Example:"
      "<device> /var <fstype> defaults,rw,nosuid,nodev,noexec,relatime 0 0"
      "Run the following command to remount /var with the configured options:"
      "# mount -o remount /var"
    cis_benchmark: {
      profile_level: 1
      severity: LOW
    }
    scan_instructions:
      "scan_type_specific:{instance_scanning:{"
      "  check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{single_file:{path:\"/proc/self/mountinfo\"}}"
      "      content_entry:{"
      "        match_type: ALL_MATCH_ANY_ORDER"
      "        match_criteria: {"
      "          filter_regex: \".* /var .* - .*\""
      "          expected_regex: \".* /var .*nosuid.* - .*\""
      "        }"
      "      }"
      "    }"
      "    file_checks:{"
      "      files_to_check:{single_file:{"
      "        path:\"/etc/fstab\"}}"      
      "      content_entry:{"
      "        match_type: ALL_MATCH_ANY_ORDER"
      "        match_criteria: {"
      "          filter_regex: \".*/var.*\""
      "          expected_regex: \".*nosuid.*\""
      "        }"
      "      }"
      "    }"
      "  }"
      "  check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{single_file:{path:\"/proc/self/mountinfo\"}}"
      "      content_entry:{"
      "        match_type: NONE_MATCH"
      "        match_criteria: {"
      "          filter_regex: \".* /var .* - .*\""
      "          expected_regex: \".* /var .* - .*\""
      "        }"
      "      }"
      "    }"
      "  }"
      "}"
      "image_scanning:{"
      "  check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{single_file:{"
      "        path:\"/etc/fstab\"}}"      
      "      content_entry:{"
      "        match_type: ALL_MATCH_ANY_ORDER"
      "        match_criteria: {"
      "          filter_regex: \".*/var.*\""
      "          expected_regex: \".*nosuid.*\""
      "        }"
      "      }"
      "    }"
      "  }"
      "}}"
  }
}

benchmark_configs: {
  id: "separate-partition-var-tmp"
  compliance_note: {
    version: { cpe_uri: "cpe:/o:debian:debian_linux:12.0" version: "1.1.0" benchmark_document: "CIS Debian Linux 12" }
    title: "Ensure separate partition exists for /var/tmp"
    description:
      "The /var/tmp directory is a world-writable directory used for temporary storage by all"
      "users and some applications. Temporary files residing in /var/tmp are to be preserved"
      "between reboots."
    rationale:
      "The default installation only creates a single / partition. Since the /var/tmp directory is"
      "world-writable, there is a risk of resource exhaustion. In addition, other operations on"
      "the system could fill up the disk unrelated to /var/tmp and cause potential disruption to"
      "daemons as the disk is full."
      "Configuring /var/tmp as its own file system allows an administrator to set additional"
      "mount options such as noexec/nosuid/nodev. These options limit an attacker's ability"
      "to create exploits on the system."
    remediation:
      "For new installations, during installation create a custom partition setup and specify a"
      "separate partition for /var/tmp."
      "For systems that were previously installed, create a new partition and configure"
      "/etc/fstab as appropriate."
    cis_benchmark: {
      profile_level: 2
      severity: LOW
    }
    scan_instructions:
      "scan_type_specific:{instance_scanning:{"
      "  check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{single_file:{path:\"/proc/self/mountinfo\"}}"
      "      content_entry:{"
      "        match_type: ALL_MATCH_ANY_ORDER"
      "        match_criteria: {"
      "          filter_regex: \".* /var/tmp .* - .*\""
      "          expected_regex: \".* /var/tmp .* - .*\""
      "        }"
      "      }"
      "    }"
      "    file_checks:{"
      "      files_to_check:{single_file:{"
      "        path:\"/etc/fstab\"}}"      
      "      content_entry:{"
      "        match_type: ALL_MATCH_ANY_ORDER"
      "        match_criteria: {"
      "          filter_regex: \".*/var/tmp.*\""
      "          expected_regex: \".*/var/tmp.*\""
      "        }"
      "      }"
      "    }"
      "  }"
      "}"
      "image_scanning:{"
      "  check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{single_file:{"
      "        path:\"/etc/fstab\"}}"      
      "      content_entry:{"
      "        match_type: ALL_MATCH_ANY_ORDER"
      "        match_criteria: {"
      "          filter_regex: \".*/var/tmp.*\""
      "          expected_regex: \".*/var/tmp.*\""
      "        }"
      "      }"
      "    }"
      "  }"
      "}}"
  }
}

benchmark_configs: {
  id: "var-tmp-nodev"
  compliance_note: {
    version: { cpe_uri: "cpe:/o:debian:debian_linux:12.0" version: "1.1.0" benchmark_document: "CIS Debian Linux 12" }  		   
    title: "Ensure nodev option set on /var/tmp partition"
    description:
      "The nodev mount option specifies that the filesystem cannot contain special devices."
    rationale:
      "Since the /var/tmp filesystem is not intended to support devices, set this option to ensure"
      "that users cannot create a block or character special devices in /var/tmp."
    remediation:
      "- IF - a separate partition exists for /var/tmp."
      "Edit the /etc/fstab file and add nodev to the fourth field (mounting options) for the"
      "/var/tmp partition."
      "Example:"
      "<device> /var/tmp <fstype> defaults,rw,nosuid,nodev,noexec,relatime 0 0"
      "Run the following command to remount /var/tmp with the configured options:"
      "# mount -o remount /var/tmp"
    cis_benchmark: {
      profile_level: 1
      severity: LOW
    }
    scan_instructions:
      "scan_type_specific:{instance_scanning:{"
      "  check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{single_file:{path:\"/proc/self/mountinfo\"}}"
      "      content_entry:{"
      "        match_type: ALL_MATCH_ANY_ORDER"
      "        match_criteria: {"
      "          filter_regex: \".* /var/tmp .* - .*\""
      "          expected_regex: \".* /var/tmp .*nodev.* - .*\""
      "        }"
      "      }"
      "    }"
      "    file_checks:{"
      "      files_to_check:{single_file:{"
      "        path:\"/etc/fstab\"}}"      
      "      content_entry:{"
      "        match_type: ALL_MATCH_ANY_ORDER"
      "        match_criteria: {"
      "          filter_regex: \".*/var/tmp .*\""
      "          expected_regex: \".*nodev.*\""
      "        }"
      "      }"
      "    }"
      "  }"
      "  check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{single_file:{path:\"/proc/self/mountinfo\"}}"
      "      content_entry:{"
      "        match_type: NONE_MATCH"
      "        match_criteria: {"
      "          filter_regex: \".* /var/tmp .* - .*\""
      "          expected_regex: \".* /var/tmp .* - .*\""
      "        }"
      "      }"
      "    }"
      "  }"
      "}"
      "image_scanning:{"
      "  check_alternatives:{"
      "    file_checks:{"
      "      files_to_check:{single_file:{"
      "        path:\"/etc/fstab\"}}"      
      "      content_entry:{"
      "        match_type: ALL_MATCH_ANY_ORDER"
      "        match_criteria: {"
      "          filter_regex: \".*/var/tmp .*\""
      "          expected_regex: \".*nodev.*\""
      "        }"
      "      }"
      "    }"
      "  }"
      "}}"
  }
}
