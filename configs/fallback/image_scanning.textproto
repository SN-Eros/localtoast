benchmark_configs: {
  id: "world-writable-dirs-sticky-fallback"
  compliance_note {
    version: { cpe_uri: "fallback" version: "1.0.0" }
    title: "Ensure sticky bit is set on all world-writable directories"
    description:
      "Setting the sticky bit on world writable directories prevents users from "
      "deleting or renaming files in that directory that are not owned by them."
    rationale:
      "This feature prevents the ability to delete or rename files in world "
      "writable directories (such as /tmp) that are owned by another user."
    remediation:
      "Set the sticky bit on all world-writable directories, for example by "
      "running the following command:\n"
      "```\n"
      "# df --local -P | awk '{if (NR!=1) print $6}' | xargs -I '{}' find '{}' "
      "-xdev -type d \\( -perm -0002 -a ! -perm -1000 \\) 2>/dev/null | xargs -I "
      "'{}' chmod a+t '{}'\n"
      "```\n"
      "Then verify that no world-writable non-sticky directories remain by "
      "re-running the file display command.\n"
    cis_benchmark: {
      profile_level: 1
      severity: HIGH
    }
    scan_instructions:
      "check_alternatives:{"
      "  file_checks:{"
      "    files_to_check:{files_in_dir:{"
      "      dir_path:\"/\""
      "      recursive: true"
      "      dirs_only: true"
      "      opt_out_path_regexes: \"/proc\""
      "      opt_out_path_regexes: \"/sys\""
      "      opt_out_path_regexes: \"/dev\""
      "    }}"
      "    permission:{set_bits: 01000 clear_bits: 0002 bits_should_match: EITHER_SET_OR_CLEAR}"
      "    non_compliance_msg: \"there are non-sticky world-writable directories on the filesystem\""
      "    file_display_command: \"df --local -P | awk '{if (NR!=1) print $6}' | xargs -I '{}' find '{}' -xdev -type d \\\\( -perm -0002 -a ! -perm -1000 \\\\) 2>/dev/null\""
      "  }"
      "}"
  }
}
benchmark_configs: {
  id: "motd-configured-fallback"
  compliance_note: {
    version: { cpe_uri: "fallback" version: "1.0.0" }
    title: "Ensure message of the day is configured properly"
    description:
      "The contents of the /etc/motd file are displayed to users after login "
      "and function as a message of the day for authenticated users.\n"
      "Unix-based systems have typically displayed information about the OS "
      "release and patch level upon logging in to the system. This information "
      "can be useful to developers who are developing software for a "
      "particular OS platform. If mingetty(8) supports the following options, "
      "they display operating system information: \\m - machine architecture "
      "\\r - operating system release \\s - operating system name \\v - "
      "operating system version"
    rationale:
      "Warning messages inform users who are attempting to login to the "
      "system of their legal status regarding the system and must include the "
      "name of the organization that owns the system and any monitoring "
      "policies that are in place. Displaying OS and patch level information "
      "in login banners also has the side effect of providing detailed system "
      "information to attackers attempting to target specific exploits of a "
      "system. Authorized users can easily get this information by running "
      "the \"uname -a\" command once they have logged in."
    remediation:
      "Edit the /etc/motd file with the appropriate contents according to "
      "your site policy, remove any instances of \\m , \\r , \\s , \\v or "
      "references to the OS platform"
    cis_benchmark: {
      profile_level: 1
      severity: LOW
    }
    scan_instructions:
      "check_alternatives:{"
      "  file_checks:{"
      "    files_to_check:{single_file:{path:\"/etc/motd\"}}"
      "    content:{content:\"\"}"
      "  }"
      "}"
      "check_alternatives:{"
      "  file_checks:{"
      "    files_to_check:{single_file:{path:\"/etc/motd\"}}"
      "    existence:{should_exist:false}"
      "  }"
      "}"
  }
}
benchmark_configs: {
  id: "local-login-warning-configured-fallback"
  compliance_note: {
    version: { cpe_uri: "fallback" version: "1.0.0" }
    title: "Ensure local login warning banner is configured properly"
    description:
      "The contents of the /etc/issue file are displayed to users prior to "
      "login for local terminals. Unix-based systems have typically "
      "displayed information about the OS release and patch level upon "
      "logging in to the system. This information can be useful to "
      "developers who are developing software for a particular OS platform. "
      "If mingetty(8) supports the following options, they display operating "
      "system information: \\m - machine architecture \\r - operating system "
      "release \\s - operating system name \\v - operating system version - or "
      "the operating system's name"
    rationale:
      "Warning messages inform users who are attempting to login to the "
      "system of their legal status regarding the system and must include "
      "the name of the organization that owns the system and any monitoring "
      "policies that are in place. Displaying OS and patch level information "
      "in login banners also has the side effect of providing detailed "
      "system information to attackers attempting to target specific "
      "exploits of a system. Authorized users can easily get this "
      "information by running the \" uname -a \" command once they have logged in."
    remediation:
      "Make sure the /etc/issue file is empty. Alternatively, edit the /etc/issue "
      "file with the appropriate contents according to your site policy, remove "
      "any instances of \\m , \\r , \\s , \\v or references to the OS platform, "
      "and opt the file out from scanning to prevent further compliance reports."
    cis_benchmark: {
      profile_level: 1
      severity: LOW
    }
    scan_instructions:
      "check_alternatives:{"
      "  file_checks:{"
      "    files_to_check:{single_file:{path:\"/etc/issue\"}}"
      "    content:{content:\"\"}"
      "  }"
      "}"
      "check_alternatives:{"
      "  file_checks:{"
      "    files_to_check:{single_file:{path:\"/etc/issue\"}}"
      "    existence:{should_exist:false}"
      "  }"
      "}"
  }
}
benchmark_configs: {
  id: "remote-login-warning-configured-fallback"
  compliance_note: {
    version: { cpe_uri: "fallback" version: "1.0.0" }
    title: "Ensure remote login warning banner is configured properly"
    description:
      "The contents of the /etc/issue.net file are displayed to users prior to "
      "login for remote connections from configured services."
      "Unix-based systems have typically displayed information about the OS "
      "release and patch level upon logging in to the system. This "
      "information can be useful to developers who are developing software "
      "for a particular OS platform. If mingetty(8) supports the following "
      "options, they display operating system information: \\m - machine "
      "architecture \\r - operating system release \\s - operating system "
      "name \\v - operating system version"
    rationale:
      "Warning messages inform users who are attempting to login to the "
      "system of their legal status regarding the system and must include "
      "the name of the organization that owns the system and any monitoring "
      "policies that are in place. Displaying OS and patch level information "
      "in login banners also has the side effect of providing detailed "
      "system information to attackers attempting to target specific "
      "exploits of a system. Authorized users can easily get this "
      "information by running the \" uname -a \" command once they have logged "
      "in."
    remediation:
      "Make sure the /etc/issue.net file is empty or deleted. Alternatively, "
      "edit the /etc/issue.net file with the appropriate contents according "
      "to your site policy, remove any instances of \\m , \\r , \\s , \\v "
      "or references to the OS platform and opt the file out from scanning "
      "to prevent further compliance reports."
    cis_benchmark: {
      profile_level: 1
      severity: LOW
    }
    scan_instructions:
      "check_alternatives:{"
      "  file_checks:{"
      "    files_to_check:{single_file:{path:\"/etc/issue.net\"}}"
      "    content:{content:\"\"}"
      "  }"
      "}"
      "check_alternatives:{"
      "  file_checks:{"
      "    files_to_check:{single_file:{path:\"/etc/issue.net\"}}"
      "    existence:{should_exist:false}"
      "  }"
      "}"
  }
}
benchmark_configs: {
  id: "motd-permissions-fallback"
  compliance_note: {
    version: { cpe_uri: "fallback" version: "1.0.0" }
    title: "Ensure permissions on /etc/motd are configured"
    description:
      "The contents of the /etc/motd file are displayed to users after login "
      "and function as a message of the day for authenticated users."
    rationale:
      "If the /etc/motd file does not have the correct ownership it could be "
      "modified by unauthorized users with incorrect or misleading information."
    remediation:
      "Run the following commands to set permissions on /etc/motd:\n"
      "```\n"
      "# chown root:root /etc/motd\n"
      "# chmod 644 /etc/motd\n"
      "```\n"
    cis_benchmark: {
      profile_level: 1
      severity: LOW
    }
    scan_instructions:
      "check_alternatives:{"
      "  file_checks:{"
      "    files_to_check:{single_file:{path:\"/etc/motd\"}}"
      "    permission:{"
      "      set_bits: 0444"
      "      clear_bits: 0133"
      "      bits_should_match: BOTH_SET_AND_CLEAR"
      "      user: {name: \"root\" should_own: true}"
      "      group: {name: \"root\" should_own: true}"
      "    }"
      "  }"
      "}"
      "check_alternatives:{"
      "  file_checks:{"
      "    files_to_check:{single_file:{path:\"/etc/motd\"}}"
      "    existence:{should_exist:false}"
      "  }"
      "}"
  }
}
benchmark_configs: {
  id: "etc-issue-permissions-fallback"
  compliance_note: {
    version: { cpe_uri: "fallback" version: "1.0.0" }
    title: "Ensure permissions on /etc/issue are configured"
    description:
      "The contents of the /etc/issue file are displayed to users prior to "
      "login for local terminals."
    rationale:
      "If the /etc/issue file does not have the correct ownership it could "
      "be modified by unauthorized users with incorrect or misleading "
      "information."
    remediation:
      "Run the following commands to set permissions on /etc/issue:\n"
      "```\n"
      "# chown root:root /etc/issue\n"
      "# chmod 644 /etc/issue\n"
      "```\n"
    cis_benchmark: {
      profile_level: 1
      severity: LOW
    }
    scan_instructions:
      "check_alternatives:{"
      "  file_checks:{"
      "    files_to_check:{single_file:{path:\"/etc/issue\"}}"
      "    permission:{"
      "      set_bits: 0444"
      "      clear_bits: 0133"
      "      bits_should_match: BOTH_SET_AND_CLEAR"
      "      user: {name: \"root\" should_own: true}"
      "      group: {name: \"root\" should_own: true}"
      "    }"
      "  }"
      "}"
      "check_alternatives:{"
      "  file_checks:{"
      "    files_to_check:{single_file:{path:\"/etc/issue\"}}"
      "    existence:{should_exist:false}"
      "  }"
      "}"
  }
}
benchmark_configs: {
  id: "etc-issue-net-permissions-fallback"
  compliance_note: {
    version: { cpe_uri: "fallback" version: "1.0.0" }
    title: "Ensure permissions on /etc/issue.net are configured"
    description:
      "The contents of the /etc/issue.net file are displayed to users prior "
      "to login for remote connections from configured services."
    rationale:
      "If the /etc/issue.net file does not have the correct ownership it "
      "could be modified by unauthorized users with incorrect or misleading "
      "information."
    remediation:
      "Run the following commands to set permissions on /etc/issue.net:\n"
      "```\n"
      "# chown root:root /etc/issue.net\n"
      "# chmod 644 /etc/issue.net\n"
      "```\n"
    cis_benchmark: {
      profile_level: 1
      severity: LOW
    }
    scan_instructions:
      "check_alternatives:{"
      "  file_checks:{"
      "    files_to_check:{single_file:{path:\"/etc/issue.net\"}}"
      "    permission:{"
      "      set_bits: 0444"
      "      clear_bits: 0133"
      "      bits_should_match: BOTH_SET_AND_CLEAR"
      "      user: {name: \"root\" should_own: true}"
      "      group: {name: \"root\" should_own: true}"
      "    }"
      "  }"
      "}"
      "check_alternatives:{"
      "  file_checks:{"
      "    files_to_check:{single_file:{path:\"/etc/issue.net\"}}"
      "    existence:{should_exist:false}"
      "  }"
      "}"
  }
}
benchmark_configs: {
  id: "chargen-services-disabled-fallback"
  compliance_note: {
    version: { cpe_uri: "fallback" version: "1.0.0" }
    title: "Ensure chargen services are not enabled"
    description:
      "chargen is a network service that responds with 0 to 512 ASCII "
      "characters for each connection it receives. This service is intended "
      "for debugging and testing purposes. It is recommended that this "
      "service be disabled."
    rationale:
      "Disabling this service will reduce the remote attack surface of "
      "the system."
    remediation:
      "Comment out or remove any lines starting with chargen from "
      "/etc/inetd.conf and /etc/inetd.d/*.\n"
      "Set disable = yes on all chargen services in /etc/xinetd.conf and "
      "/etc/xinetd.d/* ."
    cis_benchmark: {
      profile_level: 1
      severity: LOW
    }
    scan_instructions:
      "check_alternatives:{"
      "  file_checks:{"
      "    files_to_check:{files_in_dir:{"
      "      dir_path:\"/etc\""
      "      filename_regex: \"inetd\\\\..*\""
      "      recursive: false"
      "    }}"
      "    content_entry: {"
      "      match_type: NONE_MATCH"
      "      match_criteria: {"
      "        filter_regex: \"chargen.*\""
      "        expected_regex: \"chargen.*\""
      "      }"
      "    }"
      "    non_compliance_msg: \"a config file enables chargen\""
      "    file_display_command: \"grep -R '^chargen' /etc/inetd.*\""
      "  }"
      "  file_checks:{"
      "    files_to_check:{single_file:{path:\"/etc/xinetd.conf\"}}"
      "    files_to_check:{files_in_dir:{"
      "      dir_path:\"/etc/xinetd.d\""
      "      recursive: true"
      "    }}"
      "    content_entry: {"
      "      match_type: NONE_MATCH"
      "      delimiter: \"}\""  # Each service config is contained within a "{}".
      "      match_criteria: {"
      "        filter_regex: \".*service chargen.*disable\\\\s+=\\\\sno.*\""
      "        expected_regex: \".*service chargen.*disable\\\\s+=\\\\sno.*\""
      "      }"
      "    }"
      "    non_compliance_msg: \"a config file in enables chargen\""
      "    file_display_command: \"grep -l 'chargen' /etc/xinetd.conf /etc/xinetd.d/*\""
      "  }"
      "}"
      "check_alternatives:{"
      "  file_checks:{"
      "    files_to_check:{files_in_dir:{"
      "      dir_path:\"/etc\""
      "      filename_regex: \"inetd\\\\..*\""
      "      recursive: false"
      "    }}"
      "    files_to_check:{single_file:{path:\"/etc/xinetd.conf\"}}"
      "    existence:{should_exist: false}"
      "  }"
      "}"
  }
}
benchmark_configs: {
  id: "daytime-services-disabled-fallback"
  compliance_note: {
    version: { cpe_uri: "fallback" version: "1.0.0" }
    title: "Ensure daytime services are not enabled"
    description:
      "daytime is a network service that responds with the server's current "
      "date and time. This service is intended for debugging and testing "
      "purposes. It is recommended that this service be disabled."
    rationale:
      "Disabling this service will reduce the remote attack surface of "
      "the system."
    remediation:
      "Comment out or remove any lines starting with daytime from "
      "/etc/inetd.conf and /etc/inetd.d/*.\n"
      "Set disable = yes on all daytime services in /etc/xinetd.conf and "
      "/etc/xinetd.d/*."
    cis_benchmark: {
      profile_level: 1
      severity: LOW
    }
    scan_instructions:
      "check_alternatives:{"
      "  file_checks:{"
      "    files_to_check:{files_in_dir:{"
      "      dir_path:\"/etc\""
      "      filename_regex: \"inetd\\\\..*\""
      "      recursive: false"
      "    }}"
      "    content_entry: {"
      "      match_type: NONE_MATCH"
      "      match_criteria: {"
      "        filter_regex: \"daytime.*\""
      "        expected_regex: \"daytime.*\""
      "      }"
      "    }"
      "    non_compliance_msg: \"a config file enables daytime\""
      "    file_display_command: \"grep -R '^daytime' /etc/inetd.*\""
      "  }"
      "  file_checks:{"
      "    files_to_check:{single_file:{path:\"/etc/xinetd.conf\"}}"
      "    files_to_check:{files_in_dir:{"
      "      dir_path:\"/etc/xinetd.d\""
      "      recursive: true"
      "    }}"
      "    content_entry: {"
      "      match_type: NONE_MATCH"
      "      delimiter: \"}\""  # Each service config is contained within a "{}".
      "      match_criteria: {"
      "        filter_regex: \".*service daytime.*disable\\\\s+=\\\\sno.*\""
      "        expected_regex: \".*service daytime.*disable\\\\s+=\\\\sno.*\""
      "      }"
      "    }"
      "    non_compliance_msg: \"a config file in enables daytime\""
      "    file_display_command: \"grep -l 'daytime' /etc/xinetd.conf /etc/xinetd.d/*\""
      "  }"
      "}"
      "check_alternatives:{"
      "  file_checks:{"
      "    files_to_check:{files_in_dir:{"
      "      dir_path:\"/etc\""
      "      filename_regex: \"inetd\\\\..*\""
      "      recursive: false"
      "    }}"
      "    files_to_check:{single_file:{path:\"/etc/xinetd.conf\"}}"
      "    existence:{should_exist: false}"
      "  }"
      "}"
  }
}
benchmark_configs: {
  id: "discard-services-disabled-fallback"
  compliance_note: {
    version: { cpe_uri: "fallback" version: "1.0.0" }
    title: "Ensure discard services are not enabled"
    description:
      "discard is a network service that simply discards all data it receives. "
      "This service is intended for debugging and testing purposes. It is "
      "recommended that this service be disabled."
    rationale:
      "Disabling this service will reduce the remote attack surface of "
      "the system."
    remediation:
      "Comment out or remove any lines starting with discard from "
      "/etc/inetd.conf and /etc/inetd.d/*.\n"
      "Set disable = yes on all discard services in /etc/xinetd.conf and "
      "/etc/xinetd.d/*."
    cis_benchmark: {
      profile_level: 1
      severity: LOW
    }
    scan_instructions:
      "check_alternatives:{"
      "  file_checks:{"
      "    files_to_check:{files_in_dir:{"
      "      dir_path:\"/etc\""
      "      filename_regex: \"inetd\\\\..*\""
      "      recursive: false"
      "    }}"
      "    content_entry: {"
      "      match_type: NONE_MATCH"
      "      match_criteria: {"
      "        filter_regex: \"discard.*\""
      "        expected_regex: \"discard.*\""
      "      }"
      "    }"
      "    non_compliance_msg: \"a config file enables discard\""
      "    file_display_command: \"grep -R '^discard' /etc/inetd.*\""
      "  }"
      "  file_checks:{"
      "    files_to_check:{single_file:{path:\"/etc/xinetd.conf\"}}"
      "    files_to_check:{files_in_dir:{"
      "      dir_path:\"/etc/xinetd.d\""
      "      recursive: true"
      "    }}"
      "    content_entry: {"
      "      match_type: NONE_MATCH"
      "      delimiter: \"}\""  # Each service config is contained within a "{}".
      "      match_criteria: {"
      "        filter_regex: \".*service discard.*disable\\\\s+=\\\\sno.*\""
      "        expected_regex: \".*service discard.*disable\\\\s+=\\\\sno.*\""
      "      }"
      "    }"
      "    non_compliance_msg: \"a config file in enables discard\""
      "    file_display_command: \"grep -l 'discard' /etc/xinetd.conf /etc/xinetd.d/*\""
      "  }"
      "}"
      "check_alternatives:{"
      "  file_checks:{"
      "    files_to_check:{files_in_dir:{"
      "      dir_path:\"/etc\""
      "      filename_regex: \"inetd\\\\..*\""
      "      recursive: false"
      "    }}"
      "    files_to_check:{single_file:{path:\"/etc/xinetd.conf\"}}"
      "    existence:{should_exist: false}"
      "  }"
      "}"
  }
}
benchmark_configs: {
  id: "echo-services-disabled-fallback"
  compliance_note: {
    version: { cpe_uri: "fallback" version: "1.0.0" }
    title: "Ensure echo services are not enabled"
    description:
      "echo is a network service that responds to clients with the data sent "
      "to it by the client. This service is intended for debugging and "
      "testing purposes. It is recommended that this service be disabled."
    rationale:
      "Disabling this service will reduce the remote attack surface of "
      "the system."
    remediation:
      "Comment out or remove any lines starting with echo from "
      "/etc/inetd.conf and /etc/inetd.d/*.\n"
      "Set disable = yes on all echo services in /etc/xinetd.conf and "
      "/etc/xinetd.d/*."
    cis_benchmark: {
      profile_level: 1
      severity: LOW
    }
    scan_instructions:
      "check_alternatives:{"
      "  file_checks:{"
      "    files_to_check:{files_in_dir:{"
      "      dir_path:\"/etc\""
      "      filename_regex: \"inetd\\\\..*\""
      "      recursive: false"
      "    }}"
      "    content_entry: {"
      "      match_type: NONE_MATCH"
      "      match_criteria: {"
      "        filter_regex: \"echo.*\""
      "        expected_regex: \"echo.*\""
      "      }"
      "    }"
      "    non_compliance_msg: \"a config file enables echo\""
      "    file_display_command: \"grep -R '^echo' /etc/inetd.*\""
      "  }"
      "  file_checks:{"
      "    files_to_check:{single_file:{path:\"/etc/xinetd.conf\"}}"
      "    files_to_check:{files_in_dir:{"
      "      dir_path:\"/etc/xinetd.d\""
      "      recursive: true"
      "    }}"
      "    content_entry: {"
      "      match_type: NONE_MATCH"
      "      delimiter: \"}\""  # Each service config is contained within a "{}".
      "      match_criteria: {"
      "        filter_regex: \".*service echo.*disable\\\\s+=\\\\sno.*\""
      "        expected_regex: \".*service echo.*disable\\\\s+=\\\\sno.*\""
      "      }"
      "    }"
      "    non_compliance_msg: \"a config file in enables echo\""
      "    file_display_command: \"grep -l 'echo' /etc/xinetd.conf /etc/xinetd.d/*\""
      "  }"
      "}"
      "check_alternatives:{"
      "  file_checks:{"
      "    files_to_check:{files_in_dir:{"
      "      dir_path:\"/etc\""
      "      filename_regex: \"inetd\\\\..*\""
      "      recursive: false"
      "    }}"
      "    files_to_check:{single_file:{path:\"/etc/xinetd.conf\"}}"
      "    existence:{should_exist: false}"
      "  }"
      "}"
  }
}
benchmark_configs: {
  id: "time-services-disabled-fallback"
  compliance_note: {
    version: { cpe_uri: "fallback" version: "1.0.0" }
    title: "Ensure time services are not enabled"
    description:
      "time is a network service that responds with the server's current date "
      "and time as a 32 bit integer. This service is intended for debugging "
      "and testing purposes. It is recommended that this service be disabled."
    rationale:
      "Disabling this service will reduce the remote attack surface of "
      "the system."
    remediation:
      "Comment out or remove any lines starting with time from "
      "/etc/inetd.conf and /etc/inetd.d/*.\n"
      "Set disable = yes on all time services in /etc/xinetd.conf and "
      "/etc/xinetd.d/*."
    cis_benchmark: {
      profile_level: 1
      severity: LOW
    }
    scan_instructions:
      "check_alternatives:{"
      "  file_checks:{"
      "    files_to_check:{files_in_dir:{"
      "      dir_path:\"/etc\""
      "      filename_regex: \"inetd\\\\..*\""
      "      recursive: false"
      "    }}"
      "    content_entry: {"
      "      match_type: NONE_MATCH"
      "      match_criteria: {"
      "        filter_regex: \"time.*\""
      "        expected_regex: \"time.*\""
      "      }"
      "    }"
      "    non_compliance_msg: \"a config file enables time\""
      "    file_display_command: \"grep -R '^time' /etc/inetd.*\""
      "  }"
      "  file_checks:{"
      "    files_to_check:{single_file:{path:\"/etc/xinetd.conf\"}}"
      "    files_to_check:{files_in_dir:{"
      "      dir_path:\"/etc/xinetd.d\""
      "      recursive: true"
      "    }}"
      "    content_entry: {"
      "      match_type: NONE_MATCH"
      "      delimiter: \"}\""  # Each service config is contained within a "{}".
      "      match_criteria: {"
      "        filter_regex: \".*service time.*disable\\\\s+=\\\\sno.*\""
      "        expected_regex: \".*service time.*disable\\\\s+=\\\\sno.*\""
      "      }"
      "    }"
      "    non_compliance_msg: \"a config file in enables time\""
      "    file_display_command: \"grep -l 'time' /etc/xinetd.conf /etc/xinetd.d/*\""
      "  }"
      "}"
      "check_alternatives:{"
      "  file_checks:{"
      "    files_to_check:{files_in_dir:{"
      "      dir_path:\"/etc\""
      "      filename_regex: \"inetd\\\\..*\""
      "      recursive: false"
      "    }}"
      "    files_to_check:{single_file:{path:\"/etc/xinetd.conf\"}}"
      "    existence:{should_exist: false}"
      "  }"
      "}"
  }
}
benchmark_configs: {
  id: "rsh-server-disabled-fallback"
  compliance_note: {
    version: { cpe_uri: "fallback" version: "1.0.0" }
    title: "Ensure rsh server is not enabled"
    description:
      "The Berkeley rsh-server (rsh, rlogin, rexec) package contains legacy "
      "services that exchange credentials in clear-text."
    rationale:
      "These legacy services contain numerous security exposures and have "
      "been replaced with the more secure SSH package."
    remediation:
      "Comment out or remove any lines starting with shell, login, or exec "
      "from /etc/inetd.conf and /etc/inetd.d/*.\n"
      "Set disable = yes on all rsh, rlogin, and rexec services in "
      "/etc/xinetd.conf and /etc/xinetd.d/*."
    cis_benchmark: {
      profile_level: 1
      severity: LOW
    }
    scan_instructions:
      "check_alternatives:{"
      "  file_checks:{"
      "    files_to_check:{files_in_dir:{"
      "      dir_path:\"/etc\""
      "      filename_regex: \"inetd\\\\..*\""
      "      recursive: false"
      "    }}"
      "    content_entry: {"
      "      match_type: NONE_MATCH"
      "      match_criteria: {"
      "        filter_regex: \"(shell|login|exec).*\""
      "        expected_regex: \"(shell|login|exec).*\""
      "      }"
      "    }"
      "    non_compliance_msg: \"a config file enables shell\""
      "    file_display_command: \"grep -R '^shell|login|exec' /etc/inetd.*\""
      "  }"
      "  file_checks:{"
      "    files_to_check:{single_file:{path:\"/etc/xinetd.conf\"}}"
      "    files_to_check:{files_in_dir:{"
      "      dir_path:\"/etc/xinetd.d\""
      "      recursive: true"
      "    }}"
      "    content_entry: {"
      "      match_type: NONE_MATCH"
      "      delimiter: \"}\""  # Each service config is contained within a "{}".
      "      match_criteria: {"
      "        filter_regex: \".*service (shell|login|exec).*disable\\\\s+=\\\\sno.*\""
      "        expected_regex: \".*service (shell|login|exec).*disable\\\\s+=\\\\sno.*\""
      "      }"
      "    }"
      "    non_compliance_msg: \"a config file in enables shell\""
      "    file_display_command: \"grep -l 'shell|login|exec' /etc/xinetd.conf /etc/xinetd.d/*\""
      "  }"
      "}"
      "check_alternatives:{"
      "  file_checks:{"
      "    files_to_check:{files_in_dir:{"
      "      dir_path:\"/etc\""
      "      filename_regex: \"inetd\\\\..*\""
      "      recursive: false"
      "    }}"
      "    files_to_check:{single_file:{path:\"/etc/xinetd.conf\"}}"
      "    existence:{should_exist: false}"
      "  }"
      "}"
  }
}
benchmark_configs: {
  id: "talk-server-disabled-fallback"
  compliance_note: {
    version: { cpe_uri: "fallback" version: "1.0.0" }
    title: "Ensure talk server is not enabled"
    description:
      "The talk software makes it possible for users to send and receive "
      "messages across systems through a terminal session. The talk client "
      "(allows initiate of talk sessions) is installed by default"
    rationale:
      "The software presents a security risk as it uses unencrypted protocols "
      "for communication."
    remediation:
      "Comment out or remove any lines starting with talk or ntalk from "
      "/etc/inetd.conf and /etc/inetd.d/*.\n"
      "Set disable = yes on all talk services in /etc/xinetd.conf and "
      "/etc/xinetd.d/*."
    cis_benchmark: {
      profile_level: 1
      severity: LOW
    }
    scan_instructions:
      "check_alternatives:{"
      "  file_checks:{"
      "    files_to_check:{files_in_dir:{"
      "      dir_path:\"/etc\""
      "      filename_regex: \"inetd\\\\..*\""
      "      recursive: false"
      "    }}"
      "    content_entry: {"
      "      match_type: NONE_MATCH"
      "      match_criteria: {"
      "        filter_regex: \"(talk|ntalk).*\""
      "        expected_regex: \"(talk|ntalk).*\""
      "      }"
      "    }"
      "    non_compliance_msg: \"a config file enables talk\""
      "    file_display_command: \"grep -R '^talk' /etc/inetd.*\""
      "  }"
      "  file_checks:{"
      "    files_to_check:{single_file:{path:\"/etc/xinetd.conf\"}}"
      "    files_to_check:{files_in_dir:{"
      "      dir_path:\"/etc/xinetd.d\""
      "      recursive: true"
      "    }}"
      "    content_entry: {"
      "      match_type: NONE_MATCH"
      "      delimiter: \"}\""  # Each service config is contained within a "{}".
      "      match_criteria: {"
      "        filter_regex: \".*service talk.*disable\\\\s+=\\\\sno.*\""
      "        expected_regex: \".*service talk.*disable\\\\s+=\\\\sno.*\""
      "      }"
      "    }"
      "    non_compliance_msg: \"a config file in enables talk\""
      "    file_display_command: \"grep -l 'talk' /etc/xinetd.conf /etc/xinetd.d/*\""
      "  }"
      "}"
      "check_alternatives:{"
      "  file_checks:{"
      "    files_to_check:{files_in_dir:{"
      "      dir_path:\"/etc\""
      "      filename_regex: \"inetd\\\\..*\""
      "      recursive: false"
      "    }}"
      "    files_to_check:{single_file:{path:\"/etc/xinetd.conf\"}}"
      "    existence:{should_exist: false}"
      "  }"
      "}"
  }
}
benchmark_configs: {
  id: "telnet-server-disabled-fallback"
  compliance_note: {
    version: { cpe_uri: "fallback" version: "1.0.0" }
    title: "Ensure telnet server is not enabled"
    description:
      "The telnet-server package contains the telnet daemon, which accepts "
      "connections from users from other systems via the telnet protocol."
    rationale:
      "The telnet protocol is insecure and unencrypted. The use of an "
      "unencrypted transmission medium could allow a user with access to "
      "sniff network traffic the ability to steal credentials. The ssh "
      "package provides an encrypted session and stronger security."
    remediation:
      "Comment out or remove any lines starting with telnet from "
      "/etc/inetd.conf and /etc/inetd.d/*.\n"
      "Set disable = yes on all telnet services in /etc/xinetd.conf and "
      "/etc/xinetd.d/*."
    cis_benchmark: {
      profile_level: 1
      severity: LOW
    }
    scan_instructions:
      "check_alternatives:{"
      "  file_checks:{"
      "    files_to_check:{files_in_dir:{"
      "      dir_path:\"/etc\""
      "      filename_regex: \"inetd\\\\..*\""
      "      recursive: false"
      "    }}"
      "    content_entry: {"
      "      match_type: NONE_MATCH"
      "      match_criteria: {"
      "        filter_regex: \"telnet.*\""
      "        expected_regex: \"telnet.*\""
      "      }"
      "    }"
      "    non_compliance_msg: \"a config file enables telnet\""
      "    file_display_command: \"grep -R '^telnet' /etc/inetd.*\""
      "  }"
      "  file_checks:{"
      "    files_to_check:{single_file:{path:\"/etc/xinetd.conf\"}}"
      "    files_to_check:{files_in_dir:{"
      "      dir_path:\"/etc/xinetd.d\""
      "      recursive: true"
      "    }}"
      "    content_entry: {"
      "      match_type: NONE_MATCH"
      "      delimiter: \"}\""  # Each service config is contained within a "{}".
      "      match_criteria: {"
      "        filter_regex: \".*service telnet.*disable\\\\s+=\\\\sno.*\""
      "        expected_regex: \".*service telnet.*disable\\\\s+=\\\\sno.*\""
      "      }"
      "    }"
      "    non_compliance_msg: \"a config file in enables telnet\""
      "    file_display_command: \"grep -l 'telnet' /etc/xinetd.conf /etc/xinetd.d/*\""
      "  }"
      "}"
      "check_alternatives:{"
      "  file_checks:{"
      "    files_to_check:{files_in_dir:{"
      "      dir_path:\"/etc\""
      "      filename_regex: \"inetd\\\\..*\""
      "      recursive: false"
      "    }}"
      "    files_to_check:{single_file:{path:\"/etc/xinetd.conf\"}}"
      "    existence:{should_exist: false}"
      "  }"
      "}"
  }
}
benchmark_configs: {
  id: "tftp-server-disabled-fallback"
  compliance_note: {
    version: { cpe_uri: "fallback" version: "1.0.0" }
    title: "Ensure tftp server is not enabled"
    description:
      "Trivial File Transfer Protocol (TFTP) is a simple file transfer "
      "protocol, typically used to automatically transfer configuration or "
      "boot machines from a boot server. The packages tftp and atftp are both "
      "used to define and support a TFTP serve"
    rationale:
      "TFTP does not support authentication nor does it ensure the "
      "confidentiality or integrity of data. It is recommended that TFTP be "
      "removed, unless there is a specific need for TFTP. In that case, "
      "extreme caution must be used when configuring the services."
    remediation:
      "Comment out or remove any lines starting with tftp from "
      "/etc/inetd.conf and /etc/inetd.d/*.\n"
      "Set disable = yes on all tftp services in /etc/xinetd.conf and "
      "/etc/xinetd.d/*."
    cis_benchmark: {
      profile_level: 1
      severity: LOW
    }
    scan_instructions:
      "check_alternatives:{"
      "  file_checks:{"
      "    files_to_check:{files_in_dir:{"
      "      dir_path:\"/etc\""
      "      filename_regex: \"inetd\\\\..*\""
      "      recursive: false"
      "    }}"
      "    content_entry: {"
      "      match_type: NONE_MATCH"
      "      match_criteria: {"
      "        filter_regex: \"tftp.*\""
      "        expected_regex: \"tftp.*\""
      "      }"
      "    }"
      "    non_compliance_msg: \"a config file enables tftp\""
      "    file_display_command: \"grep -R '^tftp' /etc/inetd.*\""
      "  }"
      "  file_checks:{"
      "    files_to_check:{single_file:{path:\"/etc/xinetd.conf\"}}"
      "    files_to_check:{files_in_dir:{"
      "      dir_path:\"/etc/xinetd.d\""
      "      recursive: true"
      "    }}"
      "    content_entry: {"
      "      match_type: NONE_MATCH"
      "      delimiter: \"}\""  # Each service config is contained within a "{}".
      "      match_criteria: {"
      "        filter_regex: \".*service tftp.*disable\\\\s+=\\\\sno.*\""
      "        expected_regex: \".*service tftp.*disable\\\\s+=\\\\sno.*\""
      "      }"
      "    }"
      "    non_compliance_msg: \"a config file in enables tftp\""
      "    file_display_command: \"grep -l 'tftp' /etc/xinetd.conf /etc/xinetd.d/*\""
      "  }"
      "}"
      "check_alternatives:{"
      "  file_checks:{"
      "    files_to_check:{files_in_dir:{"
      "      dir_path:\"/etc\""
      "      filename_regex: \"inetd\\\\..*\""
      "      recursive: false"
      "    }}"
      "    files_to_check:{single_file:{path:\"/etc/xinetd.conf\"}}"
      "    existence:{should_exist: false}"
      "  }"
      "}"
  }
}
benchmark_configs: {
  id: "nis-client-not-installed-fallback"
  compliance_note: {
    version: { cpe_uri: "fallback" version: "1.0.0" }
    title: "Ensure NIS Client is not installed"
    description:
      "The Network Information Service (NIS), formerly known as Yellow Pages, "
      "is a client-server directory service protocol used to distribute "
      "system configuration files. The NIS client (ypbind) was used to bind a "
      "machine to an NIS server and receive the distributed configuration "
      "files."
    rationale:
      "The NIS service is inherently an insecure system that has been "
      "vulnerable to DOS attacks, buffer overflows and has poor "
      "authentication for querying NIS maps. NIS generally has been replaced "
      "by such protocols as Lightweight Directory Access Protocol (LDAP). It "
      "is recommended that the service be removed."
    remediation:
      "Uninstall ypbind using the appropriate package manager or manual "
      "installation:\n"
      "```\n"
      "yum remove ypbind\n"
      "apt-get remove ypbind\n"
      "zypper remove ypbind\n"
      "```\n"
    cis_benchmark: {
      profile_level: 1
      severity: LOW
    }
    scan_instructions:
      "check_alternatives:{"
      "  file_checks:{"
      "    files_to_check:{single_file:{path:\"/usr/bin/ypbind\"}}"
      "    files_to_check:{single_file:{path:\"/usr/sbin/ypbind\"}}"
      "    files_to_check:{single_file:{path:\"/bin/ypbind\"}}"
      "    files_to_check:{single_file:{path:\"/sbin/ypbind\"}}"
      "    existence:{should_exist: false}"
      "  }"
      "}"
  }
}
benchmark_configs: {
  id: "rsh-client-not-installed-fallback"
  compliance_note: {
    version: { cpe_uri: "fallback" version: "1.0.0" }
    title: "Ensure rsh client is not installed"
    description: "The rsh package contains the client commands for the rsh services."
    rationale:
      "These legacy clients contain numerous security exposures and have "
      "been replaced with the more secure SSH package. Even if the server is "
      "removed, it is best to ensure the clients are also removed to prevent "
      "users from inadvertently attempting to use these commands and "
      "therefore exposing their credentials. Note that removing the rsh "
      "package removes the clients for rsh , rcp and rlogin ."
    remediation:
      "Uninstall rsh using the appropriate package manager or manual "
      "installation:\n"
      "```\n"
      "yum remove rsh\n"
      "apt-get remove rsh\n"
      "zypper remove rsh\n"
      "```\n"
    cis_benchmark: {
      profile_level: 1
      severity: LOW
    }
    scan_instructions:
      "check_alternatives:{"
      "  file_checks:{"
      "    files_to_check:{single_file:{path:\"/usr/bin/rsh\"}}"
      "    files_to_check:{single_file:{path:\"/usr/sbin/rsh\"}}"
      "    files_to_check:{single_file:{path:\"/bin/rsh\"}}"
      "    files_to_check:{single_file:{path:\"/sbin/rsh\"}}"
      "    existence:{should_exist: false}"
      "  }"
      "}"
  }
}
benchmark_configs: {
  id: "talk-client-not-installed-fallback"
  compliance_note: {
    version: { cpe_uri: "fallback" version: "1.0.0" }
    title: "Ensure talk client is not installed"
    description:
      "The talk software makes it possible for users to send and receive "
      "messages across systems through a terminal session. The talk client, "
      "which allows initialization of talk sessions, is installed by default."
    rationale:
      "The software presents a security risk as it uses unencrypted protocols "
      "for communication."
    remediation:
      "Uninstall talk using the appropriate package manager or manual "
      "installation:\n"
      "```\n"
      "yum remove talk\n"
      "apt-get remove talk\n"
      "zypper remove talk\n"
      "```\n"
    cis_benchmark: {
      profile_level: 1
      severity: LOW
    }
    scan_instructions:
      "check_alternatives:{"
      "  file_checks:{"
      "    files_to_check:{single_file:{path:\"/usr/bin/talk\"}}"
      "    files_to_check:{single_file:{path:\"/usr/sbin/talk\"}}"
      "    files_to_check:{single_file:{path:\"/bin/talk\"}}"
      "    files_to_check:{single_file:{path:\"/sbin/talk\"}}"
      "    existence:{should_exist: false}"
      "  }"
      "}"
  }
}
benchmark_configs: {
  id: "telnet-client-not-installed-fallback"
  compliance_note: {
    version: { cpe_uri: "fallback" version: "1.0.0" }
    title: "Ensure telnet client is not installed"
    description:
      "The telnet package contains the telnet client, which allows users to "
      "start connections to other systems via the telnet protocol."
    rationale:
      "The telnet protocol is insecure and unencrypted. The use of an "
      "unencrypted transmission medium could allow an unauthorized user to "
      "steal credentials. The ssh package provides an encrypted session and "
      "stronger security and is included in most Linux distributions."
    remediation:
      "Uninstall telnet using the appropriate package manager or manual "
      "installation:\n"
      "```\n"
      "# yum remove telnet\n"
      "# apt-get remove telnet\n"
      "# zypper remove telnet\n"
      "```\n"
    cis_benchmark: {
      profile_level: 1
      severity: LOW
    }
    scan_instructions:
      "check_alternatives:{"
      "  file_checks:{"
      "    files_to_check:{single_file:{path:\"/usr/bin/telnet\"}}"
      "    files_to_check:{single_file:{path:\"/usr/sbin/telnet\"}}"
      "    files_to_check:{single_file:{path:\"/bin/telnet\"}}"
      "    files_to_check:{single_file:{path:\"/sbin/telnet\"}}"
      "    existence:{should_exist: false}"
      "  }"
      "}"
  }
}
benchmark_configs: {
  id: "ldap-client-not-installed-fallback"
  compliance_note: {
    version: { cpe_uri: "fallback" version: "1.0.0" }
    title: "Ensure LDAP client is not installed"
    description:
      "The Lightweight Directory Access Protocol (LDAP) was introduced as a "
      "replacement for NIS/YP. It is a service that provides a method for "
      "looking up information from a central database."
    rationale:
      "If the system will not need to act as an LDAP client, it is "
      "recommended that the software be removed to reduce the potential "
      "attack surface."
    remediation:
      "Uninstall openldap-clients using the appropriate package manager or "
      "manual installation:"
      "# yum remove openldap-clients\n"
      "# apt-get remove openldap-clients\n"
      "# zypper remove openldap-clients"
    cis_benchmark: {
      profile_level: 1
      severity: LOW
    }
    scan_instructions:
      "check_alternatives:{"
      "  file_checks:{"
      "    files_to_check:{single_file:{path:\"/usr/bin/ldapadd\"}}"
      "    files_to_check:{single_file:{path:\"/usr/sbin/ldapadd\"}}"
      "    files_to_check:{single_file:{path:\"/bin/ldapadd\"}}"
      "    files_to_check:{single_file:{path:\"/sbin/ldapadd\"}}"
      "    existence:{should_exist: false}"
      "  }"
      "}"
  }
}
benchmark_configs: {
  id: "logfile-permissions-fallback"
  compliance_note: {
    version: { cpe_uri: "fallback" version: "1.0.0" }
    title: "Ensure permissions on all logfiles are configured"
    description:
      "Log files stored in /var/log/ contain logged information from many "
      "services on the system, or on log hosts others as well."
    rationale:
      "It is important to ensure that log files have the correct permissions "
      "to ensure that sensitive data is archived and protected."
    remediation:
      "Run the following commands to set permissions on all existing log files:\n"
      "```\n"
      "find /var/log -type f -exec chmod g-wx,o-rwx \"{}\" + -o -type d -exec chmod gw,o-rwx \"{}\" +\n"
      "```\n"
    cis_benchmark: {
      profile_level: 1
      severity: LOW
    }
    scan_instructions:
      "check_alternatives:{"
      "  file_checks:{"
      "    files_to_check:{files_in_dir:{"
      "      dir_path:\"/var/log\""
      "      files_only: true"
      "      recursive: true"
      "      skip_symlinks: true"
      "    }}"
      "    permission:{clear_bits: 0037}"
      "    non_compliance_msg: \"there are files under /var/log with g+wx or o+rwx permissions\""
      "    file_display_command: \"find /var/log -type f -ls\""
      "  }"
      "}"
      "check_alternatives:{"
      "  file_checks:{"
      "    files_to_check:{single_file:{path:\"/var/log\"}}"
      "    existence:{should_exist: false}"
      "  }"
      "}"
  }
}
benchmark_configs: {
  id: "sshd-config-permissions-fallback"
  compliance_note: {
    version: { cpe_uri: "fallback" version: "1.0.0" }
    title: "Ensure permissions on /etc/ssh/sshd_config are configured"
    description:
      "The /etc/ssh/sshd_config file contains configuration specifications for sshd.\n"
      "The command below sets the owner and group of the file to root."
    rationale:
      "The /etc/ssh/sshd_config file needs to be protected from unauthorized changes\n"
      "by nonprivileged users."
    remediation:
      "Run the following commands to set ownership and permissions on /etc/ssh/sshd_config:\n"
      "```\n"
      "# chown root:root /etc/ssh/sshd_config\n"
      "# chmod og-rwx /etc/ssh/sshd_config\n"
      "```\n"
    cis_benchmark: {
      profile_level: 1
      severity: LOW
    }
    scan_instructions:
      "check_alternatives:{"
      "  file_checks:{"
      "    files_to_check:{single_file:{path:\"/etc/ssh/sshd_config\"}}"
      "    permission:{"
      "      clear_bits: 0077"
      "      user: {name: \"root\" should_own: true}"
      "      group: {name: \"root\" should_own: true}"
      "    }"
      "  }"
      "}"
      "check_alternatives:{"
      "  file_checks:{"
      "    files_to_check:{single_file:{path:\"/etc/ssh/sshd_config\"}}"
      "    existence:{should_exist: false}"
      "  }"
      "}"
  }
}
benchmark_configs: {
  id: "sshd-private-host-key-permissions-fallback"
  compliance_note: {
    version: { cpe_uri: "fallback" version: "1.0.0" }
    title: "Ensure permissions on SSH private host key files are configured"
    description:
      "An SSH private key is one of two files used in SSH public key authentication.\n"
      "In this authentication method, The possession of the private key is proof of\n"
      "identity. Only a private key that corresponds to a public key will be able to\n"
      "authenticate successfully. The private keys need to be stored and handled\n"
      "carefully, and no copies of the private key should be distributed."
    rationale:
      "If an unauthorized user obtains the private SSH host key file, the host could\n"
      "be impersonated"
    remediation:
      "Run the following commands to set ownership and permissions on the private SSH\n"
      "host key files\n"
      "# find /etc/ssh -xdev -type f -name 'ssh_host_*_key' -exec chown root:root {} \\;\n"
      "# find /etc/ssh -xdev -type f -name 'ssh_host_*_key' -exec chmod 0600 {} \\;"
    cis_benchmark: {
      profile_level: 1
      severity: LOW
    }
    scan_instructions:
      "check_alternatives:{"
      "  file_checks:{"
      "    files_to_check:{files_in_dir:{"
      "      dir_path:\"/etc/ssh\""
      "      recursive: true"
      "      filename_regex: \"ssh_host_.*_key\""
      "      skip_symlinks: true"
      "    }}"
      "    permission:{"
      "      clear_bits: 0077"
      "      user: {name: \"root\" should_own: true}"
      "      group: {name: \"root\" should_own: true}"
      "    }"
      "    file_display_command: \"find /etc/ssh -xdev -type f -name 'ssh_host_*_key' -exec stat {} \\\\;\""
      "  }"
      "}"
      "check_alternatives:{"
      "  file_checks:{"
      "    files_to_check:{single_file:{path:\"/etc/ssh\"}}"
      "    existence:{should_exist: false}"
      "  }"
      "}"
  }
}
benchmark_configs: {
  id: "sshd-public-host-key-permissions-fallback"
  compliance_note: {
    version: { cpe_uri: "fallback" version: "1.0.0" }
    title: "Ensure permissions on SSH public host key files are configured"
    description:
      "An SSH public key is one of two files used in SSH public key authentication.\n"
      "In this authentication method, a public key is a key that can be used for\n"
      "verifying digital signatures generated using a corresponding private key. Only\n"
      "a public key that corresponds to a private key will be able to authenticate\n"
      "successfully."
    rationale:
      "If a public host key file is modified by an unauthorized user, the SSH service\n"
      "may be compromised."
    remediation:
      "Run the following commands to set permissions and ownership on the SSH host\n"
      "public key files\n"
      "# find /etc/ssh -xdev -type f -name 'ssh_host_*_key.pub' -exec chmod 0644 {} \\;\n"
      "#find /etc/ssh -xdev -type f -name 'ssh_host_*_key.pub' -exec chown root:root {} \\;"
    cis_benchmark: {
      profile_level: 1
      severity: LOW
    }
    scan_instructions:
      "check_alternatives:{"
      "  file_checks:{"
      "    files_to_check:{files_in_dir:{"
      "      dir_path:\"/etc/ssh\""
      "      recursive: true"
      "      filename_regex: \"ssh_host_.*_key.pub\""
      "      skip_symlinks: true"
      "    }}"
      "    permission:{clear_bits: 0033}"
      "    file_display_command: \"find /etc/ssh -xdev -type f -name 'ssh_host_*_key.pub' -exec stat {} \\\\;\""
      "  }"
      "}"
      "check_alternatives:{"
      "  file_checks:{"
      "    files_to_check:{single_file:{path:\"/etc/ssh\"}}"
      "    existence:{should_exist: false}"
      "  }"
      "}"
  }
}
benchmark_configs: {
  id: "ssh-protocol-set-to-2-fallback"
  compliance_note: {
    version: { cpe_uri: "fallback" version: "1.0.0" }
    title: "Ensure SSH Protocol is set to 2"
    description:
      "Older versions of SSH support two different and incompatible protocols: SSH1\n"
      "and SSH2. SSH1 was the original protocol and was subject to security issues.\n"
      "SSH2 is more advanced and secure."
    rationale: "SSH v1 suffers from insecurities that do not affect SSH v2."
    remediation:
      "Edit the /etc/ssh/sshd_config file to set the parameter as follows:\n"
      "```\n"
      "Protocol 2\n"
      "```\n"
    cis_benchmark: {
      profile_level: 1
      severity: LOW
    }
    scan_instructions:
      "check_alternatives:{"
      "  file_checks:{"
      "    files_to_check:{single_file:{path:\"/etc/ssh/sshd_config\"}}"
      "    content_entry:{"
      "      match_type: ALL_MATCH_ANY_ORDER"
      "      match_criteria: {"
      "        filter_regex: \"Protocol .*\""
      "        expected_regex: \"Protocol *2\""
      "      }"
      "    }"
      "  }"
      "}"
      "check_alternatives:{"
      "  file_checks:{"
      "    files_to_check:{single_file:{path:\"/etc/ssh/sshd_config\"}}"
      "    existence:{should_exist: false}"
      "  }"
      "}"
  }
}
benchmark_configs: {
  id: "ssh-loglevel-appropriate-fallback"
  compliance_note: {
    version: { cpe_uri: "fallback" version: "1.0.0" }
    title: "Ensure SSH LogLevel is appropriate"
    description:
      "INFO level is the basic level that only records login activity of SSH users.\n"
      "In many situations, such as Incident Response, it is important to determine\n"
      "when a particular user was active on a system. The logout record can eliminate\n"
      "those users who disconnected, which helps narrow the field.\n"
      "VERBOSE level\n"
      "specifies that login and logout activity as well as the key fingerprint for\n"
      "any SSH key used for login will be logged. This information is important for\n"
      "SSH key management, especially in legacy environments."
    rationale:
      "SSH provides several logging levels with varying amounts of verbosity. DEBUG\n"
      "is specifically not recommended other than strictly for debugging SSH\n"
      "communications since it provides so much data that it is difficult to identify\n"
      "important security information."
    remediation:
      "Edit the /etc/ssh/sshd_config file to set the parameter as follows:\n"
      "```\n"
      "LogLevel VERBOSE\n"
      "```\n"
      "OR\n"
      "```\n"
      "LogLevel INFO\n"
      "```\n"
    cis_benchmark: {
      profile_level: 1
      severity: LOW
    }
    scan_instructions:
      "check_alternatives:{"
      "  file_checks:{"
      "    files_to_check:{single_file:{path:\"/etc/ssh/sshd_config\"}}"
      "    content_entry:{"
      "      match_type: NONE_MATCH"
      "      match_criteria: {"
      "        filter_regex: \"LogLevel .*\""
      "        expected_regex: \"LogLevel .*\""
      "      }"
      "    }"
      "  }"
      "}"
      "check_alternatives:{"
      "  file_checks:{"
      "    files_to_check:{single_file:{path:\"/etc/ssh/sshd_config\"}}"
      "    content_entry:{"
      "      match_type: ALL_MATCH_ANY_ORDER"
      "      match_criteria: {"
      "        filter_regex: \"LogLevel .*\""
      "        expected_regex: \"LogLevel (INFO|VERBOSE)\""
      "      }"
      "    }"
      "  }"
      "}"
      "check_alternatives:{"
      "  file_checks:{"
      "    files_to_check:{single_file:{path:\"/etc/ssh/sshd_config\"}}"
      "    existence:{should_exist: false}"
      "  }"
      "}"
  }
}
benchmark_configs: {
  id: "ssh-maxauthtries-4-or-less-fallback"
  compliance_note: {
    version: { cpe_uri: "fallback" version: "1.0.0" }
    title: "Ensure SSH MaxAuthTries is set to 4 or less"
    description:
      "The MaxAuthTries parameter specifies the maximum number of "
      "authentication attempts permitted per connection. When the login "
      "failure count reaches half the number, error messages will be written "
      "to the syslog file detailing the login failure."
    rationale:
      "Setting the MaxAuthTries parameter to a low number will minimize the "
      "risk of successful brute force attacks to the SSH server. While the "
      "recommended setting is 4, set the number based on site policy."
    remediation:
      "Edit the /etc/ssh/sshd_config file to set the parameter as follows:\n"
      "```\n"
      "MaxAuthTries 4\n"
      "```\n"
    cis_benchmark: {
      profile_level: 1
      severity: LOW
    }
    scan_instructions:
      "check_alternatives:{"
      "  file_checks:{"
      "    files_to_check:{single_file:{path:\"/etc/ssh/sshd_config\"}}"
      "    content_entry:{"
      "      match_type: ALL_MATCH_ANY_ORDER"
      "      match_criteria: {"
      "        filter_regex: \"MaxAuthTries .*\""
      "        expected_regex: \"MaxAuthTries (\\\\d+)\""
      "        group_criteria:{"
      "          group_index: 1"
      "          type: LESS_THAN"
      "          const: 5"
      "        }"
      "      }"
      "    }"
      "  }"
      "}"
      "check_alternatives:{"
      "  file_checks:{"
      "    files_to_check:{single_file:{path:\"/etc/ssh/sshd_config\"}}"
      "    existence:{should_exist: false}"
      "  }"
      "}"
  }
}
benchmark_configs: {
  id: "ssh-ignorerhosts-enabled-fallback"
  compliance_note: {
    version: { cpe_uri: "fallback" version: "1.0.0" }
    title: "Ensure SSH IgnoreRhosts is enabled"
    description:
      "The IgnoreRhosts parameter specifies that .rhosts and .shosts files will not\n"
      "be used in RhostsRSAAuthentication or HostbasedAuthentication."
    rationale:
      "Setting this parameter forces users to enter a password when authenticating\n"
      "with ssh."
    remediation:
      "Edit the /etc/ssh/sshd_config file to set the parameter as follows:\n"
      "```\n"
      "IgnoreRhosts yes\n"
      "```\n"
    cis_benchmark: {
      profile_level: 1
      severity: LOW
    }
    scan_instructions:
      "check_alternatives:{"
      "  file_checks:{"
      "    files_to_check:{single_file:{path:\"/etc/ssh/sshd_config\"}}"
      "    content_entry:{"
      "      match_type: ALL_MATCH_ANY_ORDER"
      "      match_criteria: {"
      "        filter_regex: \"IgnoreRhosts .*\""
      "        expected_regex: \"IgnoreRhosts yes\""
      "      }"
      "    }"
      "  }"
      "}"
      "check_alternatives:{"
      "  file_checks:{"
      "    files_to_check:{single_file:{path:\"/etc/ssh/sshd_config\"}}"
      "    content_entry:{"
      # Default value is "yes" if nothing is specified.
      "      match_type: NONE_MATCH"
      "      match_criteria: {"
      "        filter_regex: \"IgnoreRhosts .*\""
      "        expected_regex: \"IgnoreRhosts .*\""
      "      }"
      "    }"
      "  }"
      "}"
      "check_alternatives:{"
      "  file_checks:{"
      "    files_to_check:{single_file:{path:\"/etc/ssh/sshd_config\"}}"
      "    existence:{should_exist: false}"
      "  }"
      "}"
  }
}
benchmark_configs: {
  id: "ssh-hostbasedauthentication-disabled-fallback"
  compliance_note: {
    version: { cpe_uri: "fallback" version: "1.0.0" }
    title: "Ensure SSH HostbasedAuthentication is disabled"
    description:
      "The HostbasedAuthentication parameter specifies if authentication is allowed\n"
      "through trusted hosts via the user of .rhosts, or /etc/hosts.equiv, along with\n"
      "successful public key client host authentication. This option only applies to\n"
      "SSH Protocol Version 2."
    rationale:
      "Even though the .rhosts files are ineffective if support is disabled in /etc\n"
      "pam.conf, disabling the ability to use .rhosts files in SSH provides an\n"
      "additional layer of protection."
    remediation:
      "Edit the /etc/ssh/sshd_config file to set the parameter as follows:\n"
      "```\n"
      "HostbasedAuthentication no\n"
      "```\n"
    cis_benchmark: {
      profile_level: 1
      severity: LOW
    }
    scan_instructions:
      "check_alternatives:{"
      "  file_checks:{"
      "    files_to_check:{single_file:{path:\"/etc/ssh/sshd_config\"}}"
      "    content_entry:{"
      "      match_type: ALL_MATCH_ANY_ORDER"
      "      match_criteria: {"
      "        filter_regex: \"HostbasedAuthentication .*\""
      "        expected_regex: \"HostbasedAuthentication no\""
      "      }"
      "    }"
      "  }"
      "}"
      # Default value is "no" if nothing is specified.
      "check_alternatives:{"
      "  file_checks:{"
      "    files_to_check:{single_file:{path:\"/etc/ssh/sshd_config\"}}"
      "    content_entry:{"
      "      match_type: NONE_MATCH"
      "      match_criteria: {"
      "        filter_regex: \"HostbasedAuthentication .*\""
      "        expected_regex: \"HostbasedAuthentication .*\""
      "      }"
      "    }"
      "  }"
      "}"
      "check_alternatives:{"
      "  file_checks:{"
      "    files_to_check:{single_file:{path:\"/etc/ssh/sshd_config\"}}"
      "    existence:{should_exist: false}"
      "  }"
      "}"
  }
}
benchmark_configs: {
  id: "ssh-root-login-disabled-fallback"
  compliance_note: {
    version: { cpe_uri: "fallback" version: "1.0.0" }
    title: "Ensure SSH root login is disabled"
    description:
      "The PermitRootLogin parameter specifies if the root user can log in using ssh.\n"
      "The default is no."
    rationale:
      "Disallowing root logins over SSH requires system admins to authenticate using\n"
      "their own individual account, then escalating to root via sudo or su. This in\n"
      "turn limits opportunity for non-repudiation and provides a clear audit trail\n"
      "in the event of a security incident"
    remediation:
      "Edit the /etc/ssh/sshd_config file to set the parameter as follows:\n"
      "```\n"
      "PermitRootLogin no\n"
      "```\n"
    cis_benchmark: {
      profile_level: 1
      severity: LOW
    }
    scan_instructions:
      "check_alternatives:{"
      "  file_checks:{"
      "    files_to_check:{single_file:{path:\"/etc/ssh/sshd_config\"}}"
      "    content_entry:{"
      "      match_type: ALL_MATCH_ANY_ORDER"
      "      match_criteria: {"
      "        filter_regex: \"PermitRootLogin .*\""
      "        expected_regex: \"PermitRootLogin no\""
      "      }"
      "    }"
      "  }"
      "}"
      "check_alternatives:{"
      "  file_checks:{"
      "    files_to_check:{single_file:{path:\"/etc/ssh/sshd_config\"}}"
      "    existence:{should_exist: false}"
      "  }"
      "}"
  }
}
benchmark_configs: {
  id: "ssh-permitemptypasswords-disabled-fallback"
  compliance_note: {
    version: { cpe_uri: "fallback" version: "1.0.0" }
    title: "Ensure SSH PermitEmptyPasswords is disabled"
    description:
      "The PermitEmptyPasswords parameter specifies if the SSH server allows login to\n"
      "accounts with empty password strings."
    rationale:
      "Disallowing remote shell access to accounts that have an empty password\n"
      "reduces the probability of unauthorized access to the system"
    remediation:
      "Edit the /etc/ssh/sshd_config file to set the parameter as follows:\n"
      "```\n"
      "PermitEmptyPasswords no\n"
      "```\n"
    cis_benchmark: {
      profile_level: 1
      severity: LOW
    }
    scan_instructions:
      "check_alternatives:{"
      "  file_checks:{"
      "    files_to_check:{single_file:{path:\"/etc/ssh/sshd_config\"}}"
      "    content_entry:{"
      "      match_type: ALL_MATCH_ANY_ORDER"
      "      match_criteria: {"
      "        filter_regex: \"PermitEmptyPasswords .*\""
      "        expected_regex: \"PermitEmptyPasswords no\""
      "      }"
      "    }"
      "  }"
      "}"
      # Default value is "no" if nothing is specified.
      "check_alternatives:{"
      "  file_checks:{"
      "    files_to_check:{single_file:{path:\"/etc/ssh/sshd_config\"}}"
      "    content_entry:{"
      "      match_type: NONE_MATCH"
      "      match_criteria: {"
      "        filter_regex: \"PermitEmptyPasswords .*\""
      "        expected_regex: \"PermitEmptyPasswords .*\""
      "      }"
      "    }"
      "  }"
      "}"
      "check_alternatives:{"
      "  file_checks:{"
      "    files_to_check:{single_file:{path:\"/etc/ssh/sshd_config\"}}"
      "    existence:{should_exist: false}"
      "  }"
      "}"
  }
}
benchmark_configs: {
  id: "ssh-permituserenvironments-disabled-fallback"
  compliance_note: {
    version: { cpe_uri: "fallback" version: "1.0.0" }
    title: "Ensure SSH PermitUserEnvironment is disabled"
    description:
      "The PermitUserEnvironment option allows users to present environment options\n"
      "to the ssh daemon."
    rationale:
      "Permitting users the ability to set environment variables through the SSH\n"
      "daemon could potentially allow users to bypass security controls (e.g. setting\n"
      "an execution path that has ssh executing trojan'd programs)"
    remediation:
      "Edit the /etc/ssh/sshd_config file to set the parameter as follows:\n"
      "```\n"
      "PermitUserEnvironment no\n"
      "```\n"
    cis_benchmark: {
      profile_level: 1
      severity: LOW
    }
    scan_instructions:
      "check_alternatives:{"
      "  file_checks:{"
      "    files_to_check:{single_file:{path:\"/etc/ssh/sshd_config\"}}"
      "    content_entry:{"
      "      match_type: ALL_MATCH_ANY_ORDER"
      "      match_criteria: {"
      "        filter_regex: \"PermitUserEnvironment .*\""
      "        expected_regex: \"PermitUserEnvironment no\""
      "      }"
      "    }"
      "  }"
      "}"
      # Default value is "no" if nothing is specified.
      "check_alternatives:{"
      "  file_checks:{"
      "    files_to_check:{single_file:{path:\"/etc/ssh/sshd_config\"}}"
      "    content_entry:{"
      "      match_type: NONE_MATCH"
      "      match_criteria: {"
      "        filter_regex: \"PermitUserEnvironment .*\""
      "        expected_regex: \"PermitUserEnvironment .*\""
      "      }"
      "    }"
      "  }"
      "}"
      "check_alternatives:{"
      "  file_checks:{"
      "    files_to_check:{single_file:{path:\"/etc/ssh/sshd_config\"}}"
      "    existence:{should_exist: false}"
      "  }"
      "}"
  }
}
benchmark_configs: {
  id: "strong-ciphers-used-fallback"
  compliance_note: {
    version: { cpe_uri: "fallback" version: "1.0.0" }
    title: "Ensure only strong Ciphers are used"
    description: "This variable limits the ciphers that SSH can use during communication."
    rationale:
      "Weak ciphers that are used for authentication to the cryptographic module\n"
      "cannot be relied upon to provide confidentiality or integrity, and system data\n"
      "may be compromised The DES, Triple DES, and Blowfish ciphers, as used in SSH,\n"
      "have a birthday bound of approximately four billion blocks, which makes it\n"
      "easier for remote attackers to obtain cleartext data via a birthday attack\n"
      "against a long-duration encrypted session, aka a \"Sweet32\" attackThe RC4\n"
      "algorithm as used in the TLS protocol and SSL protocol does not properly\n"
      "combine state data with key data during the initialization phase, which makes\n"
      "it easier for remote attackers to conduct plaintext-recovery attacks against\n"
      "the initial bytes of a stream by sniffing network traffic that occasionally\n"
      "relies on keys affected by the Invariance Weakness, and then using a brute\n"
      "force approach involving LSB values, aka the \"Bar Mitzvah\" issue.\n"
      "The passwords used during an SSH session encrypted with RC4 can be recovered\n"
      "by an attacker who is able to capture and replay the session Error handling in\n"
      "the SSH protocol; Client and Server, when using a block cipher algorithm in\n"
      "Cipher Block Chaining (CBC) mode, makes it easier for remote attackers to\n"
      "recover certain plaintext data from an arbitrary block of ciphertext in an SSH\n"
      "session via unknown vectors.\n"
      "The mm_newkeys_from_blob function in monitor_wrap.c, when an AES-GCM cipher is\n"
      "used, does not properly initialize memory for a MAC context data structure,\n"
      "which allows remote authenticated users to bypass intended ForceCommand and\n"
      "login-shell restrictions via packet data that provides a crafted callback\n"
      "address."
    remediation:
      "Edit the /etc/ssh/sshd_config file add/modify the Ciphers line to contain a\n"
      "comma separated list of the site approved ciphers\n"
      "Example:\n"
      "```\n"
      "Ciphers chacha20-poly1305@openssh.com,aes256-gcm@openssh.com,aes128-gcm@openssh.com,aes256-ctr,aes192-ctr,aes128-ctr\n"
      "```\n"
    cis_benchmark: {
      profile_level: 1
      severity: LOW
    }
    scan_instructions:
      "check_alternatives:{"
      "  file_checks:{"
      "    files_to_check:{single_file:{path:\"/etc/ssh/sshd_config\"}}"
      "    content_entry:{"
      "      match_type: NONE_MATCH"
      "      match_criteria: {"
      "        filter_regex: \"Ciphers .*\""
      "        expected_regex: \"Ciphers .*3des-cbc(,|$).*\""
      "      }"
      "      match_criteria: {"
      "        filter_regex: \"Ciphers .*\""
      "        expected_regex: \"Ciphers .*aes128-cbc(,|$).*\""
      "      }"
      "      match_criteria: {"
      "        filter_regex: \"Ciphers .*\""
      "        expected_regex: \"Ciphers .*aes192-cbc(,|$).*\""
      "      }"
      "      match_criteria: {"
      "        filter_regex: \"Ciphers .*\""
      "        expected_regex: \"Ciphers .*aes256-cbc(,|$).*\""
      "      }"
      "      match_criteria: {"
      "        filter_regex: \"Ciphers .*\""
      "        expected_regex: \"Ciphers .*arcfour(,|$).*\""
      "      }"
      "      match_criteria: {"
      "        filter_regex: \"Ciphers .*\""
      "        expected_regex: \"Ciphers .*arcfour128(,|$).*\""
      "      }"
      "      match_criteria: {"
      "        filter_regex: \"Ciphers .*\""
      "        expected_regex: \"Ciphers .*arcfour256(,|$).*\""
      "      }"
      "      match_criteria: {"
      "        filter_regex: \"Ciphers .*\""
      "        expected_regex: \"Ciphers .*blowfish-cbc(,|$).*\""
      "      }"
      "      match_criteria: {"
      "        filter_regex: \"Ciphers .*\""
      "        expected_regex: \"Ciphers .*cast128-cbc(,|$).*\""
      "      }"
      "      match_criteria: {"
      "        filter_regex: \"Ciphers .*\""
      "        expected_regex: \"Ciphers .*rijndael-cbc@lysator.liu.se(,|$).*\""
      "      }"
      "    }"
      "  }"
      # The default values are also insecure so check that they're overridden.
      "  file_checks:{"
      "    files_to_check:{single_file:{path:\"/etc/ssh/sshd_config\"}}"
      "    content_entry:{"
      "      match_type: ALL_MATCH_ANY_ORDER"
      "      match_criteria: {"
      "        filter_regex: \"Ciphers .*\""
      "        expected_regex: \"Ciphers .*\""
      "      }"
      "    }"
      "  }"
      "}"
      "check_alternatives:{"
      "  file_checks:{"
      "    files_to_check:{single_file:{path:\"/etc/ssh/sshd_config\"}}"
      "    existence:{should_exist: false}"
      "  }"
      "}"
  }
}
benchmark_configs: {
  id: "strong-mac-algorithms-used-fallback"
  compliance_note: {
    version: { cpe_uri: "fallback" version: "1.0.0" }
    title: "Ensure only strong MAC algorithms are used"
    description: "This variable limits the types of MAC algorithms that SSH can use during communication."
    rationale:
      "MD5 and 96-bit MAC algorithms are considered weak and have been shown "
      "to increase exploitability in SSH downgrade attacks. Weak algorithms "
      "continue to have a great deal of attention as a weak spot that can be "
      "exploited with expanded computing power. An attacker that breaks the "
      "algorithm could take advantage of a MiTM position to decrypt the SSH "
      "tunnel and capture credentials and information"
    remediation:
      "Edit the /etc/ssh/sshd_config file and add/modify the MACs line to "
      "contain a comma separated list of the site approved MACs\n"
      "Example:\n"
      "```\n"
      "MACs hmac-sha2-512-etm@openssh.com,hmac-sha2-256-etm@openssh.com,hmac-sha2-512,hmac-sha2-256\n"
      "```\n"
    cis_benchmark: {
      profile_level: 1
      severity: LOW
    }
    scan_instructions:
      "check_alternatives:{"
      "  file_checks:{"
      "    files_to_check:{single_file:{path:\"/etc/ssh/sshd_config\"}}"
      "    content_entry:{"
      "      match_type: NONE_MATCH"
      "      match_criteria: {"
      "        filter_regex: \"MACs .*\""
      "        expected_regex: \"MACs .*hmac-md5(,|$).*\""
      "      }"
      "      match_criteria: {"
      "        filter_regex: \"MACs .*\""
      "        expected_regex: \"MACs .*hmac-md5-96(,|$).*\""
      "      }"
      "      match_criteria: {"
      "        filter_regex: \"MACs .*\""
      "        expected_regex: \"MACs .*hmac-ripemd160(,|$).*\""
      "      }"
      "      match_criteria: {"
      "        filter_regex: \"MACs .*\""
      "        expected_regex: \"MACs .*hmac-sha1(,|$).*\""
      "      }"
      "      match_criteria: {"
      "        filter_regex: \"MACs .*\""
      "        expected_regex: \"MACs .*hmac-sha1-96(,|$).*\""
      "      }"
      "      match_criteria: {"
      "        filter_regex: \"MACs .*\""
      "        expected_regex: \"MACs .*umac-64@openssh.com(,|$).*\""
      "      }"
      "      match_criteria: {"
      "        filter_regex: \"MACs .*\""
      "        expected_regex: \"MACs .*umac-128@openssh.com(,|$).*\""
      "      }"
      "      match_criteria: {"
      "        filter_regex: \"MACs .*\""
      "        expected_regex: \"MACs .*hmac-md5-etm@openssh.com(,|$).*\""
      "      }"
      "      match_criteria: {"
      "        filter_regex: \"MACs .*\""
      "        expected_regex: \"MACs .*hmac-md5-96-etm@openssh.com(,|$).*\""
      "      }"
      "      match_criteria: {"
      "        filter_regex: \"MACs .*\""
      "        expected_regex: \"MACs .*hmac-ripemd160-etm@openssh.com(,|$).*\""
      "      }"
      "      match_criteria: {"
      "        filter_regex: \"MACs .*\""
      "        expected_regex: \"MACs .*hmac-sha1-etm@openssh.com(,|$).*\""
      "      }"
      "      match_criteria: {"
      "        filter_regex: \"MACs .*\""
      "        expected_regex: \"MACs .*hmac-sha1-96-etm@openssh.com(,|$).*\""
      "      }"
      "      match_criteria: {"
      "        filter_regex: \"MACs .*\""
      "        expected_regex: \"MACs .*umac-64-etm@openssh.com(,|$).*\""
      "      }"
      "      match_criteria: {"
      "        filter_regex: \"MACs .*\""
      "        expected_regex: \"MACs .*umac-128-etm@openssh.com(,|$).*\""
      "      }"
      "    }"
      "  }"
      # The default values are also insecure so check that they're overridden.
      "  file_checks:{"
      "    files_to_check:{single_file:{path:\"/etc/ssh/sshd_config\"}}"
      "    content_entry:{"
      "      match_type: ALL_MATCH_ANY_ORDER"
      "      match_criteria: {"
      "        filter_regex: \"MACs .*\""
      "        expected_regex: \"MACs .*\""
      "      }"
      "    }"
      "  }"
      "}"
      "check_alternatives:{"
      "  file_checks:{"
      "    files_to_check:{single_file:{path:\"/etc/ssh/sshd_config\"}}"
      "    existence:{should_exist: false}"
      "  }"
      "}"
  }
}
benchmark_configs: {
  id: "strong-key-exchange-algos-used-fallback"
  compliance_note: {
    version: { cpe_uri: "fallback" version: "1.0.0" }
    title: "Ensure only strong Key Exchange algorithms are used"
    description:
      "Key exchange is any method in cryptography by which cryptographic keys are\n"
      "exchanged between two parties, allowing use of a cryptographic algorithm. If\n"
      "the sender and receiver wish to exchange encrypted messages, each must be\n"
      "equipped to encrypt messages to be sent and decrypt messages received"
    rationale:
      "Key exchange methods that are considered weak should be removed. A key\n"
      "exchange method may be weak because too few bits are used, or the hashing\n"
      "algorithm is considered too weak. Using weak algorithms could expose\n"
      "connections to man-in-the-middle attacks"
    remediation:
      "Edit the /etc/ssh/sshd_config file add/modify the KexAlgorithms line to\n"
      "contain a comma separated list of the site approved key exchange algorithms\n"
      "Example:\n"
      "```\n"
      "KexAlgorithms curve25519-sha256,curve25519-sha256@libssh.org,diffie-hellmangroup14-sha256,diffie-hellman-group16-sha512,diffie-hellman-group18-sha512,ecdh-sha2-nistp521,ecdh-sha2-nistp384,ecdh-sha2-nistp256,diffiehellman-group-exchange-sha256\n"
      "```\n"
    cis_benchmark: {
      profile_level: 1
      severity: LOW
    }
    scan_instructions:
      "check_alternatives:{"
      "  file_checks:{"
      "    files_to_check:{single_file:{path:\"/etc/ssh/sshd_config\"}}"
      "    content_entry:{"
      "      match_type: NONE_MATCH"
      "      match_criteria: {"
      "        filter_regex: \"KexAlgorithms .*\""
      "        expected_regex: \"KexAlgorithms .*diffie-hellman-group1-sha1.*\""
      "      }"
      "      match_criteria: {"
      "        filter_regex: \"KexAlgorithms .*\""
      "        expected_regex: \"KexAlgorithms .*diffie-hellman-group14-sha1.*\""
      "      }"
      "      match_criteria: {"
      "        filter_regex: \"KexAlgorithms .*\""
      "        expected_regex: \"KexAlgorithms .*diffie-hellman-group-exchange-sha1.*\""
      "      }"
      "    }"
      "  }"
      "}"
      "check_alternatives:{"
      "  file_checks:{"
      "    files_to_check:{single_file:{path:\"/etc/ssh/sshd_config\"}}"
      "    existence:{should_exist: false}"
      "  }"
      "}"
  }
}
benchmark_configs: {
  id: "ssh-idle-timeout-interval-configured-fallback"
  compliance_note: {
    version: { cpe_uri: "fallback" version: "1.0.0" }
    title: "Ensure SSH Idle Timeout Interval is configured"
    description:
      "The two options ClientAliveInterval and ClientAliveCountMax control the "
      "timeout of ssh sessions. When the ClientAliveInterval variable is set, "
      "ssh sessions that have no activity for the specified length of time are "
      "terminated. When the ClientAliveCountMax variable is set, sshd will "
      "send client alive messages at every ClientAliveInterval interval. When "
      "the number of consecutive client alive messages are sent with no "
      "response from the client, the ssh session is terminated. For example, "
      "if the ClientAliveInterval is set to 15 seconds and the "
      "ClientAliveCountMax is set to 3, the client ssh session will be "
      "terminated after 45 seconds of idle time."
    rationale:
      "Having no timeout value associated with a connection could allow an "
      "unauthorized user access to another user's ssh session (e.g. user "
      "walks away from their computer and doesn't lock the screen). Setting "
      "a timeout value at least reduces the risk of this happening.\n"
      "While the recommended setting is 300 seconds (5 minutes), set this "
      "timeout value based on site policy. The recommended setting for "
      "ClientAliveCountMax is 0. In this case, the client session will be "
      "terminated after 5 minutes of idle time and no keepalive messages will "
      "be sent."
    remediation:
      "Edit the /etc/ssh/sshd_config file to set the parameters according to "
      "site policy:\n"
      "```\n"
      "ClientAliveInterval 300\n"
      "ClientAliveCountMax 0\n"
      "```\n"
    cis_benchmark: {
      profile_level: 1
      severity: LOW
    }
    scan_instructions:
      "check_alternatives:{"
      "  file_checks:{"
      "    files_to_check:{single_file:{path:\"/etc/ssh/sshd_config\"}}"
      "    content_entry:{"
      "      match_type: ALL_MATCH_ANY_ORDER"
      "      match_criteria: {"
      "        filter_regex: \"ClientAliveInterval .*\""
      "        expected_regex: \"ClientAliveInterval (\\\\d+)\""
      "        group_criteria:{"
      "          group_index: 1"
      "          type: LESS_THAN"
      "          const: 301"
      "        }"
      "      }"
      "      match_criteria: {"
      "        filter_regex: \"ClientAliveInterval .*\""
      "        expected_regex: \"ClientAliveInterval (\\\\d+)\""
      "        group_criteria:{"
      "          group_index: 1"
      "          type: GREATER_THAN"
      "          const: 0"
      "        }"
      "      }"
      "      match_criteria: {"
      "        filter_regex: \"ClientAliveCountMax .*\""
      "        expected_regex: \"ClientAliveCountMax (\\\\d+)\""
      "        group_criteria:{"
      "          group_index: 1"
      "          type: LESS_THAN"
      "          const: 4"
      "        }"
      "      }"
      "    }"
      "  }"
      "}"
      "check_alternatives:{"
      "  file_checks:{"
      "    files_to_check:{single_file:{path:\"/etc/ssh/sshd_config\"}}"
      "    existence:{should_exist: false}"
      "  }"
      "}"
  }
}
benchmark_configs: {
  id: "ssh-logingrace-one-minute-or-less-fallback"
  compliance_note: {
    version: { cpe_uri: "fallback" version: "1.0.0" }
    title: "Ensure SSH LoginGraceTime is set to one minute or less"
    description:
      "The LoginGraceTime parameter specifies the time allowed for successful "
      "authentication to the SSH server. The longer the Grace period is the "
      "more open unauthenticated connections can exist. Like other session "
      "controls in this session the Grace Period should be limited to "
      "appropriate organizational limits to ensure the service is available "
      "for needed access."
    rationale:
      "Setting the LoginGraceTime parameter to a low number will minimize the "
      "risk of successful brute force attacks to the SSH server. It will also "
      "limit the number of concurrent unauthenticated connections While the "
      "recommended setting is 60 seconds (1 Minute), set the number based on "
      "site policy."
    remediation:
      "Edit the /etc/ssh/sshd_config file to set the parameter as follows:\n"
      "```\n"
      "LoginGraceTime 60\n"
      "```\n"
    cis_benchmark: {
      profile_level: 1
      severity: LOW
    }
    scan_instructions:
      "check_alternatives:{"
      "  file_checks:{"
      "    files_to_check:{single_file:{path:\"/etc/ssh/sshd_config\"}}"
      "    content_entry:{"
      "      match_type: ALL_MATCH_ANY_ORDER"
      "      match_criteria: {"
      "        filter_regex: \"LoginGraceTime .*\""
      "        expected_regex: \"LoginGraceTime (\\\\d+)\""
      "        group_criteria:{"
      "          group_index: 1"
      "          type: LESS_THAN"
      "          const: 61"
      "        }"
      "      }"
      "      match_criteria: {"
      "        filter_regex: \"LoginGraceTime .*\""
      "        expected_regex: \"LoginGraceTime (\\\\d+)\""
      "        group_criteria:{"
      "          group_index: 1"
      "          type: GREATER_THAN"
      "          const: 0"
      "        }"
      "      }"
      "    }"
      "  }"
      "}"
      "check_alternatives:{"
      "  file_checks:{"
      "    files_to_check:{single_file:{path:\"/etc/ssh/sshd_config\"}}"
      "    existence:{should_exist: false}"
      "  }"
      "}"
  }
}
benchmark_configs: {
  id: "ssh-access-limited-fallback"
  compliance_note: {
    version: { cpe_uri: "fallback" version: "1.0.0" }
    title: "Ensure SSH access is limited"
    description:
      "There are several options available to limit which users and group can "
      "access the system via SSH. It is recommended that at least one of the "
      "following options be leveraged:\n"
      "AllowUsers\n"
      "The AllowUsers variable gives the system administrator the option of "
      "allowing specific users to ssh into the system. The list consists of "
      "space separated user names. Numeric user IDs are not recognized with "
      "this variable. If a system administrator wants to restrict user access "
      "further by only allowing the allowed users to log in from a particular "
      "host, the entry can be specified in the form of user@host.\n"
      "AllowGroups\n"
      "The AllowGroups variable gives the system administrator the option of "
      "allowing specific groups of users to ssh into the system. The list "
      "consists of space separated group names. Numeric group IDs are not "
      "recognized with this variable.\n"
      "DenyUsers\n"
      "The DenyUsers variable gives the system administrator the option of "
      "denying specific users to ssh into the system. The list consists of "
      "space separated user names. Numeric user IDs are not recognized with "
      "this variable. If a system administrator wants to restrict user "
      "access further by specifically denying a user's access from a "
      "particular host, the entry can be specified in the form of user@host.\n"
      "DenyGroups\n"
      "The DenyGroups variable gives the system administrator the option of "
      "denying specific groups of users to ssh into the system. The list "
      "consists of space separated group names. Numeric group IDs are not "
      "recognized with this variable."
    rationale:
      "Restricting which users can remotely access the system via SSH will "
      "help ensure that only authorized users access the system."
    remediation:
      "Edit the /etc/ssh/sshd_config file to set one or more of the parameter "
      "as follows:\n"
      "```\n"
      "AllowUsers <userlist>\n"
      "AllowGroups <grouplist>\n"
      "DenyUsers <userlist>\n"
      "DenyGroups <grouplist>\n"
      "```\n"
    cis_benchmark: {
      profile_level: 1
      severity: LOW
    }
    scan_instructions:
      "check_alternatives:{"
      "  file_checks:{"
      "    files_to_check:{single_file:{path:\"/etc/ssh/sshd_config\"}}"
      "    content_entry:{"
      "      match_type: ALL_MATCH_ANY_ORDER"
      "      match_criteria: {"
      "        filter_regex: \"AllowUsers|AllowGroups|DenyUsers|DenyGroups .*\""
      "        expected_regex: \"AllowUsers|AllowGroups|DenyUsers|DenyGroups .*\""
      "      }"
      "    }"
      "  }"
      "}"
      "check_alternatives:{"
      "  file_checks:{"
      "    files_to_check:{single_file:{path:\"/etc/ssh/sshd_config\"}}"
      "    existence:{should_exist: false}"
      "  }"
      "}"
  }
}
benchmark_configs: {
  id: "ssh-warning-banner-configured-fallback"
  compliance_note: {
    version: { cpe_uri: "fallback" version: "1.0.0" }
    title: "Ensure SSH warning banner is configured"
    description:
      "The Banner parameter specifies a file whose contents must be sent to "
      "the remote user before authentication is permitted. By default, no "
      "banner is displayed."
    rationale:
      "Banners are used to warn connecting users of the particular site's "
      "policy regarding connection. Presenting a warning message prior to "
      "the normal user login may assist the prosecution of trespassers on "
      "the computer system."
    remediation:
      "Edit the /etc/ssh/sshd_config file to set the parameter as follows:\n"
      "```\n"
      "Banner /etc/issue.net\n"
      "```\n"
    cis_benchmark: {
      profile_level: 1
      severity: LOW
    }
    scan_instructions:
      "check_alternatives:{"
      "  file_checks:{"
      "    files_to_check:{single_file:{path:\"/etc/ssh/sshd_config\"}}"
      "    content_entry:{"
      "      match_type: ALL_MATCH_ANY_ORDER"
      "      match_criteria: {"
      "        filter_regex: \"Banner .*\""
      "        expected_regex: \"Banner /etc/issue.net\""
      "      }"
      "    }"
      "  }"
      "}"
      "check_alternatives:{"
      "  file_checks:{"
      "    files_to_check:{single_file:{path:\"/etc/ssh/sshd_config\"}}"
      "    existence:{should_exist: false}"
      "  }"
      "}"
  }
}
benchmark_configs: {
  id: "ssh-maxstartups-configured-fallback"
  compliance_note: {
    version: { cpe_uri: "fallback" version: "1.0.0" }
    title: "Ensure SSH MaxStartups is configured"
    description:
      "The MaxStartups parameter specifies the maximum number of concurrent "
      "unauthenticated connections to the SSH daemon."
    rationale:
      "To protect a system from denial of service due to a large number of "
      "pending authentication connection attempts, use the rate limiting "
      "function of MaxStartups to protect availability of sshd logins and "
      "prevent overwhelming the daemon."
    remediation:
      "Edit the /etc/ssh/sshd_config file to set the parameter as follows:\n"
      "```\n"
      "maxstartups 10:30:60\n"
      "```\n"
    cis_benchmark: {
      profile_level: 1
      severity: LOW
    }
    scan_instructions:
      "check_alternatives:{"
      "  file_checks:{"
      "    files_to_check:{single_file:{path:\"/etc/ssh/sshd_config\"}}"
      "    content_entry:{"
      "      match_type: ALL_MATCH_ANY_ORDER"
      "      match_criteria: {"
      "        filter_regex: \"maxstartups .*\""
      "        expected_regex: \"maxstartups 10:30:60\""
      "      }"
      "    }"
      "  }"
      "}"
      "check_alternatives:{"
      "  file_checks:{"
      "    files_to_check:{single_file:{path:\"/etc/ssh/sshd_config\"}}"
      "    existence:{should_exist: false}"
      "  }"
      "}"
  }
}
benchmark_configs: {
  id: "ssh-maxsessions-4-or-less-fallback"
  compliance_note: {
    version: { cpe_uri: "fallback" version: "1.0.0" }
    title: "Ensure SSH MaxSessions is set to 4 or less"
    description:
      "The MaxSessions parameter specifies the maximum number of open "
      "sessions permitted from a given connection."
    rationale:
      "To protect a system from denial of service due to a large number of "
      "concurrent sessions, use the rate limiting function of MaxSessions to "
      "protect availability of sshd logins and prevent overwhelming the daemon."
    remediation:
      "Edit the /etc/ssh/sshd_config file to set the parameter as follows:\n"
      "```\n"
      "MaxSessions 4\n"
      "```\n"
    cis_benchmark: {
      profile_level: 1
      severity: LOW
    }
    scan_instructions:
      "check_alternatives:{"
      "  file_checks:{"
      "    files_to_check:{single_file:{path:\"/etc/ssh/sshd_config\"}}"
      "    content_entry:{"
      "      match_type: ALL_MATCH_ANY_ORDER"
      "      match_criteria: {"
      "        filter_regex: \"MaxSessions .*\""
      "        expected_regex: \"MaxSessions (\\\\d+)\""
      "        group_criteria:{"
      "          group_index: 1"
      "          type: LESS_THAN"
      "          const: 5"
      "        }"
      "      }"
      "    }"
      "  }"
      "}"
      "check_alternatives:{"
      "  file_checks:{"
      "    files_to_check:{single_file:{path:\"/etc/ssh/sshd_config\"}}"
      "    existence:{should_exist: false}"
      "  }"
      "}"
  }
}
benchmark_configs: {
  id: "system-accounts-secured-fallback"
  compliance_note: {
    version: { cpe_uri: "fallback" version: "1.0.0" }
    title: "Ensure system accounts are secured"
    description:
      "There are a number of accounts provided with most distributions that are used to manage "
      "applications and are not intended to provide an interactive shell."
    rationale:
      "It is important to make sure that accounts that are not being used by regular users are "
      "prevented from being used to provide an interactive shell. By default, most distributions "
      "set the password field for these accounts to an invalid string, but it is also recommended "
      "that the shell field in the password file be set to the nologin shell. This prevents the "
      "account from potentially being used to run any commands."
    remediation:
      "Run the commands appropriate for your distribution:\n"
      "Set the shell for any accounts returned by the audit to nologin:\n"
      "```\n"
      "# usermod -s $(which nologin) <user>\n"
      "```\n"
      "Lock any non root accounts returned by the audit:\n"
      "```\n"
      "# usermod -L <user>\n"
      "```\n"
      "The following command will set all system accounts to a non login shell:\n"
      "```\n"
      "awk -F: '($1!=\"root\" && $1!=\"sync\" && $1!=\"shutdown\" && $1!=\"halt\" && $1!~/^\\+/ && $3<'\"$(awk '/^\\s*UID_MIN/{print $2}' /etc/login.defs)\"' && $7!=\"'\"$(which nologin)\"'\" && $7!=\"/bin/false\") {print $1}' /etc/passwd | while read user do usermod -s $(which nologin) $user done\n"
      "```\n"
      "The following command will automatically lock not root system accounts:\n"
      "```\n"
      "awk -F: '($1!=\"root\" && $1!~/^\\+/ && $3<'\"$(awk '/^\\s*UID_MIN/{print $2}' /etc/login.defs)\"') {print $1}' /etc/passwd | xargs -I '{}' passwd -S '{}' | awk '($2!=\"L\" && $2!=\"LK\") {print $1}' | while read user do usermod -L $user done\n"
      "```\n"
    cis_benchmark: {
      profile_level: 1
      severity: LOW
    }
    scan_instructions:
      "check_alternatives:{"
      "  file_checks:{"
      "    files_to_check:{single_file:{path:\"/etc/passwd\"}}"
      "    repeat_config:{type: FOR_EACH_SYSTEM_USER_WITH_LOGIN}"
      "    content_entry:{"
      "      match_type: ALL_MATCH_ANY_ORDER"
      "      match_criteria: {"
      "        filter_regex: \"$user:.*:.*:.*:.*:.*:.*\""
      #        Only the root, sync, shutdown and halt system users are allowed to have a login shell.
      "        expected_regex: \"(root|sync|shutdown|halt):.*:.*:.*:.*:.*:.*\""
      "      }"
      "    }"
      "    non_compliance_msg: \"there are system users with a login shell\""
      "    file_display_command: \"awk -F: '($1!=\\\"root\\\" && $1!=\\\"sync\\\" && $1!=\\\"shutdown\\\" && $1!=\\\"halt\\\" && $1!~/^\\\\+/ && $3<'\\\"$(awk '/^\\\\s*UID_MIN/{print $2}' /etc/login.defs)\\\"' && $7!=\\\"'\\\"$(which nologin)\\\"'\\\" && $7!=\\\"/bin/false\\\") {print}' /etc/passwd\""
      "  }"
      "  file_checks:{"
      "    files_to_check:{single_file:{path:\"/etc/shadow\"}}"
      "    repeat_config:{type: FOR_EACH_SYSTEM_USER_WITH_LOGIN}"
      "    content_entry:{"
      "      match_type: ALL_MATCH_ANY_ORDER"
      "      match_criteria: {"
      "        filter_regex: \"$user:.*:.*:.*:.*:.*:.*:.*:.*\""
      #        Only the root system user is allowed to have a non-locked account.
      "        expected_regex: \"(.*:.*[*!].*:.*:.*:.*:.*:.*:.*:.*)|(root:.*:.*:.*:.*:.*:.*:.*:.*)\""
      "      }"
      "    }"
      "    non_compliance_msg: \"there are non-locked system user accounts\""
      "    file_display_command: \"awk -F: '($1!=\\\"root\\\" && $1!~/^\\\\+/ && $3<'\\\"$(awk '/^\\\\s*UID_MIN/{print $2}' /etc/login.defs)\\\"') {print $1}' /etc/passwd | xargs -I '{}' passwd -S '{}' | awk '($2!=\\\"L\\\" && $2!=\\\"LK\\\") {print $1}'\""
      "  }"
      "}"
      "check_alternatives:{"
      "  file_checks:{"
      "    files_to_check:{single_file:{path:\"/etc/shadow\"}}"
      "    files_to_check:{single_file:{path:\"/etc/passwd\"}}"
      "    existence:{should_exist: false}"
      "  }"
      "}"
      # The check is not applicable if system users can't be determined.
      "check_alternatives:{"
      "  file_checks:{"
      "    files_to_check:{single_file:{path:\"/etc/login.defs\"}}"
      "    existence:{should_exist: false}"
      "  }"
      "}"
  }
}
benchmark_configs: {
  id: "default-group-for-root-account-is-gid-0-fallback"
  compliance_note: {
    version: { cpe_uri: "fallback" version: "1.0.0" }
    title: "Ensure default group for the root account is GID 0"
    description:
      "The usermod command can be used to specify which group the root user belongs\n"
      "to. This affects permissions of files that are created by the root user."
    rationale:
      "Using GID 0 for the root account helps prevent root -owned files from\n"
      "accidentally becoming accessible to non-privileged users."
    remediation:
      "Run the following command to set the root user default group to GID 0:\n"
      "```\n"
      "# usermod -g 0 root\n"
      "```\n"
    cis_benchmark: {
      profile_level: 1
      severity: LOW
    }
    scan_instructions:
      "check_alternatives:{"
      "  file_checks:{"
      "    files_to_check:{single_file:{path:\"/etc/passwd\"}}"
      "    content_entry:{"
      "      match_type: ALL_MATCH_ANY_ORDER"
      "      match_criteria: {"
      "        filter_regex: \"root:.*:.*:.*:.*:.*:.*\""
      "        expected_regex: \"root:.*:.*:0:.*:.*:.*\""
      "      }"
      "    }"
      "  }"
      "}"
      "check_alternatives:{"
      "  file_checks:{"
      "    files_to_check:{single_file:{path:\"/etc/passwd\"}}"
      "    existence:{should_exist: false}"
      "  }"
      "}"
  }
}
benchmark_configs: {
  id: "default-user-umask-027-or-more-restrictive-fallback"
  compliance_note: {
    version: { cpe_uri: "fallback" version: "1.0.0" }
    title: "Ensure default user umask is 027 or more restrictive"
    description:
      "The default umask determines the permissions of files created by "
      "users. The user creating the file has the discretion of making their "
      "files and directories readable by others via the chmod command. Users "
      "who wish to allow their files and directories to be readable by others "
      "by default may choose a different default umask by inserting the umask "
      "command into the standard shell configuration files (.profile, .bashrc"
      ", etc.) in their home directories."
    rationale:
      "Setting a very secure default value for umask ensures that users make "
      "a conscious choice about their file permissions. A default umask "
      "setting of 077 causes files and directories created by users to not be "
      "readable by any other user on the system. A umask of 027 would make "
      "files and directories readable by users in the same Unix group, while "
      "a umask of 022 would make files readable by every user on the system."
    remediation:
      "Edit the /etc/bashrc, /etc/profile and /etc/profile.d/*.sh files (and "
      "the appropriate files for any other shell supported on your system) and "
      "add or edit any umask parameters as follows:\n"
      "```\n"
      "umask 027\n"
      "```\n"
    cis_benchmark: {
      profile_level: 1
      severity: LOW
    }
    scan_instructions:
      "check_alternatives:{"
      "  file_checks:{"
      "    files_to_check:{single_file:{path:\"/etc/bash/bashrc\"}}"
      "    files_to_check:{single_file:{path:\"/etc/profile\"}}"
      "    files_to_check:{files_in_dir:{"
      "      dir_path:\"/etc/profile.d\""
      "      filename_regex: \".*\\\\.sh\""
      "      recursive: true"
      "    }}"
      "    content_entry:{"
      "      match_type: ALL_MATCH_ANY_ORDER"
      "      match_criteria: {"
      "        filter_regex: \"umask .*\""
      "        expected_regex: \"umask (\\\\d+)\""
      "        group_criteria: {"
      "          group_index: 1"
      "          type: NO_LESS_RESTRICTIVE_UMASK"
      "          const: 027"
      "        }"
      "      }"
      "    }"
      "  }"
      "}"
      "check_alternatives:{"
      "  file_checks:{"
      "    files_to_check:{single_file:{path:\"/etc/bash/bashrc\"}}"
      "    files_to_check:{single_file:{path:\"/etc/profile\"}}"
      "    files_to_check:{single_file:{path:\"/etc/profile.d\"}}"
      "    existence:{should_exist: false}"
      "  }"
      "}"
  }
}
benchmark_configs: {
  id: "etc-passwd-permissions-fallback"
  compliance_note: {
    version: { cpe_uri: "fallback" version: "1.0.0" }
    title: "Ensure permissions on /etc/passwd are configured"
    description:
      "The /etc/passwd file contains user account information that is used by many\n"
      "system utilities and therefore must be readable for these utilities to\n"
      "operate."
    rationale:
      "It is critical to ensure that the /etc/passwd file is protected from\n"
      "unauthorized write access. Although it is protected by default, the file\n"
      "permissions could be changed either inadvertently or through malicious\n"
      "actions."
    remediation:
      "Run the following command to set permissions on /etc/passwd:\n"
      "```\n"
      "# chown root:root /etc/passwd\n"
      "# chmod 644 /etc/passwd\n"
      "```\n"
    cis_benchmark: {
      profile_level: 1
      severity: LOW
    }
    scan_instructions:
      "check_alternatives:{"
      "  file_checks:{"
      "    files_to_check:{single_file:{path:\"/etc/passwd\"}}"
      "    permission:{"
      "      set_bits: 0444"
      "      clear_bits: 0133"
      "      bits_should_match: BOTH_SET_AND_CLEAR"
      "      user: {name: \"root\" should_own: true}"
      "      group: {name: \"root\" should_own: true}"
      "    }"
      "  }"
      "}"
      "check_alternatives:{"
      "  file_checks:{"
      "    files_to_check:{single_file:{path:\"/etc/passwd\"}}"
      "    existence:{should_exist: false}"
      "  }"
      "}"
  }
}
benchmark_configs: {
  id: "etc-shadow-permissions-fallback"
  compliance_note: {
    version: { cpe_uri: "fallback" version: "1.0.0" }
    title: "Ensure permissions on /etc/shadow are configured"
    description:
      "The /etc/shadow file is used to store the information about user accounts that\n"
      "is critical to the security of those accounts, such as the hashed password and\n"
      "other security information."
    rationale:
      "If attackers can gain read access to the /etc/shadow file, they can easily run\n"
      "a password cracking program against the hashed password to break it. Other\n"
      "security information that is stored in the /etc/shadow file (such as\n"
      "expiration) could also be useful to subvert the user accounts."
    remediation:
      "Run the one of the following chown commands as appropriate and the chmod to\n"
      "set permissions on /etc/shadow:\n"
      "```\n"
      "# chown root:root /etc/shadow\n"
      "# chmod o-rwx,g-wx /etc/shadow\n"
      "```\n"
    cis_benchmark: {
      profile_level: 1
      severity: LOW
    }
    scan_instructions:
      "check_alternatives:{"
      "  file_checks:{"
      "    files_to_check:{single_file:{path:\"/etc/shadow\"}}"
      "    permission:{"
      "      clear_bits: 0137"
      "      user: {name: \"root\" should_own: true}"
      "      group: {name: \"root\" should_own: true}"
      "    }"
      "  }"
      "}"
      "check_alternatives:{"
      "  file_checks:{"
      "    files_to_check:{single_file:{path:\"/etc/shadow\"}}"
      "    permission:{"
      "      clear_bits: 0137"
      "      user: {name: \"root\" should_own: true}"
      "      group: {name: \"shadow\" should_own: true}"
      "    }"
      "  }"
      "}"
      "check_alternatives:{"
      "  file_checks:{"
      "    files_to_check:{single_file:{path:\"/etc/shadow\"}}"
      "    existence:{should_exist: false}"
      "  }"
      "}"
  }
}
benchmark_configs: {
  id: "etc-group-permissions-fallback"
  compliance_note: {
    version: { cpe_uri: "fallback" version: "1.0.0" }
    title: "Ensure permissions on /etc/group are configured"
    description:
      "The /etc/group file contains a list of all the valid groups defined in the\n"
      "system. The command below allows read/write access for root and read access\n"
      "for everyone else."
    rationale:
      "The /etc/group file needs to be protected from unauthorized changes by non\n"
      "privileged users, but needs to be readable as this information is used with\n"
      "many non-privileged programs."
    remediation:
      "Run the following command to set permissions on /etc/group:\n"
      "```\n"
      "# chown root:root /etc/group\n"
      "# chmod 644 /etc/group\n"
      "```\n"
    cis_benchmark: {
      profile_level: 1
      severity: LOW
    }
    scan_instructions:
      "check_alternatives:{"
      "  file_checks:{"
      "    files_to_check:{single_file:{path:\"/etc/group\"}}"
      "    permission:{"
      "      set_bits: 0444"
      "      clear_bits: 0133"
      "      bits_should_match: BOTH_SET_AND_CLEAR"
      "      user: {name: \"root\" should_own: true}"
      "      group: {name: \"root\" should_own: true}"
      "    }"
      "  }"
      "}"
      "check_alternatives:{"
      "  file_checks:{"
      "    files_to_check:{single_file:{path:\"/etc/group\"}}"
      "    existence:{should_exist: false}"
      "  }"
      "}"
  }
}
benchmark_configs: {
  id: "etc-gshadow-permissions-fallback"
  compliance_note: {
    version: { cpe_uri: "fallback" version: "1.0.0" }
    title: "Ensure permissions on /etc/gshadow are configured"
    description:
      "The /etc/gshadow file is used to store the information about groups that is\n"
      "critical to the security of those accounts, such as the hashed password and\n"
      "other security information."
    rationale:
      "If attackers can gain read access to the /etc/gshadow file, they can easily\n"
      "run a password cracking program against the hashed password to break it. Other\n"
      "security information that is stored in the /etc/gshadow file (such as group\n"
      "administrators) could also be useful to subvert the group."
    remediation:
      "Run the one of the following chown commands as appropriate and the chmod to\n"
      "set permissions on /etc/gshadow:\n"
      "```\n"
      "# chown root:root /etc/gshadow\n"
      "# chown root:shadow /etc/gshadow\n"
      "# chmod o-rwx,g-rw /etc/gshadow\n"
      "```\n"
    cis_benchmark: {
      profile_level: 1
      severity: LOW
    }
    scan_instructions:
      "check_alternatives:{"
      "  file_checks:{"
      "    files_to_check:{single_file:{path:\"/etc/gshadow\"}}"
      "    existence:{should_exist:false}"
      "  }"
      "}"
      "check_alternatives:{"
      "  file_checks:{"
      "    files_to_check:{single_file:{path:\"/etc/gshadow\"}}"
      "    permission:{"
      "      clear_bits: 0137"
      "      user: {name: \"root\" should_own: true}"
      "      group: {name: \"root\" should_own: true}"
      "    }"
      "  }"
      "}"
      "check_alternatives:{"
      "  file_checks:{"
      "    files_to_check:{single_file:{path:\"/etc/gshadow\"}}"
      "    permission:{"
      "      clear_bits: 0137"
      "      user: {name: \"root\" should_own: true}"
      "      group: {name: \"shadow\" should_own: true}"
      "    }"
      "  }"
      "}"
      "check_alternatives:{"
      "  file_checks:{"
      "    files_to_check:{single_file:{path:\"/etc/gshadow\"}}"
      "    existence:{should_exist: false}"
      "  }"
      "}"
  }
}
benchmark_configs: {
  id: "etc-passwd-dash-permissions-fallback"
  compliance_note: {
    version: { cpe_uri: "fallback" version: "1.0.0" }
    title: "Ensure permissions on /etc/passwd- are configured"
    description: "The /etc/passwd- file contains backup user account information."
    rationale:
      "It is critical to ensure that the /etc/passwd- file is protected from "
      "unauthorized access. Although it is protected by default, the file "
      "permissions could be changed either inadvertently or through malicious "
      "actions."
    remediation:
      "Run the following command to set permissions on /etc/passwd-:\n"
      "```\n"
      "# chown root:root /etc/passwd-\n"
      "# chmod u-x,go-rwx /etc/passwd-\n"
      "```\n"
    cis_benchmark: {
      profile_level: 1
      severity: LOW
    }
    scan_instructions:
      "check_alternatives:{"
      "  file_checks:{"
      "    files_to_check:{single_file:{path:\"/etc/passwd-\"}}"
      "    existence:{should_exist:false}"
      "  }"
      "}"
      "check_alternatives:{"
      "  file_checks:{"
      "    files_to_check:{single_file:{path:\"/etc/passwd-\"}}"
      "    permission:{"
      "      clear_bits: 0177"
      "      user: {name: \"root\" should_own: true}"
      "      group: {name: \"root\" should_own: true}"
      "    }"
      "  }"
      "}"
      "check_alternatives:{"
      "  file_checks:{"
      "    files_to_check:{single_file:{path:\"/etc/passwd-\"}}"
      "    existence:{should_exist: false}"
      "  }"
      "}"
  }
}
benchmark_configs: {
  id: "etc-shadow-dash-permissions-fallback"
  compliance_note: {
    version: { cpe_uri: "fallback" version: "1.0.0" }
    title: "Ensure permissions on /etc/shadow- are configured"
    description:
      "The /etc/shadow- file is used to store backup information about user "
      "accounts that is critical to the security of those accounts, such as "
      "the hashed password and other security information."
    rationale:
      "It is critical to ensure that the /etc/shadow- file is protected from "
      "unauthorized access. Although it is protected by default, the file "
      "permissions could be changed either inadvertently or through malicious "
      "actions."
    remediation:
      "Run the one of the following chown commands as appropriate and the "
      "chmod to set permissions on /etc/shadow- :\n"
      "```\n"
      "# chown root:root /etc/shadow-\n"
      "# chown root:shadow /etc/shadow-\n"
      "# chmod o-rwx,g-rw /etc/shadow-\n"
      "```\n"
    cis_benchmark: {
      profile_level: 1
      severity: LOW
    }
    scan_instructions:
      "check_alternatives:{"
      "  file_checks:{"
      "    files_to_check:{single_file:{path:\"/etc/shadow-\"}}"
      "    existence:{should_exist:false}"
      "  }"
      "}"
      "check_alternatives:{"
      "  file_checks:{"
      "    files_to_check:{single_file:{path:\"/etc/shadow-\"}}"
      "    permission:{"
      "      clear_bits: 0137"
      "      user: {name: \"root\" should_own: true}"
      "      group: {name: \"root\" should_own: true}"
      "    }"
      "  }"
      "}"
      "check_alternatives:{"
      "  file_checks:{"
      "    files_to_check:{single_file:{path:\"/etc/shadow-\"}}"
      "    permission:{"
      "      clear_bits: 0137"
      "      user: {name: \"root\" should_own: true}"
      "      group: {name: \"shadow\" should_own: true}"
      "    }"
      "  }"
      "}"
      "check_alternatives:{"
      "  file_checks:{"
      "    files_to_check:{single_file:{path:\"/etc/shadow-\"}}"
      "    existence:{should_exist: false}"
      "  }"
      "}"
  }
}
benchmark_configs: {
  id: "etc-group-dash-permissions-fallback"
  compliance_note: {
    version: { cpe_uri: "fallback" version: "1.0.0" }
    title: "Ensure permissions on /etc/group- are configured"
    description:
      "The /etc/group- file contains a backup list of all the valid groups defined in\n"
      "the system."
    rationale:
      "It is critical to ensure that the /etc/group- file is protected from\n"
      "unauthorized access. Although it is protected by default, the file permissions\n"
      "could be changed either inadvertently or through malicious actions."
    remediation:
      "Run the following command to set permissions on /etc/group-:\n"
      "```\n"
      "# chown root:root /etc/group-\n"
      "# chmod u-x,go-wx /etc/group-\n"
      "```\n"
    cis_benchmark: {
      profile_level: 1
      severity: LOW
    }
    scan_instructions:
      "check_alternatives:{"
      "  file_checks:{"
      "    files_to_check:{single_file:{path:\"/etc/group-\"}}"
      "    permission:{"
      "      clear_bits: 0133"
      "      user: {name: \"root\" should_own: true}"
      "      group: {name: \"root\" should_own: true}"
      "    }"
      "  }"
      "}"
      "check_alternatives:{"
      "  file_checks:{"
      "    files_to_check:{single_file:{path:\"/etc/group-\"}}"
      "    existence:{should_exist: false}"
      "  }"
      "}"
  }
}
benchmark_configs: {
  id: "etc-gshadow-dash-permissions-fallback"
  compliance_note: {
    version: { cpe_uri: "fallback" version: "1.0.0" }
    title: "Ensure permissions on /etc/gshadow- are configured"
    description:
      "The /etc/gshadow- file is used to store backup information about "
      "groups that is critical to the security of those accounts, such as "
      "the hashed password and other security information."
    rationale:
      "It is critical to ensure that the /etc/gshadow- file is protected from "
      "unauthorized access. Although it is protected by default, the file "
      "permissions could be changed either inadvertently or through malicious "
      "actions."
    remediation:
      "Run the one of the following chown commands as appropriate and the "
      "chmod to set permissions on /etc/gshadow-:\n"
      "```\n"
      "# chown root:root /etc/gshadow-\n"
      "# chown root:shadow /etc/gshadow-\n"
      "# chmod o-rwx,g-rw /etc/gshadow-\n"
      "```\n"
    cis_benchmark: {
      profile_level: 1
      severity: LOW
    }
    scan_instructions:
      "check_alternatives:{"
      "  file_checks:{"
      "    files_to_check:{single_file:{path:\"/etc/gshadow-\"}}"
      "    existence:{should_exist:false}"
      "  }"
      "}"
      "check_alternatives:{"
      "  file_checks:{"
      "    files_to_check:{single_file:{path:\"/etc/gshadow-\"}}"
      "    permission:{"
      "      clear_bits: 0137"
      "      user: {name: \"root\" should_own: true}"
      "      group: {name: \"root\" should_own: true}"
      "    }"
      "  }"
      "}"
      "check_alternatives:{"
      "  file_checks:{"
      "    files_to_check:{single_file:{path:\"/etc/gshadow-\"}}"
      "    permission:{"
      "      clear_bits: 0137"
      "      user: {name: \"root\" should_own: true}"
      "      group: {name: \"shadow\" should_own: true}"
      "    }"
      "  }"
      "}"
      "check_alternatives:{"
      "  file_checks:{"
      "    files_to_check:{single_file:{path:\"/etc/gshadow-\"}}"
      "    existence:{should_exist: false}"
      "  }"
      "}"
  }
}
benchmark_configs: {
  id: "no-world-writable-files-fallback"
  compliance_note: {
    version: { cpe_uri: "fallback" version: "1.0.0" }
    title: "Ensure no world writable files exist"
    description:
      "Unix-based systems support variable settings to control access to "
      "files. World writable files are the least secure. See the chmod(2) "
      "man page for more information."
    rationale:
      "Data in world-writable files can be modified and compromised by any "
      "user on the system. World writable files may also indicate an "
      "incorrectly written script or program that could potentially be the "
      "cause of a larger compromise to the system's integrity."
    remediation:
      "Removing write access for the \"other\" category (chmod o-w <filename>)"
      " is advisable, but always consult relevant vendor documentation to "
      "avoid breaking any application dependencies on a given file. If the "
      "permissions of a file can't be restricted, add it to the CIS scanner's "
      "exclusion list."
    cis_benchmark: {
      profile_level: 1
      severity: LOW
    }
    scan_instructions:
      "check_alternatives:{"
      "  file_checks:{"
      "    files_to_check:{files_in_dir:{"
      "      dir_path:\"/\""
      "      recursive: true"
      "      files_only: true"
      "      skip_symlinks: true"
      "      opt_out_path_regexes: \"/proc\""
      "      opt_out_path_regexes: \"/sys\""
      "      opt_out_path_regexes: \"/dev\""
      "    }}"
      "    permission:{clear_bits: 0002}"
      "    non_compliance_msg: \"there are world-writable files on the filesystem\""
      "    file_display_command: \"df --local -P | awk '{if (NR!=1) print $6}' | xargs -I '{}' find '{}' -xdev -type f -perm -0002\""
      "  }"
      "}"
  }
}
benchmark_configs: {
  id: "no-unowned-files-or-dirs-fallback"
  compliance_note: {
    version: { cpe_uri: "fallback" version: "1.0.0" }
    title: "Ensure no unowned files or directories exist"
    description:
      "Sometimes when administrators delete users from the password file they "
      "neglect to remove all files owned by those users from the system."
    rationale:
      "A new user who is assigned the deleted user's user ID or group ID may "
      "then end up \"owning\" these files, and thus have more access on the "
      "system than was intended."
    remediation:
      "Locate files that are owned by users or groups not listed in the "
      "system configuration files, and reset the ownership of these files "
      "to some active user on the system as appropriate."
    cis_benchmark: {
      profile_level: 1
      severity: LOW
    }
    scan_instructions:
      "check_alternatives:{"
      "  file_checks:{"
      "    files_to_check:{files_in_dir:{"
      "      dir_path:\"/\""
      "      recursive: true"
      "      opt_out_path_regexes: \"/proc\""
      "      opt_out_path_regexes: \"/sys\""
      "      opt_out_path_regexes: \"/dev\""
      "    }}"
      "    permission:{user:{name: \"\" should_own: false}}"
      "    non_compliance_msg: \"there are unowned files or directories on the filesystem\""
      "    file_display_command: \"df --local -P | awk {'if (NR!=1) print $6'} | xargs -I '{}' find '{}' -xdev -nouser\""
      "  }"
      "}"
  }
}
benchmark_configs: {
  id: "no-ungrouped-files-or-dirs-fallback"
  compliance_note: {
    version: { cpe_uri: "fallback" version: "1.0.0" }
    title: "Ensure no ungrouped files or directories exist"
    description:
      "Sometimes when administrators delete users or groups from the system "
      "they neglect to remove all files owned by those users or groups."
    rationale:
      "A new user who is assigned the deleted user's user ID or group ID may "
      "then end up \"owning\" these files, and thus have more access on the "
      "system than was intended."
    remediation:
      "Locate files that are owned by users or groups not listed in the "
      "system configuration files, and reset the ownership of these files to "
      "some active user on the system as appropriate."
    cis_benchmark: {
      profile_level: 1
      severity: LOW
    }
    scan_instructions:
      "check_alternatives:{"
      "  file_checks:{"
      "    files_to_check:{files_in_dir:{"
      "      dir_path:\"/\""
      "      recursive: true"
      "      opt_out_path_regexes: \"/proc\""
      "      opt_out_path_regexes: \"/sys\""
      "      opt_out_path_regexes: \"/dev\""
      "    }}"
      "    permission:{group:{name: \"\" should_own: false}}"
      "    non_compliance_msg: \"there are ungrouped files or directories on the filesystem\""
      "    file_display_command: \"df --local -P | awk '{if (NR!=1) print $6}' | xargs -I '{}' find '{}' -xdev -nogroup\""
      "  }"
      "}"
  }
}
benchmark_configs: {
  id: "audit-suid-execs-fallback"
  compliance_note: {
    version: { cpe_uri: "fallback" version: "1.0.0" }
    title: "Audit SUID executables"
    description:
      "The owner of a file can set the file's permissions to run with the "
      "owner's or group's permissions, even if the user running the program "
      "is not the owner or a member of the group. The most common reason for a "
      "SUID program is to enable users to perform functions (such as changing "
      "their password) that require root privileges."
    rationale:
      "There are valid reasons for SUID programs, but it is important to "
      "identify and review such programs to ensure they are legitimate."
    remediation:
      "Ensure that no rogue SUID programs have been introduced into the "
      "system. Review the files returned by the display_command "
      "confirm the integrity of these binaries, then add them to the "
      "CIS scanner's exclusion list."
    cis_benchmark: {
      profile_level: 1
      severity: LOW
    }
    scan_instructions:
      "check_alternatives:{"
      "  file_checks:{"
      "    files_to_check:{files_in_dir:{"
      "      dir_path:\"/\""
      "      recursive: true"
      "      files_only: true"
      "      skip_symlinks: true"
      "      opt_out_path_regexes: \"/proc\""
      "      opt_out_path_regexes: \"/sys\""
      "      opt_out_path_regexes: \"/dev\""
      "    }}"
      "    permission:{ clear_bits: 04000 }"
      "    non_compliance_msg: \"some files on the filesystem have the SUID bit set\""
      "    file_display_command: \"df --local -P | awk '{if (NR!=1) print $6}' | xargs -I '{}' find '{}' -xdev -type f -perm -4000\""
      "  }"
      "}"
  }
}
benchmark_configs: {
  id: "audit-sgid-execs-fallback"
  compliance_note: {
    version: { cpe_uri: "fallback" version: "1.0.0" }
    title: "Audit SGID executables"
    description:
      "The owner of a file can set the file's permissions to run with the "
      "owner's or group's permissions, even if the user running the program is "
      "not the owner or a member of the group. The most common reason for a "
      "SGID program is to enable users to perform functions (such as changing "
      "their password) that require root privileges."
    rationale:
      "There are valid reasons for SGID programs, but it is important to "
      "identify and review such programs to ensure they are legitimate. "
      "Review the files returned by the action in the audit section and "
      "check to see if system binaries have a different md5 checksum than "
      "what from the package. This is an indication that the binary may have "
      "been replaced."
    remediation:
      "Ensure that no rogue SGID programs have been introduced into the "
      "system. Review the files returned by the display_command "
      "confirm the integrity of these binaries, then add them to the "
      "CIS scanner's exclusion list."
    cis_benchmark: {
      profile_level: 1
      severity: LOW
    }
    scan_instructions:
      "check_alternatives:{"
      "  file_checks:{"
      "    files_to_check:{files_in_dir:{"
      "      dir_path:\"/\""
      "      recursive: true"
      "      files_only: true"
      "      skip_symlinks: true"
      "      opt_out_path_regexes: \"/proc\""
      "      opt_out_path_regexes: \"/sys\""
      "      opt_out_path_regexes: \"/dev\""
      "    }}"
      "    permission:{ clear_bits: 02000 }"
      "    non_compliance_msg: \"some files on the filesystem have the SGID bit set\""
      "    file_display_command: \"df --local -P | awk '{if (NR!=1) print $6}' | xargs -I '{}' find '{}' -xdev -type f -perm -2000\""
      "  }"
      "}"
  }
}
benchmark_configs: {
  id: "password-fields-not-empty-fallback"
  compliance_note: {
    version: { cpe_uri: "fallback" version: "1.0.0" }
    title: "Ensure password fields are not empty"
    description:
      "An account with an empty password field means that anybody may log in as that\n"
      "user without providing a password."
    rationale:
      "All accounts must have passwords or be locked to prevent the account from\n"
      "being used by an unauthorized user."
    remediation:
      "If any accounts in the /etc/shadow file do not have a password, run the\n"
      "following command to lock the account until it can be determined why it does\n"
      "not have a password:\n"
      "```\n"
      "# passwd -l <username>\n"
      "```\n"
      "Also, check to see if the account is logged in and investigate what it is\n"
      "being used for to determine if it needs to be forced off."
    cis_benchmark: {
      profile_level: 1
      severity: LOW
    }
    scan_instructions:
      "check_alternatives:{"
      "  file_checks:{"
      "    files_to_check:{single_file:{path:\"/etc/shadow\"}}"
      "    content_entry:{"
      "      match_type: ALL_MATCH_ANY_ORDER"
      "      match_criteria: {"
      "        filter_regex: \".*:.*:.*:.*:.*:.*:.*:.*:.*\""
      "        expected_regex: \".*:.+:.*:.*:.*:.*:.*:.*:.*\""
      "      }"
      "    }"
      "    non_compliance_msg: \"there are empty password fields in /etc/shadow\""
      "    file_display_command: \"awk -F: '($2 == \\\"\\\" ) { print $1 \\\" does not have a password \\\"}' /etc/shadow\""
      "  }"
      "}"
      "check_alternatives:{"
      "  file_checks:{"
      "    files_to_check:{single_file:{path:\"/etc/shadow\"}}"
      "    existence:{should_exist: false}"
      "  }"
      "}"
  }
}
benchmark_configs: {
  id: "passwd-no-legacy-plus-entries-fallback"
  compliance_note: {
    version: { cpe_uri: "fallback" version: "1.0.0" }
    title: "Ensure no legacy \"+\" entries exist in /etc/passwd"
    description:
      "The character + in various files used to be markers for systems to insert data\n"
      "from NIS maps at a certain point in a system configuration file. These entries\n"
      "are no longer required on most systems, but may exist in files that have been\n"
      "imported from other platforms."
    rationale:
      "These entries may provide an avenue for attackers to gain privileged access on\n"
      "the system."
    remediation: "Remove any legacy '+' entries from /etc/passwd if they exist."
    cis_benchmark: {
      profile_level: 1
      severity: LOW
    }
    scan_instructions:
      "check_alternatives:{"
      "  file_checks:{"
      "    files_to_check:{single_file:{path:\"/etc/passwd\"}}"
      "    content_entry:{"
      "      match_type: NONE_MATCH"
      "      match_criteria: {"
      "        filter_regex: \"\\\\+:.*\""
      "        expected_regex: \"\\\\+:.*\""
      "      }"
      "    }"
      "    non_compliance_msg: \"there are legacy '+' entries in /etc/passwd\""
      "    file_display_command: \"grep '^\\\\+:' /etc/passwd\""
      "  }"
      "}"
      "check_alternatives:{"
      "  file_checks:{"
      "    files_to_check:{single_file:{path:\"/etc/passwd\"}}"
      "    existence:{should_exist: false}"
      "  }"
      "}"
  }
}
benchmark_configs: {
  id: "shadow-no-legacy-plus-entries-fallback"
  compliance_note: {
    version: { cpe_uri: "fallback" version: "1.0.0" }
    title: "Ensure no legacy \"+\" entries exist in /etc/shadow"
    description:
      "The character + in various files used to be markers for systems to insert data\n"
      "from NIS maps at a certain point in a system configuration file. These entries\n"
      "are no longer required on most systems, but may exist in files that have been\n"
      "imported from other platforms."
    rationale: "These entries may provide an avenue for attackers to gain privileged access on the system."
    remediation: "Remove any legacy '+' entries from /etc/shadow if they exist."
    cis_benchmark: {
      profile_level: 1
      severity: LOW
    }
    scan_instructions:
      "check_alternatives:{"
      "  file_checks:{"
      "    files_to_check:{single_file:{path:\"/etc/shadow\"}}"
      "    content_entry:{"
      "      match_type: NONE_MATCH"
      "      match_criteria: {"
      "        filter_regex: \"\\\\+:.*\""
      "        expected_regex: \"\\\\+:.*\""
      "      }"
      "    }"
      "    non_compliance_msg: \"there are legacy '+' entries in /etc/shadow\""
      "    file_display_command: \"grep '^\\\\+:' /etc/shadow\""
      "  }"
      "}"
      "check_alternatives:{"
      "  file_checks:{"
      "    files_to_check:{single_file:{path:\"/etc/shadow\"}}"
      "    existence:{should_exist: false}"
      "  }"
      "}"
  }
}
benchmark_configs: {
  id: "group-no-legacy-plus-entries-fallback"
  compliance_note: {
    version: { cpe_uri: "fallback" version: "1.0.0" }
    title: "Ensure no legacy \"+\" entries exist in /etc/group"
    description:
      "The character + in various files used to be markers for systems to insert data\n"
      "from NIS maps at a certain point in a system configuration file. These entries\n"
      "are no longer required on most systems, but may exist in files that have been\n"
      "imported from other platforms."
    rationale:
      "These entries may provide an avenue for attackers to gain privileged access on\n"
      "the system."
    remediation: "Remove any legacy '+' entries from /etc/group if they exist."
    cis_benchmark: {
      profile_level: 1
      severity: LOW
    }
    scan_instructions:
      "check_alternatives:{"
      "  file_checks:{"
      "    files_to_check:{single_file:{path:\"/etc/group\"}}"
      "    content_entry:{"
      "      match_type: NONE_MATCH"
      "      match_criteria: {"
      "        filter_regex: \"\\\\+:.*\""
      "        expected_regex: \"\\\\+:.*\""
      "      }"
      "    }"
      "    non_compliance_msg: \"there are legacy '+' entries in /etc/group\""
      "    file_display_command: \"grep '^\\\\+:' /etc/group\""
      "  }"
      "}"
      "check_alternatives:{"
      "  file_checks:{"
      "    files_to_check:{single_file:{path:\"/etc/group\"}}"
      "    existence:{should_exist: false}"
      "  }"
      "}"
  }
}
benchmark_configs: {
  id: "root-is-only-uid-0-account-fallback"
  compliance_note: {
    version: { cpe_uri: "fallback" version: "1.0.0" }
    title: "Ensure root is the only UID 0 account"
    description: "Any account with UID 0 has superuser privileges on the system."
    rationale:
      "This access must be limited to only the default root account and only from the\n"
      "system console. Administrative access must be through an unprivileged account\n"
      "using an approved mechanism as noted in Item 5.6 Ensure access to the su\n"
      "command is restricted."
    remediation: "Remove any users other than root with UID 0 or assign them a new UID if appropriate"
    cis_benchmark: {
      profile_level: 1
      severity: LOW
    }
    scan_instructions:
      "check_alternatives:{"
      "  file_checks:{"
      "    files_to_check:{single_file:{path:\"/etc/passwd\"}}"
      "    content_entry:{"
      "      match_type: ALL_MATCH_ANY_ORDER"
      "      match_criteria: {"
      "        filter_regex: \".*:.*:0:.*:.*:.*:.*\""
      "        expected_regex: \"root:.*:0:.*:.*:.*:.*\""
      "      }"
      "    }"
      "    non_compliance_msg: \"there's a non-root user with uid 0 in /etc/passwd\""
      "    file_display_command: \"awk -F: '($3 == 0) { print $1 }' /etc/passwd\""
      "  }"
      "}"
      "check_alternatives:{"
      "  file_checks:{"
      "    files_to_check:{single_file:{path:\"/etc/passwd\"}}"
      "    existence:{should_exist: false}"
      "  }"
      "}"
  }
}
benchmark_configs: {
  id: "home-dirs-exist-fallback"
  compliance_note: {
    version: { cpe_uri: "fallback" version: "1.0.0" }
    title: "Ensure all users' home directories exist"
    description:
      "Users can be defined in /etc/passwd without a home directory or with a "
      "home directory that does not actually exist"
    rationale:
      "If the user's home directory does not exist or is unassigned, the user "
      "will be placed in \"/\" and will not be able to write any files or have "
      "local environment variables set."
    remediation:
      "If any users' home directories do not exist, create them and make sure "
      "the respective user owns the directory. Users without an assigned home "
      "directory should be removed or assigned a home directory as appropriate."
    cis_benchmark: {
      profile_level: 1
      severity: LOW
    }
    scan_instructions:
      "check_alternatives:{"
      "  file_checks:{"
      "    files_to_check:{single_file:{path:\"$home\"}}"
      "    existence:{should_exist: true}"
      "    repeat_config:{"
      "      type: FOR_EACH_USER_WITH_LOGIN"
      "      opt_out: {wildcard: \"$user\", value: \"halt\"}"
      "      opt_out: {wildcard: \"$user\", value: \"sync\"}"
      "      opt_out: {wildcard: \"$user\", value: \"shutdown\"}"
      "    }"
      "    non_compliance_msg: \"a user doesn't own a home directory\""
      "    file_display_command:"
      "      \"#!/bin/bash\\n\""
      "      \"grep -E -v '^(halt|sync|shutdown)' /etc/passwd | awk -F: '($7 != \\\"'\\\"$(which nologin)\\\"'\\\" && $7 != \\\"/bin/false\\\") { print $1 \\\" \\\" $6 }' | while read -r user dir; do\\n\""
      "      \"  if [ ! -d \\\"$dir\\\" ]; then\\n\""
      "      \"    echo \\\"The home directory ($dir) of user $user does not exist.\\\"\\n\""
      "      \"  fi\\n\""
      "      \"done\""
      "  }"
      "}"
      "check_alternatives:{"
      "  file_checks:{"
      "    files_to_check:{single_file:{path:\"/home\"}}"
      "    existence:{should_exist: false}"
      "  }"
      "}"
  }
}
benchmark_configs: {
  id: "home-dirs-750-or-more-restrictive-fallback"
  compliance_note: {
    version: { cpe_uri: "fallback" version: "1.0.0" }
    title: "Ensure users' home directories permissions are 750 or more restrictive"
    description:
      "While the system administrator can establish secure permissions for "
      "users' home directories, the users can easily override these."
    rationale:
      "Group or world-writable user home directories may enable malicious "
      "users to steal or modify other users' data or to gain another user's "
      "system privileges."
    remediation:
      "Making global modifications to user home directories without alerting "
      "the user community can result in unexpected outages and unhappy users. "
      "Therefore, it is recommended that a monitoring policy be established to "
      "report user file permissions and determine the action to be taken in "
      "accordance with site policy"
    cis_benchmark: {
      profile_level: 1
      severity: LOW
    }
    scan_instructions:
      "check_alternatives:{"
      "  file_checks:{"
      "    files_to_check:{single_file:{path:\"$home\"}}"
      "    repeat_config:{"
      "      type: FOR_EACH_USER_WITH_LOGIN"
      "      opt_out: {wildcard: \"$user\", value: \"halt\"}"
      "      opt_out: {wildcard: \"$user\", value: \"sync\"}"
      "      opt_out: {wildcard: \"$user\", value: \"shutdown\"}"
      "    }"
      "    non_compliance_msg: \"a user whose home directory is more permissive than 750\""
      "    file_display_command:"
      "      \"#!/bin/bash\\n\""
      "      \"grep -E -v '^(halt|sync|shutdown)' /etc/passwd | awk -F: '($7 != \\\"'\\\"$(which nologin)\\\"'\\\" && $7 != \\\"/bin/false\\\") { print $1 \\\" \\\" $6 }' | while read -r user dir; do\\n\""
      "      \"  if [ ! -d \\\"$dir\\\" ]; then\\n\""
      "      \"    echo \\\"The home directory ($dir) of user $user does not exist.\\\"\\n\""
      "      \"  else\\n\""
      "      \"    dirperm=$(ls -ld $dir | cut -f1 -d\\\" \\\")\\n\""
      "      \"    if [ $(echo $dirperm | cut -c6) != \\\"-\\\" ]; then\\n\""
      "      \"      echo \\\"Group Write permission set on the home directory ($dir) of user $user\\\"\\n\""
      "      \"    fi\\n\""
      "      \"    if [ $(echo $dirperm | cut -c8) != \\\"-\\\" ]; then\\n\""
      "      \"      echo \\\"Other Read permission set on the home directory ($dir) of user $user\\\"\\n\""
      "      \"    fi\\n\""
      "      \"    if [ $(echo $dirperm | cut -c9) != \\\"-\\\" ]; then\\n\""
      "      \"      echo \\\"Other Write permission set on the home directory ($dir) of user $user\\\"\\n\""
      "      \"    fi\\n\""
      "      \"    if [ $(echo $dirperm | cut -c10) != \\\"-\\\" ]; then\\n\""
      "      \"      echo \\\"Other Execute permission set on the home directory ($dir) of user $user\\\"\\n\""
      "      \"    fi\\n\""
      "      \"  fi\\n\""
      "      \"done\""
      "  }"
      "}"
      "check_alternatives:{"
      "  file_checks:{"
      "    files_to_check:{single_file:{path:\"/home\"}}"
      "    existence:{should_exist: false}"
      "  }"
      "}"
  }
}
benchmark_configs: {
  id: "users-own-home-dirs-fallback"
  compliance_note: {
    version: { cpe_uri: "fallback" version: "1.0.0" }
    title: "Ensure users own their home directories"
    description:
      "The user home directory is space defined for the particular user to "
      "set local environment variables and to store personal files."
    rationale:
      "Since the user is accountable for files stored in the user home "
      "directory, the user must be the owner of the directory"
    remediation:
      "Change the ownership of any home directories that are not owned by the "
      "defined user to the correct user."
    cis_benchmark: {
      profile_level: 1
      severity: LOW
    }
    scan_instructions:
      "check_alternatives:{"
      "  file_checks:{"
      "    files_to_check:{single_file:{path:\"$home\"}}"
      "    permission:{user: {name: \"$user\" should_own: true}}"
      "    repeat_config:{"
      "      type: FOR_EACH_USER_WITH_LOGIN"
      "      opt_out: {wildcard: \"$user\", value: \"halt\"}"
      "      opt_out: {wildcard: \"$user\", value: \"sync\"}"
      "      opt_out: {wildcard: \"$user\", value: \"shutdown\"}"
      "    }"
      "  }"
      "}"
      "check_alternatives:{"
      "  file_checks:{"
      "    files_to_check:{single_file:{path:\"/home\"}}"
      "    existence:{should_exist: false}"
      "  }"
      "}"
  }
}
benchmark_configs: {
  id: "dot-files-not-group-world-writable-fallback"
  compliance_note: {
    version: { cpe_uri: "fallback" version: "1.0.0" }
    title: "Ensure users' dot files are not group or world writable"
    description:
      "While the system administrator can establish secure permissions for "
      "users' \"dot\" files, the users can easily override these."
    rationale:
      "Group or world-writable user configuration files may enable malicious "
      "users to steal or modify other users' data or to gain another user's "
      "system privileges."
    remediation:
      "Making global modifications to users' files without alerting the user "
      "community can result in unexpected outages and unhappy users. "
      "Therefore, it is recommended that a monitoring policy be established to "
      "report user dot file permissions and determine the action to be taken "
      "in accordance with site policy."
    cis_benchmark: {
      profile_level: 1
      severity: LOW
    }
    scan_instructions:
      "check_alternatives:{"
      "  file_checks:{"
      "    files_to_check:{files_in_dir:{"
      "      dir_path:\"$home\""
      "      filename_regex: \"\\\\.[A-Za-z0-]*\""
      "      recursive: false"
      "      files_only: true"
      "    }}"
      "    permission:{clear_bits: 0022}"
      "    repeat_config:{"
      "      type: FOR_EACH_USER_WITH_LOGIN"
      "      opt_out: {wildcard: \"$user\", value: \"halt\"}"
      "      opt_out: {wildcard: \"$user\", value: \"sync\"}"
      "      opt_out: {wildcard: \"$user\", value: \"shutdown\"}"
      "    }"
      "    non_compliance_msg: \"a user's dot file has group or other write premissions set\""
      "    file_display_command:"
      "      \"#!/bin/bash\\n\""
      "      \"grep -E -v '^(halt|sync|shutdown)' /etc/passwd | awk -F: '($7 != \\\"'\\\"$(which nologin)\\\"'\\\" && $7 != \\\"/bin/false\\\") { print $1 \\\" \\\" $6 }' | while read -r user dir; do\\n\""
      "      \"  if [ ! -d \\\"$dir\\\" ]; then\\n\""
      "      \"    echo \\\"The home directory ($dir) of user $user does not exist.\\\"\\n\""
      "      \"  else\\n\""
      "      \"    for file in $dir/.[A-Za-z0-9]*; do\\n\""
      "      \"     if [ ! -h \\\"$file\\\" -a -f \\\"$file\\\" ]; then\\n\""
      "      \"       fileperm=$(ls -ld $file | cut -f1 -d\\\" \\\")\\n\""
      "      \"       if [ $(echo $fileperm | cut -c6) != \\\"-\\\" ]; then\\n\""
      "      \"         echo \\\"Group Write permission set on file $file\\\"\\n\""
      "      \"       fi\\n\""
      "      \"       if [ $(echo $fileperm | cut -c9) != \\\"-\\\" ]; then\\n\""
      "      \"         echo \\\"Other Write permission set on file $file\\\"\\n\""
      "      \"       fi\\n\""
      "      \"      fi\\n\""
      "      \"    done\\n\""
      "      \"  fi\\n\""
      "      \"done\""
      "  }"
      "}"
      "check_alternatives:{"
      "  file_checks:{"
      "    files_to_check:{single_file:{path:\"/home\"}}"
      "    existence:{should_exist: false}"
      "  }"
      "}"
  }
}
benchmark_configs: {
  id: "no-forward-files-fallback"
  compliance_note: {
    version: { cpe_uri: "fallback" version: "1.0.0" }
    title: "Ensure no users have .forward files"
    description:
      "The .forward file specifies an email address to forward the user's "
      "mail to."
    rationale:
      "Use of the .forward file poses a security risk in that sensitive data "
      "may be inadvertently transferred outside the organization. The .forward "
      "file also poses a risk as it can be used to execute commands that may "
      "perform unintended actions."
    remediation:
      "Making global modifications to users' files without alerting the user "
      "community can result in unexpected outages and unhappy users. "
      "Therefore, it is recommended that a monitoring policy be established "
      "to report user .forward files and determine the action to be taken in "
      "accordance with site policy."
    cis_benchmark: {
      profile_level: 1
      severity: LOW
    }
    scan_instructions:
      "check_alternatives:{"
      "  file_checks:{"
      "    files_to_check:{single_file:{path:\"$home/.forward\"}}"
      "    existence:{should_exist: false}"
      "    repeat_config:{"
      "      type: FOR_EACH_USER_WITH_LOGIN"
      "      opt_out: {wildcard: \"$user\", value: \"root\"}"
      "      opt_out: {wildcard: \"$user\", value: \"halt\"}"
      "      opt_out: {wildcard: \"$user\", value: \"sync\"}"
      "      opt_out: {wildcard: \"$user\", value: \"shutdown\"}"
      "    }"
      "    non_compliance_msg: \"a user has a .forward file\""
      "    file_display_command:"
      "      \"#!/bin/bash\\n\""
      "      \"grep -E -v '^(halt|sync|shutdown)' /etc/passwd | awk -F: '($7 != \\\"'\\\"$(which nologin)\\\"'\\\" && $7 != \\\"/bin/false\\\") { print $1 \\\" \\\" $6 }' | while read -r user dir; do\\n\""
      "      \"  if [ ! -d \\\"$dir\\\" ]; then\\n\""
      "      \"    echo \\\"The home directory ($dir) of user $user does not exist.\\\"\\n\""
      "      \"  else\\n\""
      "      \"    if [ ! -h \\\"$dir/.forward\\\" -a -f \\\"$dir/.forward\\\" ]; then\\n\""
      "      \"     echo \\\".forward file $dir/.forward exists\\\"\\n\""
      "      \"    fi\\n\""
      "      \"  fi\\n\""
      "      \"done\""
      "  }"
      "}"
      "check_alternatives:{"
      "  file_checks:{"
      "    files_to_check:{single_file:{path:\"/home\"}}"
      "    existence:{should_exist: false}"
      "  }"
      "}"
  }
}
benchmark_configs: {
  id: "no-netrc-files-fallback"
  compliance_note: {
    version: { cpe_uri: "fallback" version: "1.0.0" }
    title: "Ensure no users have .netrc files"
    description:
      "The .netrc file contains data for logging into a remote host for file "
      "transfers via FTP"
    rationale:
      "The .netrc file presents a significant security risk since it stores "
      "passwords in unencrypted form. Even if FTP is disabled, user accounts "
      "may have brought over .netrc files from other systems which could pose "
      "a risk to those systems."
    remediation:
      "Making global modifications to users' files without alerting the user "
      "community can result in unexpected outages and unhappy users. "
      "Therefore, it is recommended that a monitoring policy be established "
      "to report user .netrc files and determine the action to be taken in "
      "accordance with site policy."
    cis_benchmark: {
      profile_level: 1
      severity: LOW
    }
    scan_instructions:
      "check_alternatives:{"
      "  file_checks:{"
      "    files_to_check:{single_file:{path:\"$home/.netrc\"}}"
      "    existence:{should_exist: false}"
      "    repeat_config:{"
      "      type: FOR_EACH_USER_WITH_LOGIN"
      "      opt_out: {wildcard: \"$user\", value: \"root\"}"
      "      opt_out: {wildcard: \"$user\", value: \"halt\"}"
      "      opt_out: {wildcard: \"$user\", value: \"sync\"}"
      "      opt_out: {wildcard: \"$user\", value: \"shutdown\"}"
      "    }"
      "    non_compliance_msg: \"a user has a .netrc file\""
      "    file_display_command:"
      "      \"#!/bin/bash\\n\""
      "      \"grep -E -v '^(halt|sync|shutdown)' /etc/passwd | awk -F: '($7 != \\\"'\\\"$(which nologin)\\\"'\\\" && $7 != \\\"/bin/false\\\") { print $1 \\\" \\\" $6 }' | while read -r user dir; do\\n\""
      "      \"  if [ ! -d \\\"$dir\\\" ]; then\\n\""
      "      \"    echo \\\"The home directory ($dir) of user $user does not exist.\\\"\\n\""
      "      \"  else\\n\""
      "      \"    if [ ! -h \\\"$dir/.netrc\\\" -a -f \\\"$dir/.netrc\\\" ]; then\\n\""
      "      \"     echo \\\".netrc file $dir/.netrc exists\\\"\\n\""
      "      \"    fi\\n\""
      "      \"  fi\\n\""
      "      \"done\""
      "  }"
      "}"
      "check_alternatives:{"
      "  file_checks:{"
      "    files_to_check:{single_file:{path:\"/home\"}}"
      "    existence:{should_exist: false}"
      "  }"
      "}"
  }
}
benchmark_configs: {
  id: "netrc-files-not-group-world-accessible-fallback"
  compliance_note: {
    version: { cpe_uri: "fallback" version: "1.0.0" }
    title: "Ensure users' .netrc Files are not group or world accessible"
    description:
      "While the system administrator can establish secure permissions for "
      "users' .netrc files, the users can easily override these."
    rationale:
      ".netrc files may contain unencrypted passwords that may be used to "
      "attack other systems."
    remediation:
      "Making global modifications to users' files without alerting the user "
      "community can result in unexpected outages and unhappy users. "
      "Therefore, it is recommended that a monitoring policy be established to "
      "report user .netrc file permissions and determine the action to be "
      "taken in accordance with site policy."
    cis_benchmark: {
      profile_level: 1
      severity: LOW
    }
    scan_instructions:
      "check_alternatives:{"
      "  file_checks:{"
      # Using files_in_dir makes the check succeed if the file doesn't exist.
      "    files_to_check:{files_in_dir:{"
      "      dir_path:\"$home\""
      "      filename_regex: \"\\\\.netrc\""
      "      recursive: false"
      "    }}"
      "    permission:{clear_bits: 0077}"
      "    repeat_config:{"
      "      type: FOR_EACH_USER_WITH_LOGIN"
      "      opt_out: {wildcard: \"$user\", value: \"root\"}"
      "      opt_out: {wildcard: \"$user\", value: \"halt\"}"
      "      opt_out: {wildcard: \"$user\", value: \"sync\"}"
      "      opt_out: {wildcard: \"$user\", value: \"shutdown\"}"
      "    }"
      "    non_compliance_msg: \"a user has a .netrc file that's group- or world-accessible\""
      "  }"
      "}"
      "check_alternatives:{"
      "  file_checks:{"
      "    files_to_check:{single_file:{path:\"/home\"}}"
      "    existence:{should_exist: false}"
      "  }"
      "}"
  }
}
benchmark_configs: {
  id: "no-rhost-files-fallback"
  compliance_note: {
    version: { cpe_uri: "fallback" version: "1.0.0" }
    title: "Ensure no users have .rhost files"
    description:
      "While no .rhosts files are shipped by default, users can easily "
      "create them."
    rationale:
      "This action is only meaningful if .rhosts support is permitted in the "
      "file /etc/pam.conf. Even though the .rhosts files are ineffective if "
      "support is disabled in /etc/pam.conf, they may have been brought over "
      "from other systems and could contain information useful to an "
      "attacker for those other systems."
    remediation:
      "Making global modifications to users' files without alerting the user "
      "community can result in unexpected outages and unhappy users. "
      "Therefore, it is recommended that a monitoring policy be established to "
      "report user .rhosts files and determine the action to be taken in "
      "accordance with site policy."
    cis_benchmark: {
      profile_level: 1
      severity: LOW
    }
    scan_instructions:
      "check_alternatives:{"
      "  file_checks:{"
      "    files_to_check:{single_file:{path:\"$home/.rhost\"}}"
      "    existence:{should_exist: false}"
      "    repeat_config:{"
      "      type: FOR_EACH_USER_WITH_LOGIN"
      "      opt_out: {wildcard: \"$user\", value: \"root\"}"
      "      opt_out: {wildcard: \"$user\", value: \"halt\"}"
      "      opt_out: {wildcard: \"$user\", value: \"sync\"}"
      "      opt_out: {wildcard: \"$user\", value: \"shutdown\"}"
      "    }"
      "    non_compliance_msg: \"a user has a .rhost file\""
      "    file_display_command:"
      "      \"#!/bin/bash\\n\""
      "      \"grep -E -v '^(halt|sync|shutdown)' /etc/passwd | awk -F: '($7 != \\\"'\\\"$(which nologin)\\\"'\\\" && $7 != \\\"/bin/false\\\") { print $1 \\\" \\\" $6 }' | while read -r user dir; do\\n\""
      "      \"  if [ ! -d \\\"$dir\\\" ]; then\\n\""
      "      \"    echo \\\"The home directory ($dir) of user $user does not exist.\\\"\\n\""
      "      \"  else\\n\""
      "      \"    if [ ! -h \\\"$dir/.rhost\\\" -a -f \\\"$dir/.rhost\\\" ]; then\\n\""
      "      \"     echo \\\".rhost file $dir/.rhost exists\\\"\\n\""
      "      \"    fi\\n\""
      "      \"  fi\\n\""
      "      \"done\""
      "  }"
      "}"
      "check_alternatives:{"
      "  file_checks:{"
      "    files_to_check:{single_file:{path:\"/home\"}}"
      "    existence:{should_exist: false}"
      "  }"
      "}"
  }
}
benchmark_configs: {
  id: "groups-from-etc-passwd-in-etc-group-fallback"
  compliance_note: {
    version: { cpe_uri: "fallback" version: "1.0.0" }
    title: "Ensure all groups in /etc/passwd exist in /etc/group"
    description:
      "Over time, system administration errors and changes can lead to groups "
      "being defined in /etc/passwd but not in /etc/group."
    rationale:
      "Groups defined in the /etc/passwd file but not in the /etc/group file "
      "pose a threat to system security since group permissions are not "
      "properly managed."
    remediation:
      "Analyze the output of the Audit step above and perform the appropriate "
      "action to correct any discrepancies found."
    cis_benchmark: {
      profile_level: 1
      severity: LOW
    }
    scan_instructions:
      "check_alternatives:{"
      "  file_checks:{"
      "    files_to_check:{single_file:{path:\"/etc/group\"}}"
      "    content_entry:{"
      "      match_type: ALL_MATCH_ANY_ORDER"
      "      match_criteria: {"
      "        filter_regex: \".*:.*:$gid:.*\""
      "        expected_regex: \".*:.*:$gid:.*\""
      "      }"
      "    }"
      "    repeat_config:{type: FOR_EACH_USER}"
      "    non_compliance_msg: \"a GID from /etc/passwd isn't present in /etc/group\""
      "    file_display_command:"
      "      \"#!/bin/bash\\n\""
      "      \"for i in $(cut -s -d: -f4 /etc/passwd | sort -u ); do\\n\""
      "      \" grep -q -P \\\"^.*?:[^:]*:$i:\\\" /etc/group\\n\""
      "      \" if [ $? -ne 0 ]; then\\n\""
      "      \"   echo \\\"Group $i is referenced by /etc/passwd but does not exist in /etc/group\\\"\\n\""
      "      \" fi\\n\""
      "      \"done\""
      "  }"
      "}"
      "check_alternatives:{"
      "  file_checks:{"
      "    files_to_check:{single_file:{path:\"/etc/group\"}}"
      "    existence:{should_exist: false}"
      "  }"
      "}"
  }
}
benchmark_configs: {
  id: "no-duplicate-uids-fallback"
  compliance_note: {
    version: { cpe_uri: "fallback" version: "1.0.0" }
    title: "Ensure no duplicate UIDs exist"
    description:
      "Although the useradd program will not let you create a duplicate User ID\n"
      "UID), it is possible for an administrator to manually edit the /etc/passwd\n"
      "file and change the UID field."
    rationale:
      "Users must be assigned unique UIDs for accountability and to ensure\n"
      "appropriate access protections."
    remediation:
      "Based on the results of the audit script, establish unique UIDs and review all\n"
      "files owned by the shared UIDs to determine which UID they are supposed to\n"
      "belong to."
    cis_benchmark: {
      profile_level: 1
      severity: LOW
    }
    scan_instructions:
      "check_alternatives:{"
      "  file_checks:{"
      "    files_to_check:{single_file:{path:\"/etc/passwd\"}}"
      "    content_entry:{"
      "      match_type: ALL_MATCH_ANY_ORDER"
      "      match_criteria: {"
      "        filter_regex: \".*:.*:.*:.*:.*:.*:.*\""
      "        expected_regex: \".*:.*:(\\\\d+):.*:.*:.*:.*\""
      "        group_criteria: {"
      "          group_index: 1"
      "          type: UNIQUE"
      "        }"
      "      }"
      "    }"
      "    non_compliance_msg: \"there are duplicate UIDs\""
      "    file_display_command: \"#!/bin/bash\\ncut -f3 -d\\\":\\\" /etc/passwd | sort -n | uniq -c | while read x ; do\\n  [ -z \\\"$x\\\" ] && break\\n  set - $x\\n  if [ $1 -gt 1 ]; then\\n    users=$(awk -F: '($3 == n) { print $1 }' n=$2 /etc/passwd | xargs)\\n    echo \\\"Duplicate UID ($2): $users\\\"\\n  fi\\ndone\""
      "  }"
      "}"
      "check_alternatives:{"
      "  file_checks:{"
      "    files_to_check:{single_file:{path:\"/etc/passwd\"}}"
      "    existence:{should_exist: false}"
      "  }"
      "}"
  }
}
benchmark_configs: {
  id: "no-duplicate-gids-fallback"
  compliance_note: {
    version: { cpe_uri: "fallback" version: "1.0.0" }
    title: "Ensure no duplicate GIDs exist"
    description:
      "Although the groupadd program will not let you create a duplicate Group ID\n"
      "GID), it is possible for an administrator to manually edit the /etc/group file\n"
      "and change the GID field."
    rationale: "User groups must be assigned unique GIDs for accountability and to ensure appropriate access protections."
    remediation:
      "Based on the results of the audit script, establish unique GIDs and review all\n"
      "files owned by the shared GID to determine which group they are supposed to\n"
      "belong to."
    cis_benchmark: {
      profile_level: 1
      severity: LOW
    }
    scan_instructions:
      "check_alternatives:{"
      "  file_checks:{"
      "    files_to_check:{single_file:{path:\"/etc/group\"}}"
      "    content_entry:{"
      "      match_type: ALL_MATCH_ANY_ORDER"
      "      match_criteria: {"
      "        filter_regex: \".*:.*:.*:.*\""
      "        expected_regex: \".*:.*:(\\\\d+):.*\""
      "        group_criteria: {"
      "          group_index: 1"
      "          type: UNIQUE"
      "        }"
      "      }"
      "    }"
      "    non_compliance_msg: \"there are duplicate GIDs\""
      "    file_display_command: \"#!/bin/bash\\ncut -f3 -d\\\":\\\" /etc/group | sort -n | uniq -c | while read x ; do\\n  [ -z \\\"$x\\\" ] && break\\n  set - $x\\n  if [ $1 -gt 1 ]; then\\n    groups=$(awk -F: '($3 == n) { print $1 }' n=$2 /etc/group | xargs)\\n    echo \\\"Duplicate GID ($2): $groups\\\"\\n  fi\\ndone\""
      "  }"
      "}"
      "check_alternatives:{"
      "  file_checks:{"
      "    files_to_check:{single_file:{path:\"/etc/group\"}}"
      "    existence:{should_exist: false}"
      "  }"
      "}"
  }
}
benchmark_configs: {
  id: "no-duplicate-user-names-fallback"
  compliance_note: {
    version: { cpe_uri: "fallback" version: "1.0.0" }
    title: "Ensure no duplicate user names exist"
    description:
      "Although the useradd program will not let you create a duplicate user name, it\n"
      "is possible for an administrator to manually edit the /etc/passwd file and\n"
      "change the user name."
    rationale:
      "If a user is assigned a duplicate user name, it will create and have access to\n"
      "files with the first UID for that username in /etc/passwd . For example, if\n"
      "\"test4\" has a UID of 1000 and a subsequent \"test4\" entry has a UID of 2000\n"
      "logging in as \"test4\" will use UID 1000. Effectively the UID is shared which\n"
      "is a security problem."
    remediation:
      "Based on the results of the audit script, establish unique user names for the\n"
      "users. File ownerships will automatically reflect the change as long as the\n"
      "users have unique UIDs."
    cis_benchmark: {
      profile_level: 1
      severity: LOW
    }
    scan_instructions:
      "check_alternatives:{"
      "  file_checks:{"
      "    files_to_check:{single_file:{path:\"/etc/passwd\"}}"
      "    content_entry:{"
      "      match_type: ALL_MATCH_ANY_ORDER"
      "      match_criteria: {"
      "        filter_regex: \".*:.*:.*:.*:.*:.*:.*\""
      "        expected_regex: \"(.*):.*:.*:.*:.*:.*:.*\""
      "        group_criteria: {"
      "          group_index: 1"
      "          type: UNIQUE"
      "        }"
      "      }"
      "    }"
      "    non_compliance_msg: \"there are duplicate user names\""
      "    file_display_command: \"#!/bin/bash\\ncut -f1 -d\\\":\\\" /etc/passwd | sort -n | uniq -c | while read x ; do\\n  [ -z \\\"$x\\\" ] && break\\n  set - $x\\n  if [ $1 -gt 1 ]; then\\n    uids=$(awk -F: '($1 == n) { print $3 }' n=$2 /etc/passwd | xargs)\\n    echo \\\"Duplicate User Name ($2): $uids\\\"\\n  fi\\ndone\""
      "  }"
      "}"
      "check_alternatives:{"
      "  file_checks:{"
      "    files_to_check:{single_file:{path:\"/etc/passwd\"}}"
      "    existence:{should_exist: false}"
      "  }"
      "}"
  }
}
benchmark_configs: {
  id: "no-duplicate-group-names-fallback"
  compliance_note: {
    version: { cpe_uri: "fallback" version: "1.0.0" }
    title: "Ensure no duplicate group names exist"
    description:
      "Although the groupadd program will not let you create a duplicate group name,\n"
      "it is possible for an administrator to manually edit the /etc/group file and\n"
      "change the group name."
    rationale:
      "If a group is assigned a duplicate group name, it will create and have access\n"
      "to files with the first GID for that group in /etc/group . Effectively, the\n"
      "GID is shared, which is a security problem."
    remediation:
      "Based on the results of the audit script, establish unique names for the user\n"
      "groups. File group ownerships will automatically reflect the change as long as\n"
      "the groups have unique GIDs."
    cis_benchmark: {
      profile_level: 1
      severity: LOW
    }
    scan_instructions:
      "check_alternatives:{"
      "  file_checks:{"
      "    files_to_check:{single_file:{path:\"/etc/group\"}}"
      "    content_entry:{"
      "      match_type: ALL_MATCH_ANY_ORDER"
      "      match_criteria: {"
      "        filter_regex: \".*:.*:.*:.*\""
      "        expected_regex: \"(.*):.*:.*:.*\""
      "        group_criteria: {"
      "          group_index: 1"
      "          type: UNIQUE"
      "        }"
      "      }"
      "    }"
      "    non_compliance_msg: \"there are duplicate group names\""
      "    file_display_command: \"#!/bin/bash\\ncut -f1 -d\\\":\\\" /etc/group | sort -n | uniq -c | while read x ; do\\n  [ -z \\\"$x\\\" ] && break\\n  set - $x\\n  if [ $1 -gt 1 ]; then\\n    gids=$(gawk -F: '($1 == n) { print $3 }' n=$2 /etc/group | xargs)\\n    echo \\\"Duplicate Group Name ($2): $gids\\\"\\n  fi\\ndone\""
      "  }"
      "}"
      "check_alternatives:{"
      "  file_checks:{"
      "    files_to_check:{single_file:{path:\"/etc/group\"}}"
      "    existence:{should_exist: false}"
      "  }"
      "}"
  }
}
benchmark_configs: {
  id: "shadow-group-empty-fallback"
  compliance_note: {
    version: { cpe_uri: "fallback" version: "1.0.0" }
    title: "Ensure shadow group is empty"
    description:
      "The shadow group allows system programs which require access the ability to\n"
      "read the /etc/shadow file. No users should be assigned to the shadow group."
    rationale:
      "Any users assigned to the shadow group would be granted read access to the\n"
      "etc/shadow file. If attackers can gain read access to the /etc/shadow file,\n"
      "they can easily run a password cracking program against the hashed passwords\n"
      "to break them. Other security information that is stored in the /etc/shadow\n"
      "file (such as expiration) could also be useful to subvert additional user\n"
      "accounts."
    remediation:
      "Remove all users from the shadow group, and change the primary group of any\n"
      "users with shadow as their primary group."
    cis_benchmark: {
      profile_level: 1
      severity: LOW
    }
    scan_instructions:
      "check_alternatives:{"
      "  file_checks:{"
      "    files_to_check:{single_file:{path:\"/etc/group\"}}"
      "    content_entry:{"
      "      match_type: NONE_MATCH"
      "      match_criteria: {"
      "        filter_regex: \"shadow:[^:]*:[^:]*:[^:]+\""
      "        expected_regex: \"shadow:[^:]*:[^:]*:[^:]+\""
      "      }"
      "    }"
      "    non_compliance_msg: \"a shadow group exists in /etc/group\""
      "    file_display_command: \"grep ^shadow:[^:]*:[^:]*:[^:]+ /etc/group\""
      "  }"
      "}"
      "check_alternatives:{"
      "  file_checks:{"
      "    files_to_check:{single_file:{path:\"/etc/group\"}}"
      "    existence:{should_exist: false}"
      "  }"
      "}"
  }
}
